//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ENK.ServiceReference1 {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ServiceData", Namespace="http://schemas.datacontract.org/2004/07/ENKService")]
    [System.SerializableAttribute()]
    public partial class ServiceData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ErrorDetailsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ErrorMessageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ResultField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ErrorDetails {
            get {
                return this.ErrorDetailsField;
            }
            set {
                if ((object.ReferenceEquals(this.ErrorDetailsField, value) != true)) {
                    this.ErrorDetailsField = value;
                    this.RaisePropertyChanged("ErrorDetails");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ErrorMessage {
            get {
                return this.ErrorMessageField;
            }
            set {
                if ((object.ReferenceEquals(this.ErrorMessageField, value) != true)) {
                    this.ErrorMessageField = value;
                    this.RaisePropertyChanged("ErrorMessage");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Result {
            get {
                return this.ResultField;
            }
            set {
                if ((this.ResultField.Equals(value) != true)) {
                    this.ResultField = value;
                    this.RaisePropertyChanged("Result");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SPOS", Namespace="http://schemas.datacontract.org/2004/07/ENKService")]
    [System.SerializableAttribute()]
    public partial class SPOS : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AddressField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CoustomerNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EmailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long MSISDN_SIM_IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MobileNumberField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Address {
            get {
                return this.AddressField;
            }
            set {
                if ((object.ReferenceEquals(this.AddressField, value) != true)) {
                    this.AddressField = value;
                    this.RaisePropertyChanged("Address");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CoustomerName {
            get {
                return this.CoustomerNameField;
            }
            set {
                if ((object.ReferenceEquals(this.CoustomerNameField, value) != true)) {
                    this.CoustomerNameField = value;
                    this.RaisePropertyChanged("CoustomerName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Email {
            get {
                return this.EmailField;
            }
            set {
                if ((object.ReferenceEquals(this.EmailField, value) != true)) {
                    this.EmailField = value;
                    this.RaisePropertyChanged("Email");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long MSISDN_SIM_ID {
            get {
                return this.MSISDN_SIM_IDField;
            }
            set {
                if ((this.MSISDN_SIM_IDField.Equals(value) != true)) {
                    this.MSISDN_SIM_IDField = value;
                    this.RaisePropertyChanged("MSISDN_SIM_ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MobileNumber {
            get {
                return this.MobileNumberField;
            }
            set {
                if ((object.ReferenceEquals(this.MobileNumberField, value) != true)) {
                    this.MobileNumberField = value;
                    this.RaisePropertyChanged("MobileNumber");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SVendor", Namespace="http://schemas.datacontract.org/2004/07/ENKService")]
    [System.SerializableAttribute()]
    public partial class SVendor : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsActiveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string VendorAddressField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string VendorCodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string VendorContactPersonField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string VendorEmailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int VendorIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string VendorMobileField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string VendorNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsActive {
            get {
                return this.IsActiveField;
            }
            set {
                if ((this.IsActiveField.Equals(value) != true)) {
                    this.IsActiveField = value;
                    this.RaisePropertyChanged("IsActive");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string VendorAddress {
            get {
                return this.VendorAddressField;
            }
            set {
                if ((object.ReferenceEquals(this.VendorAddressField, value) != true)) {
                    this.VendorAddressField = value;
                    this.RaisePropertyChanged("VendorAddress");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string VendorCode {
            get {
                return this.VendorCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.VendorCodeField, value) != true)) {
                    this.VendorCodeField = value;
                    this.RaisePropertyChanged("VendorCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string VendorContactPerson {
            get {
                return this.VendorContactPersonField;
            }
            set {
                if ((object.ReferenceEquals(this.VendorContactPersonField, value) != true)) {
                    this.VendorContactPersonField = value;
                    this.RaisePropertyChanged("VendorContactPerson");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string VendorEmail {
            get {
                return this.VendorEmailField;
            }
            set {
                if ((object.ReferenceEquals(this.VendorEmailField, value) != true)) {
                    this.VendorEmailField = value;
                    this.RaisePropertyChanged("VendorEmail");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int VendorID {
            get {
                return this.VendorIDField;
            }
            set {
                if ((this.VendorIDField.Equals(value) != true)) {
                    this.VendorIDField = value;
                    this.RaisePropertyChanged("VendorID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string VendorMobile {
            get {
                return this.VendorMobileField;
            }
            set {
                if ((object.ReferenceEquals(this.VendorMobileField, value) != true)) {
                    this.VendorMobileField = value;
                    this.RaisePropertyChanged("VendorMobile");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string VendorName {
            get {
                return this.VendorNameField;
            }
            set {
                if ((object.ReferenceEquals(this.VendorNameField, value) != true)) {
                    this.VendorNameField = value;
                    this.RaisePropertyChanged("VendorName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SPayment", Namespace="http://schemas.datacontract.org/2004/07/ENKService")]
    [System.SerializableAttribute()]
    public partial class SPayment : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ALLOCATED_MSISDNField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ActivationRequestField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ActivationRespField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ActivationStatusField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ActivationTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ActivationViaField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AddressField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal ChargedAmountField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CheckSummField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CurrencyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CusNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EmailIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MidField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MobileField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int MonthField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string OrderIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PayeeIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PayerIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PaymentFromField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PaymentIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PaymentModeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PaymentTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ReceiptIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal RegulateryField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RemarksField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RespCodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RespMsgField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TariffIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TransactionIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TransactionStatusField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TransactionStatusIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TxnAmountField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TxnDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TxnIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string mPaymentModeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ALLOCATED_MSISDN {
            get {
                return this.ALLOCATED_MSISDNField;
            }
            set {
                if ((object.ReferenceEquals(this.ALLOCATED_MSISDNField, value) != true)) {
                    this.ALLOCATED_MSISDNField = value;
                    this.RaisePropertyChanged("ALLOCATED_MSISDN");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ActivationRequest {
            get {
                return this.ActivationRequestField;
            }
            set {
                if ((object.ReferenceEquals(this.ActivationRequestField, value) != true)) {
                    this.ActivationRequestField = value;
                    this.RaisePropertyChanged("ActivationRequest");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ActivationResp {
            get {
                return this.ActivationRespField;
            }
            set {
                if ((object.ReferenceEquals(this.ActivationRespField, value) != true)) {
                    this.ActivationRespField = value;
                    this.RaisePropertyChanged("ActivationResp");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ActivationStatus {
            get {
                return this.ActivationStatusField;
            }
            set {
                if ((this.ActivationStatusField.Equals(value) != true)) {
                    this.ActivationStatusField = value;
                    this.RaisePropertyChanged("ActivationStatus");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ActivationType {
            get {
                return this.ActivationTypeField;
            }
            set {
                if ((this.ActivationTypeField.Equals(value) != true)) {
                    this.ActivationTypeField = value;
                    this.RaisePropertyChanged("ActivationType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ActivationVia {
            get {
                return this.ActivationViaField;
            }
            set {
                if ((this.ActivationViaField.Equals(value) != true)) {
                    this.ActivationViaField = value;
                    this.RaisePropertyChanged("ActivationVia");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Address {
            get {
                return this.AddressField;
            }
            set {
                if ((object.ReferenceEquals(this.AddressField, value) != true)) {
                    this.AddressField = value;
                    this.RaisePropertyChanged("Address");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal ChargedAmount {
            get {
                return this.ChargedAmountField;
            }
            set {
                if ((this.ChargedAmountField.Equals(value) != true)) {
                    this.ChargedAmountField = value;
                    this.RaisePropertyChanged("ChargedAmount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CheckSumm {
            get {
                return this.CheckSummField;
            }
            set {
                if ((object.ReferenceEquals(this.CheckSummField, value) != true)) {
                    this.CheckSummField = value;
                    this.RaisePropertyChanged("CheckSumm");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Currency {
            get {
                return this.CurrencyField;
            }
            set {
                if ((this.CurrencyField.Equals(value) != true)) {
                    this.CurrencyField = value;
                    this.RaisePropertyChanged("Currency");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CusName {
            get {
                return this.CusNameField;
            }
            set {
                if ((object.ReferenceEquals(this.CusNameField, value) != true)) {
                    this.CusNameField = value;
                    this.RaisePropertyChanged("CusName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EmailID {
            get {
                return this.EmailIDField;
            }
            set {
                if ((object.ReferenceEquals(this.EmailIDField, value) != true)) {
                    this.EmailIDField = value;
                    this.RaisePropertyChanged("EmailID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Mid {
            get {
                return this.MidField;
            }
            set {
                if ((object.ReferenceEquals(this.MidField, value) != true)) {
                    this.MidField = value;
                    this.RaisePropertyChanged("Mid");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Mobile {
            get {
                return this.MobileField;
            }
            set {
                if ((object.ReferenceEquals(this.MobileField, value) != true)) {
                    this.MobileField = value;
                    this.RaisePropertyChanged("Mobile");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Month {
            get {
                return this.MonthField;
            }
            set {
                if ((this.MonthField.Equals(value) != true)) {
                    this.MonthField = value;
                    this.RaisePropertyChanged("Month");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string OrderId {
            get {
                return this.OrderIdField;
            }
            set {
                if ((object.ReferenceEquals(this.OrderIdField, value) != true)) {
                    this.OrderIdField = value;
                    this.RaisePropertyChanged("OrderId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PayeeID {
            get {
                return this.PayeeIDField;
            }
            set {
                if ((this.PayeeIDField.Equals(value) != true)) {
                    this.PayeeIDField = value;
                    this.RaisePropertyChanged("PayeeID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PayerId {
            get {
                return this.PayerIdField;
            }
            set {
                if ((object.ReferenceEquals(this.PayerIdField, value) != true)) {
                    this.PayerIdField = value;
                    this.RaisePropertyChanged("PayerId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PaymentFrom {
            get {
                return this.PaymentFromField;
            }
            set {
                if ((this.PaymentFromField.Equals(value) != true)) {
                    this.PaymentFromField = value;
                    this.RaisePropertyChanged("PaymentFrom");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PaymentId {
            get {
                return this.PaymentIdField;
            }
            set {
                if ((this.PaymentIdField.Equals(value) != true)) {
                    this.PaymentIdField = value;
                    this.RaisePropertyChanged("PaymentId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PaymentMode {
            get {
                return this.PaymentModeField;
            }
            set {
                if ((object.ReferenceEquals(this.PaymentModeField, value) != true)) {
                    this.PaymentModeField = value;
                    this.RaisePropertyChanged("PaymentMode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PaymentType {
            get {
                return this.PaymentTypeField;
            }
            set {
                if ((this.PaymentTypeField.Equals(value) != true)) {
                    this.PaymentTypeField = value;
                    this.RaisePropertyChanged("PaymentType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ReceiptId {
            get {
                return this.ReceiptIdField;
            }
            set {
                if ((object.ReferenceEquals(this.ReceiptIdField, value) != true)) {
                    this.ReceiptIdField = value;
                    this.RaisePropertyChanged("ReceiptId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal Regulatery {
            get {
                return this.RegulateryField;
            }
            set {
                if ((this.RegulateryField.Equals(value) != true)) {
                    this.RegulateryField = value;
                    this.RaisePropertyChanged("Regulatery");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Remarks {
            get {
                return this.RemarksField;
            }
            set {
                if ((object.ReferenceEquals(this.RemarksField, value) != true)) {
                    this.RemarksField = value;
                    this.RaisePropertyChanged("Remarks");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RespCode {
            get {
                return this.RespCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.RespCodeField, value) != true)) {
                    this.RespCodeField = value;
                    this.RaisePropertyChanged("RespCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RespMsg {
            get {
                return this.RespMsgField;
            }
            set {
                if ((object.ReferenceEquals(this.RespMsgField, value) != true)) {
                    this.RespMsgField = value;
                    this.RaisePropertyChanged("RespMsg");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TariffID {
            get {
                return this.TariffIDField;
            }
            set {
                if ((this.TariffIDField.Equals(value) != true)) {
                    this.TariffIDField = value;
                    this.RaisePropertyChanged("TariffID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TransactionId {
            get {
                return this.TransactionIdField;
            }
            set {
                if ((object.ReferenceEquals(this.TransactionIdField, value) != true)) {
                    this.TransactionIdField = value;
                    this.RaisePropertyChanged("TransactionId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TransactionStatus {
            get {
                return this.TransactionStatusField;
            }
            set {
                if ((object.ReferenceEquals(this.TransactionStatusField, value) != true)) {
                    this.TransactionStatusField = value;
                    this.RaisePropertyChanged("TransactionStatus");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TransactionStatusId {
            get {
                return this.TransactionStatusIdField;
            }
            set {
                if ((this.TransactionStatusIdField.Equals(value) != true)) {
                    this.TransactionStatusIdField = value;
                    this.RaisePropertyChanged("TransactionStatusId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TxnAmount {
            get {
                return this.TxnAmountField;
            }
            set {
                if ((object.ReferenceEquals(this.TxnAmountField, value) != true)) {
                    this.TxnAmountField = value;
                    this.RaisePropertyChanged("TxnAmount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TxnDate {
            get {
                return this.TxnDateField;
            }
            set {
                if ((object.ReferenceEquals(this.TxnDateField, value) != true)) {
                    this.TxnDateField = value;
                    this.RaisePropertyChanged("TxnDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TxnId {
            get {
                return this.TxnIdField;
            }
            set {
                if ((object.ReferenceEquals(this.TxnIdField, value) != true)) {
                    this.TxnIdField = value;
                    this.RaisePropertyChanged("TxnId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string mPaymentMode {
            get {
                return this.mPaymentModeField;
            }
            set {
                if ((object.ReferenceEquals(this.mPaymentModeField, value) != true)) {
                    this.mPaymentModeField = value;
                    this.RaisePropertyChanged("mPaymentMode");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="STariff", Namespace="http://schemas.datacontract.org/2004/07/ENKService")]
    [System.SerializableAttribute()]
    public partial class STariff : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double ComissionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double Discount_on_Activation_PortInField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double Discount_on_RechargeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int FrequencyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string GroupNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double H2OGeneralDiscountField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsActiveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int NetworkIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double RentalField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int SellerIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TarifIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TarifNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TariffCodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TariffGroupIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TariffIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TariffTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ValidDaysField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Data.DataTable dtSpiffDetailField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Comission {
            get {
                return this.ComissionField;
            }
            set {
                if ((this.ComissionField.Equals(value) != true)) {
                    this.ComissionField = value;
                    this.RaisePropertyChanged("Comission");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Discount_on_Activation_PortIn {
            get {
                return this.Discount_on_Activation_PortInField;
            }
            set {
                if ((this.Discount_on_Activation_PortInField.Equals(value) != true)) {
                    this.Discount_on_Activation_PortInField = value;
                    this.RaisePropertyChanged("Discount_on_Activation_PortIn");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Discount_on_Recharge {
            get {
                return this.Discount_on_RechargeField;
            }
            set {
                if ((this.Discount_on_RechargeField.Equals(value) != true)) {
                    this.Discount_on_RechargeField = value;
                    this.RaisePropertyChanged("Discount_on_Recharge");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Frequency {
            get {
                return this.FrequencyField;
            }
            set {
                if ((this.FrequencyField.Equals(value) != true)) {
                    this.FrequencyField = value;
                    this.RaisePropertyChanged("Frequency");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string GroupName {
            get {
                return this.GroupNameField;
            }
            set {
                if ((object.ReferenceEquals(this.GroupNameField, value) != true)) {
                    this.GroupNameField = value;
                    this.RaisePropertyChanged("GroupName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double H2OGeneralDiscount {
            get {
                return this.H2OGeneralDiscountField;
            }
            set {
                if ((this.H2OGeneralDiscountField.Equals(value) != true)) {
                    this.H2OGeneralDiscountField = value;
                    this.RaisePropertyChanged("H2OGeneralDiscount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsActive {
            get {
                return this.IsActiveField;
            }
            set {
                if ((this.IsActiveField.Equals(value) != true)) {
                    this.IsActiveField = value;
                    this.RaisePropertyChanged("IsActive");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int NetworkID {
            get {
                return this.NetworkIDField;
            }
            set {
                if ((this.NetworkIDField.Equals(value) != true)) {
                    this.NetworkIDField = value;
                    this.RaisePropertyChanged("NetworkID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Rental {
            get {
                return this.RentalField;
            }
            set {
                if ((this.RentalField.Equals(value) != true)) {
                    this.RentalField = value;
                    this.RaisePropertyChanged("Rental");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int SellerID {
            get {
                return this.SellerIDField;
            }
            set {
                if ((this.SellerIDField.Equals(value) != true)) {
                    this.SellerIDField = value;
                    this.RaisePropertyChanged("SellerID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TarifID {
            get {
                return this.TarifIDField;
            }
            set {
                if ((this.TarifIDField.Equals(value) != true)) {
                    this.TarifIDField = value;
                    this.RaisePropertyChanged("TarifID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TarifName {
            get {
                return this.TarifNameField;
            }
            set {
                if ((object.ReferenceEquals(this.TarifNameField, value) != true)) {
                    this.TarifNameField = value;
                    this.RaisePropertyChanged("TarifName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TariffCode {
            get {
                return this.TariffCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.TariffCodeField, value) != true)) {
                    this.TariffCodeField = value;
                    this.RaisePropertyChanged("TariffCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TariffGroupId {
            get {
                return this.TariffGroupIdField;
            }
            set {
                if ((this.TariffGroupIdField.Equals(value) != true)) {
                    this.TariffGroupIdField = value;
                    this.RaisePropertyChanged("TariffGroupId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TariffID {
            get {
                return this.TariffIDField;
            }
            set {
                if ((this.TariffIDField.Equals(value) != true)) {
                    this.TariffIDField = value;
                    this.RaisePropertyChanged("TariffID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TariffType {
            get {
                return this.TariffTypeField;
            }
            set {
                if ((this.TariffTypeField.Equals(value) != true)) {
                    this.TariffTypeField = value;
                    this.RaisePropertyChanged("TariffType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ValidDays {
            get {
                return this.ValidDaysField;
            }
            set {
                if ((this.ValidDaysField.Equals(value) != true)) {
                    this.ValidDaysField = value;
                    this.RaisePropertyChanged("ValidDays");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Data.DataTable dtSpiffDetail {
            get {
                return this.dtSpiffDetailField;
            }
            set {
                if ((object.ReferenceEquals(this.dtSpiffDetailField, value) != true)) {
                    this.dtSpiffDetailField = value;
                    this.RaisePropertyChanged("dtSpiffDetail");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Distributor", Namespace="http://schemas.datacontract.org/2004/07/ENKService")]
    [System.SerializableAttribute()]
    public partial class Distributor : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CertificateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CreatedDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DocumentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EINField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string HoldstatusField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ModifiedDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int NoOfActivationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int NoOfBlankSimField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PanNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PasswordField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SSNField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TariffGroupIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string addressField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal balanceAmountField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string cityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int companyTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string companyTypeNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string contactNoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string contactPersonField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int countryidField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int distributorCodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int distributorIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string distributorNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string emailIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool isActiveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool isServiceTaxExmptedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int loginIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int parentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string parentDistributorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int relationManagerField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string serviceTAxNoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double serviceTAxPerField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string stateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string vatNoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double vatPerField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string webSiteNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string zipField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Certificate {
            get {
                return this.CertificateField;
            }
            set {
                if ((object.ReferenceEquals(this.CertificateField, value) != true)) {
                    this.CertificateField = value;
                    this.RaisePropertyChanged("Certificate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CreatedDate {
            get {
                return this.CreatedDateField;
            }
            set {
                if ((object.ReferenceEquals(this.CreatedDateField, value) != true)) {
                    this.CreatedDateField = value;
                    this.RaisePropertyChanged("CreatedDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Document {
            get {
                return this.DocumentField;
            }
            set {
                if ((object.ReferenceEquals(this.DocumentField, value) != true)) {
                    this.DocumentField = value;
                    this.RaisePropertyChanged("Document");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EIN {
            get {
                return this.EINField;
            }
            set {
                if ((object.ReferenceEquals(this.EINField, value) != true)) {
                    this.EINField = value;
                    this.RaisePropertyChanged("EIN");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Holdstatus {
            get {
                return this.HoldstatusField;
            }
            set {
                if ((object.ReferenceEquals(this.HoldstatusField, value) != true)) {
                    this.HoldstatusField = value;
                    this.RaisePropertyChanged("Holdstatus");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ModifiedDate {
            get {
                return this.ModifiedDateField;
            }
            set {
                if ((object.ReferenceEquals(this.ModifiedDateField, value) != true)) {
                    this.ModifiedDateField = value;
                    this.RaisePropertyChanged("ModifiedDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int NoOfActivation {
            get {
                return this.NoOfActivationField;
            }
            set {
                if ((this.NoOfActivationField.Equals(value) != true)) {
                    this.NoOfActivationField = value;
                    this.RaisePropertyChanged("NoOfActivation");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int NoOfBlankSim {
            get {
                return this.NoOfBlankSimField;
            }
            set {
                if ((this.NoOfBlankSimField.Equals(value) != true)) {
                    this.NoOfBlankSimField = value;
                    this.RaisePropertyChanged("NoOfBlankSim");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PanNumber {
            get {
                return this.PanNumberField;
            }
            set {
                if ((object.ReferenceEquals(this.PanNumberField, value) != true)) {
                    this.PanNumberField = value;
                    this.RaisePropertyChanged("PanNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Password {
            get {
                return this.PasswordField;
            }
            set {
                if ((object.ReferenceEquals(this.PasswordField, value) != true)) {
                    this.PasswordField = value;
                    this.RaisePropertyChanged("Password");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SSN {
            get {
                return this.SSNField;
            }
            set {
                if ((object.ReferenceEquals(this.SSNField, value) != true)) {
                    this.SSNField = value;
                    this.RaisePropertyChanged("SSN");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TariffGroupID {
            get {
                return this.TariffGroupIDField;
            }
            set {
                if ((this.TariffGroupIDField.Equals(value) != true)) {
                    this.TariffGroupIDField = value;
                    this.RaisePropertyChanged("TariffGroupID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string address {
            get {
                return this.addressField;
            }
            set {
                if ((object.ReferenceEquals(this.addressField, value) != true)) {
                    this.addressField = value;
                    this.RaisePropertyChanged("address");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal balanceAmount {
            get {
                return this.balanceAmountField;
            }
            set {
                if ((this.balanceAmountField.Equals(value) != true)) {
                    this.balanceAmountField = value;
                    this.RaisePropertyChanged("balanceAmount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string city {
            get {
                return this.cityField;
            }
            set {
                if ((object.ReferenceEquals(this.cityField, value) != true)) {
                    this.cityField = value;
                    this.RaisePropertyChanged("city");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int companyType {
            get {
                return this.companyTypeField;
            }
            set {
                if ((this.companyTypeField.Equals(value) != true)) {
                    this.companyTypeField = value;
                    this.RaisePropertyChanged("companyType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string companyTypeName {
            get {
                return this.companyTypeNameField;
            }
            set {
                if ((object.ReferenceEquals(this.companyTypeNameField, value) != true)) {
                    this.companyTypeNameField = value;
                    this.RaisePropertyChanged("companyTypeName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string contactNo {
            get {
                return this.contactNoField;
            }
            set {
                if ((object.ReferenceEquals(this.contactNoField, value) != true)) {
                    this.contactNoField = value;
                    this.RaisePropertyChanged("contactNo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string contactPerson {
            get {
                return this.contactPersonField;
            }
            set {
                if ((object.ReferenceEquals(this.contactPersonField, value) != true)) {
                    this.contactPersonField = value;
                    this.RaisePropertyChanged("contactPerson");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int countryid {
            get {
                return this.countryidField;
            }
            set {
                if ((this.countryidField.Equals(value) != true)) {
                    this.countryidField = value;
                    this.RaisePropertyChanged("countryid");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int distributorCode {
            get {
                return this.distributorCodeField;
            }
            set {
                if ((this.distributorCodeField.Equals(value) != true)) {
                    this.distributorCodeField = value;
                    this.RaisePropertyChanged("distributorCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int distributorID {
            get {
                return this.distributorIDField;
            }
            set {
                if ((this.distributorIDField.Equals(value) != true)) {
                    this.distributorIDField = value;
                    this.RaisePropertyChanged("distributorID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string distributorName {
            get {
                return this.distributorNameField;
            }
            set {
                if ((object.ReferenceEquals(this.distributorNameField, value) != true)) {
                    this.distributorNameField = value;
                    this.RaisePropertyChanged("distributorName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string emailID {
            get {
                return this.emailIDField;
            }
            set {
                if ((object.ReferenceEquals(this.emailIDField, value) != true)) {
                    this.emailIDField = value;
                    this.RaisePropertyChanged("emailID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool isActive {
            get {
                return this.isActiveField;
            }
            set {
                if ((this.isActiveField.Equals(value) != true)) {
                    this.isActiveField = value;
                    this.RaisePropertyChanged("isActive");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool isServiceTaxExmpted {
            get {
                return this.isServiceTaxExmptedField;
            }
            set {
                if ((this.isServiceTaxExmptedField.Equals(value) != true)) {
                    this.isServiceTaxExmptedField = value;
                    this.RaisePropertyChanged("isServiceTaxExmpted");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int loginID {
            get {
                return this.loginIDField;
            }
            set {
                if ((this.loginIDField.Equals(value) != true)) {
                    this.loginIDField = value;
                    this.RaisePropertyChanged("loginID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int parent {
            get {
                return this.parentField;
            }
            set {
                if ((this.parentField.Equals(value) != true)) {
                    this.parentField = value;
                    this.RaisePropertyChanged("parent");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string parentDistributor {
            get {
                return this.parentDistributorField;
            }
            set {
                if ((object.ReferenceEquals(this.parentDistributorField, value) != true)) {
                    this.parentDistributorField = value;
                    this.RaisePropertyChanged("parentDistributor");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int relationManager {
            get {
                return this.relationManagerField;
            }
            set {
                if ((this.relationManagerField.Equals(value) != true)) {
                    this.relationManagerField = value;
                    this.RaisePropertyChanged("relationManager");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string serviceTAxNo {
            get {
                return this.serviceTAxNoField;
            }
            set {
                if ((object.ReferenceEquals(this.serviceTAxNoField, value) != true)) {
                    this.serviceTAxNoField = value;
                    this.RaisePropertyChanged("serviceTAxNo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double serviceTAxPer {
            get {
                return this.serviceTAxPerField;
            }
            set {
                if ((this.serviceTAxPerField.Equals(value) != true)) {
                    this.serviceTAxPerField = value;
                    this.RaisePropertyChanged("serviceTAxPer");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string state {
            get {
                return this.stateField;
            }
            set {
                if ((object.ReferenceEquals(this.stateField, value) != true)) {
                    this.stateField = value;
                    this.RaisePropertyChanged("state");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string vatNo {
            get {
                return this.vatNoField;
            }
            set {
                if ((object.ReferenceEquals(this.vatNoField, value) != true)) {
                    this.vatNoField = value;
                    this.RaisePropertyChanged("vatNo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double vatPer {
            get {
                return this.vatPerField;
            }
            set {
                if ((this.vatPerField.Equals(value) != true)) {
                    this.vatPerField = value;
                    this.RaisePropertyChanged("vatPer");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string webSiteName {
            get {
                return this.webSiteNameField;
            }
            set {
                if ((object.ReferenceEquals(this.webSiteNameField, value) != true)) {
                    this.webSiteNameField = value;
                    this.RaisePropertyChanged("webSiteName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string zip {
            get {
                return this.zipField;
            }
            set {
                if ((object.ReferenceEquals(this.zipField, value) != true)) {
                    this.zipField = value;
                    this.RaisePropertyChanged("zip");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SIM", Namespace="http://schemas.datacontract.org/2004/07/ENKService")]
    [System.SerializableAttribute()]
    public partial class SIM : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int BranchIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ClientIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int DistributorIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string InvoiceNoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long MSISDN_SIM_IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Data.DataTable MobileDTField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int NewClientIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime PurchaseDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PurchaseNoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Data.DataTable SIMDtField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SIMNoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TariffIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TransferTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int UserIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int VendorIDField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int BranchID {
            get {
                return this.BranchIDField;
            }
            set {
                if ((this.BranchIDField.Equals(value) != true)) {
                    this.BranchIDField = value;
                    this.RaisePropertyChanged("BranchID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ClientID {
            get {
                return this.ClientIDField;
            }
            set {
                if ((this.ClientIDField.Equals(value) != true)) {
                    this.ClientIDField = value;
                    this.RaisePropertyChanged("ClientID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int DistributorID {
            get {
                return this.DistributorIDField;
            }
            set {
                if ((this.DistributorIDField.Equals(value) != true)) {
                    this.DistributorIDField = value;
                    this.RaisePropertyChanged("DistributorID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string InvoiceNo {
            get {
                return this.InvoiceNoField;
            }
            set {
                if ((object.ReferenceEquals(this.InvoiceNoField, value) != true)) {
                    this.InvoiceNoField = value;
                    this.RaisePropertyChanged("InvoiceNo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long MSISDN_SIM_ID {
            get {
                return this.MSISDN_SIM_IDField;
            }
            set {
                if ((this.MSISDN_SIM_IDField.Equals(value) != true)) {
                    this.MSISDN_SIM_IDField = value;
                    this.RaisePropertyChanged("MSISDN_SIM_ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Data.DataTable MobileDT {
            get {
                return this.MobileDTField;
            }
            set {
                if ((object.ReferenceEquals(this.MobileDTField, value) != true)) {
                    this.MobileDTField = value;
                    this.RaisePropertyChanged("MobileDT");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int NewClientID {
            get {
                return this.NewClientIDField;
            }
            set {
                if ((this.NewClientIDField.Equals(value) != true)) {
                    this.NewClientIDField = value;
                    this.RaisePropertyChanged("NewClientID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime PurchaseDate {
            get {
                return this.PurchaseDateField;
            }
            set {
                if ((this.PurchaseDateField.Equals(value) != true)) {
                    this.PurchaseDateField = value;
                    this.RaisePropertyChanged("PurchaseDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PurchaseNo {
            get {
                return this.PurchaseNoField;
            }
            set {
                if ((object.ReferenceEquals(this.PurchaseNoField, value) != true)) {
                    this.PurchaseNoField = value;
                    this.RaisePropertyChanged("PurchaseNo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Data.DataTable SIMDt {
            get {
                return this.SIMDtField;
            }
            set {
                if ((object.ReferenceEquals(this.SIMDtField, value) != true)) {
                    this.SIMDtField = value;
                    this.RaisePropertyChanged("SIMDt");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SIMNo {
            get {
                return this.SIMNoField;
            }
            set {
                if ((object.ReferenceEquals(this.SIMNoField, value) != true)) {
                    this.SIMNoField = value;
                    this.RaisePropertyChanged("SIMNo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TariffID {
            get {
                return this.TariffIDField;
            }
            set {
                if ((this.TariffIDField.Equals(value) != true)) {
                    this.TariffIDField = value;
                    this.RaisePropertyChanged("TariffID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TransferType {
            get {
                return this.TransferTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.TransferTypeField, value) != true)) {
                    this.TransferTypeField = value;
                    this.RaisePropertyChanged("TransferType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int UserID {
            get {
                return this.UserIDField;
            }
            set {
                if ((this.UserIDField.Equals(value) != true)) {
                    this.UserIDField = value;
                    this.RaisePropertyChanged("UserID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int VendorID {
            get {
                return this.VendorIDField;
            }
            set {
                if ((this.VendorIDField.Equals(value) != true)) {
                    this.VendorIDField = value;
                    this.RaisePropertyChanged("VendorID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Actions", Namespace="http://schemas.datacontract.org/2004/07/ENKService")]
    public enum Actions : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        INSERT = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        UPDATE = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DELETE = 2,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SUsers", Namespace="http://schemas.datacontract.org/2004/07/ENKService")]
    [System.SerializableAttribute()]
    public partial class SUsers : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> activeFromField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> activeToField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string contactNoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int distributorIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string emailIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string firstNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool isActiveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string lastNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string pwdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int roleIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int userIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string userNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string userTypeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> activeFrom {
            get {
                return this.activeFromField;
            }
            set {
                if ((this.activeFromField.Equals(value) != true)) {
                    this.activeFromField = value;
                    this.RaisePropertyChanged("activeFrom");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> activeTo {
            get {
                return this.activeToField;
            }
            set {
                if ((this.activeToField.Equals(value) != true)) {
                    this.activeToField = value;
                    this.RaisePropertyChanged("activeTo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string contactNo {
            get {
                return this.contactNoField;
            }
            set {
                if ((object.ReferenceEquals(this.contactNoField, value) != true)) {
                    this.contactNoField = value;
                    this.RaisePropertyChanged("contactNo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int distributorID {
            get {
                return this.distributorIDField;
            }
            set {
                if ((this.distributorIDField.Equals(value) != true)) {
                    this.distributorIDField = value;
                    this.RaisePropertyChanged("distributorID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string emailID {
            get {
                return this.emailIDField;
            }
            set {
                if ((object.ReferenceEquals(this.emailIDField, value) != true)) {
                    this.emailIDField = value;
                    this.RaisePropertyChanged("emailID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string firstName {
            get {
                return this.firstNameField;
            }
            set {
                if ((object.ReferenceEquals(this.firstNameField, value) != true)) {
                    this.firstNameField = value;
                    this.RaisePropertyChanged("firstName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool isActive {
            get {
                return this.isActiveField;
            }
            set {
                if ((this.isActiveField.Equals(value) != true)) {
                    this.isActiveField = value;
                    this.RaisePropertyChanged("isActive");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string lastName {
            get {
                return this.lastNameField;
            }
            set {
                if ((object.ReferenceEquals(this.lastNameField, value) != true)) {
                    this.lastNameField = value;
                    this.RaisePropertyChanged("lastName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string pwd {
            get {
                return this.pwdField;
            }
            set {
                if ((object.ReferenceEquals(this.pwdField, value) != true)) {
                    this.pwdField = value;
                    this.RaisePropertyChanged("pwd");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int roleID {
            get {
                return this.roleIDField;
            }
            set {
                if ((this.roleIDField.Equals(value) != true)) {
                    this.roleIDField = value;
                    this.RaisePropertyChanged("roleID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int userID {
            get {
                return this.userIDField;
            }
            set {
                if ((this.userIDField.Equals(value) != true)) {
                    this.userIDField = value;
                    this.RaisePropertyChanged("userID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string userName {
            get {
                return this.userNameField;
            }
            set {
                if ((object.ReferenceEquals(this.userNameField, value) != true)) {
                    this.userNameField = value;
                    this.RaisePropertyChanged("userName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string userType {
            get {
                return this.userTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.userTypeField, value) != true)) {
                    this.userTypeField = value;
                    this.RaisePropertyChanged("userType");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SLoginHistory", Namespace="http://schemas.datacontract.org/2004/07/ENKService")]
    [System.SerializableAttribute()]
    public partial class SLoginHistory : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string Browser1Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string BrowserNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IpAddress1Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IpAddress2Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IpAddress3Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IpDetailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LocationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int LoginIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> LoginTimeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Browser1 {
            get {
                return this.Browser1Field;
            }
            set {
                if ((object.ReferenceEquals(this.Browser1Field, value) != true)) {
                    this.Browser1Field = value;
                    this.RaisePropertyChanged("Browser1");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string BrowserName {
            get {
                return this.BrowserNameField;
            }
            set {
                if ((object.ReferenceEquals(this.BrowserNameField, value) != true)) {
                    this.BrowserNameField = value;
                    this.RaisePropertyChanged("BrowserName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string IpAddress1 {
            get {
                return this.IpAddress1Field;
            }
            set {
                if ((object.ReferenceEquals(this.IpAddress1Field, value) != true)) {
                    this.IpAddress1Field = value;
                    this.RaisePropertyChanged("IpAddress1");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string IpAddress2 {
            get {
                return this.IpAddress2Field;
            }
            set {
                if ((object.ReferenceEquals(this.IpAddress2Field, value) != true)) {
                    this.IpAddress2Field = value;
                    this.RaisePropertyChanged("IpAddress2");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string IpAddress3 {
            get {
                return this.IpAddress3Field;
            }
            set {
                if ((object.ReferenceEquals(this.IpAddress3Field, value) != true)) {
                    this.IpAddress3Field = value;
                    this.RaisePropertyChanged("IpAddress3");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string IpDetail {
            get {
                return this.IpDetailField;
            }
            set {
                if ((object.ReferenceEquals(this.IpDetailField, value) != true)) {
                    this.IpDetailField = value;
                    this.RaisePropertyChanged("IpDetail");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Location {
            get {
                return this.LocationField;
            }
            set {
                if ((object.ReferenceEquals(this.LocationField, value) != true)) {
                    this.LocationField = value;
                    this.RaisePropertyChanged("Location");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int LoginID {
            get {
                return this.LoginIDField;
            }
            set {
                if ((this.LoginIDField.Equals(value) != true)) {
                    this.LoginIDField = value;
                    this.RaisePropertyChanged("LoginID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> LoginTime {
            get {
                return this.LoginTimeField;
            }
            set {
                if ((this.LoginTimeField.Equals(value) != true)) {
                    this.LoginTimeField = value;
                    this.RaisePropertyChanged("LoginTime");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IService1")]
    public interface IService1 {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetReportInventoryPurchase", ReplyAction="http://tempuri.org/IService1/GetReportInventoryPurchaseResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ENK.ServiceReference1.ServiceData), Action="http://tempuri.org/IService1/GetReportInventoryPurchaseServiceDataFault", Name="ServiceData", Namespace="http://schemas.datacontract.org/2004/07/ENKService")]
        System.Data.DataSet GetReportInventoryPurchase(int ClientID, int ClientTypeID, int LoginID, System.DateTime FromDate, System.DateTime ToDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetReportInventoryPurchase", ReplyAction="http://tempuri.org/IService1/GetReportInventoryPurchaseResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetReportInventoryPurchaseAsync(int ClientID, int ClientTypeID, int LoginID, System.DateTime FromDate, System.DateTime ToDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SaveIpMapping", ReplyAction="http://tempuri.org/IService1/SaveIpMappingResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ENK.ServiceReference1.ServiceData), Action="http://tempuri.org/IService1/SaveIpMappingServiceDataFault", Name="ServiceData", Namespace="http://schemas.datacontract.org/2004/07/ENKService")]
        int SaveIpMapping(long DistributorID, string _IP, int chkRistrictIP);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SaveIpMapping", ReplyAction="http://tempuri.org/IService1/SaveIpMappingResponse")]
        System.Threading.Tasks.Task<int> SaveIpMappingAsync(long DistributorID, string _IP, int chkRistrictIP);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteMappingID", ReplyAction="http://tempuri.org/IService1/DeleteMappingIDResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ENK.ServiceReference1.ServiceData), Action="http://tempuri.org/IService1/DeleteMappingIDServiceDataFault", Name="ServiceData", Namespace="http://schemas.datacontract.org/2004/07/ENKService")]
        int DeleteMappingID(int ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteMappingID", ReplyAction="http://tempuri.org/IService1/DeleteMappingIDResponse")]
        System.Threading.Tasks.Task<int> DeleteMappingIDAsync(int ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetRolewiseScreen", ReplyAction="http://tempuri.org/IService1/GetRolewiseScreenResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ENK.ServiceReference1.ServiceData), Action="http://tempuri.org/IService1/GetRolewiseScreenServiceDataFault", Name="ServiceData", Namespace="http://schemas.datacontract.org/2004/07/ENKService")]
        System.Data.DataTable GetRolewiseScreen(int LoginID, int RoleID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetRolewiseScreen", ReplyAction="http://tempuri.org/IService1/GetRolewiseScreenResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetRolewiseScreenAsync(int LoginID, int RoleID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/PerticularAPIDOWN", ReplyAction="http://tempuri.org/IService1/PerticularAPIDOWNResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ENK.ServiceReference1.ServiceData), Action="http://tempuri.org/IService1/PerticularAPIDOWNServiceDataFault", Name="ServiceData", Namespace="http://schemas.datacontract.org/2004/07/ENKService")]
        System.Data.DataTable PerticularAPIDOWN(string APINAME);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/PerticularAPIDOWN", ReplyAction="http://tempuri.org/IService1/PerticularAPIDOWNResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> PerticularAPIDOWNAsync(string APINAME);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SaveITRFile", ReplyAction="http://tempuri.org/IService1/SaveITRFileResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ENK.ServiceReference1.ServiceData), Action="http://tempuri.org/IService1/SaveITRFileServiceDataFault", Name="ServiceData", Namespace="http://schemas.datacontract.org/2004/07/ENKService")]
        int SaveITRFile(System.Data.DataTable objitr, string filename);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SaveITRFile", ReplyAction="http://tempuri.org/IService1/SaveITRFileResponse")]
        System.Threading.Tasks.Task<int> SaveITRFileAsync(System.Data.DataTable objitr, string filename);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ProcessingManualCommission", ReplyAction="http://tempuri.org/IService1/ProcessingManualCommissionResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ENK.ServiceReference1.ServiceData), Action="http://tempuri.org/IService1/ProcessingManualCommissionServiceDataFault", Name="ServiceData", Namespace="http://schemas.datacontract.org/2004/07/ENKService")]
        int ProcessingManualCommission(string stepNo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ProcessingManualCommission", ReplyAction="http://tempuri.org/IService1/ProcessingManualCommissionResponse")]
        System.Threading.Tasks.Task<int> ProcessingManualCommissionAsync(string stepNo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetCountryByAreaCode", ReplyAction="http://tempuri.org/IService1/GetCountryByAreaCodeResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ENK.ServiceReference1.ServiceData), Action="http://tempuri.org/IService1/GetCountryByAreaCodeServiceDataFault", Name="ServiceData", Namespace="http://schemas.datacontract.org/2004/07/ENKService")]
        System.Data.DataSet GetCountryByAreaCode(int _AreaCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetCountryByAreaCode", ReplyAction="http://tempuri.org/IService1/GetCountryByAreaCodeResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetCountryByAreaCodeAsync(int _AreaCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetH2OStatesList", ReplyAction="http://tempuri.org/IService1/GetH2OStatesListResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ENK.ServiceReference1.ServiceData), Action="http://tempuri.org/IService1/GetH2OStatesListServiceDataFault", Name="ServiceData", Namespace="http://schemas.datacontract.org/2004/07/ENKService")]
        System.Data.DataSet GetH2OStatesList();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetH2OStatesList", ReplyAction="http://tempuri.org/IService1/GetH2OStatesListResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetH2OStatesListAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetH2OServiceProviderList", ReplyAction="http://tempuri.org/IService1/GetH2OServiceProviderListResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ENK.ServiceReference1.ServiceData), Action="http://tempuri.org/IService1/GetH2OServiceProviderListServiceDataFault", Name="ServiceData", Namespace="http://schemas.datacontract.org/2004/07/ENKService")]
        System.Data.DataSet GetH2OServiceProviderList();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetH2OServiceProviderList", ReplyAction="http://tempuri.org/IService1/GetH2OServiceProviderListResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetH2OServiceProviderListAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/CheckTariffGroupExist", ReplyAction="http://tempuri.org/IService1/CheckTariffGroupExistResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ENK.ServiceReference1.ServiceData), Action="http://tempuri.org/IService1/CheckTariffGroupExistServiceDataFault", Name="ServiceData", Namespace="http://schemas.datacontract.org/2004/07/ENKService")]
        System.Data.DataSet CheckTariffGroupExist(string GroupName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/CheckTariffGroupExist", ReplyAction="http://tempuri.org/IService1/CheckTariffGroupExistResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> CheckTariffGroupExistAsync(string GroupName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ShowDashBoardDataService", ReplyAction="http://tempuri.org/IService1/ShowDashBoardDataServiceResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ENK.ServiceReference1.ServiceData), Action="http://tempuri.org/IService1/ShowDashBoardDataServiceServiceDataFault", Name="ServiceData", Namespace="http://schemas.datacontract.org/2004/07/ENKService")]
        System.Data.DataSet ShowDashBoardDataService(int DistributorID, int ClientTypeID, int NetworkID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ShowDashBoardDataService", ReplyAction="http://tempuri.org/IService1/ShowDashBoardDataServiceResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> ShowDashBoardDataServiceAsync(int DistributorID, int ClientTypeID, int NetworkID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/CheckSimActivationService", ReplyAction="http://tempuri.org/IService1/CheckSimActivationServiceResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ENK.ServiceReference1.ServiceData), Action="http://tempuri.org/IService1/CheckSimActivationServiceServiceDataFault", Name="ServiceData", Namespace="http://schemas.datacontract.org/2004/07/ENKService")]
        System.Data.DataSet CheckSimActivationService(int DistributorID, int ClientTypeID, string SimNumber, string Action);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/CheckSimActivationService", ReplyAction="http://tempuri.org/IService1/CheckSimActivationServiceResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> CheckSimActivationServiceAsync(int DistributorID, int ClientTypeID, string SimNumber, string Action);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/CheckSimPortINService", ReplyAction="http://tempuri.org/IService1/CheckSimPortINServiceResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ENK.ServiceReference1.ServiceData), Action="http://tempuri.org/IService1/CheckSimPortINServiceServiceDataFault", Name="ServiceData", Namespace="http://schemas.datacontract.org/2004/07/ENKService")]
        System.Data.DataSet CheckSimPortINService(int DistributorID, int ClientTypeID, string SimNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/CheckSimPortINService", ReplyAction="http://tempuri.org/IService1/CheckSimPortINServiceResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> CheckSimPortINServiceAsync(int DistributorID, int ClientTypeID, string SimNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetTariffSpiffDetails", ReplyAction="http://tempuri.org/IService1/GetTariffSpiffDetailsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ENK.ServiceReference1.ServiceData), Action="http://tempuri.org/IService1/GetTariffSpiffDetailsServiceDataFault", Name="ServiceData", Namespace="http://schemas.datacontract.org/2004/07/ENKService")]
        System.Data.DataSet GetTariffSpiffDetails(string mode, int Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetTariffSpiffDetails", ReplyAction="http://tempuri.org/IService1/GetTariffSpiffDetailsResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetTariffSpiffDetailsAsync(string mode, int Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ShowDashBoardActivationDataService", ReplyAction="http://tempuri.org/IService1/ShowDashBoardActivationDataServiceResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ENK.ServiceReference1.ServiceData), Action="http://tempuri.org/IService1/ShowDashBoardActivationDataServiceServiceDataFault", Name="ServiceData", Namespace="http://schemas.datacontract.org/2004/07/ENKService")]
        System.Data.DataSet ShowDashBoardActivationDataService(int DistributorID, int ClientTypeID, int loginID, string Action, int month, int year, string FromDate, string ToDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ShowDashBoardActivationDataService", ReplyAction="http://tempuri.org/IService1/ShowDashBoardActivationDataServiceResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> ShowDashBoardActivationDataServiceAsync(int DistributorID, int ClientTypeID, int loginID, string Action, int month, int year, string FromDate, string ToDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SavePOSService", ReplyAction="http://tempuri.org/IService1/SavePOSServiceResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ENK.ServiceReference1.ServiceData), Action="http://tempuri.org/IService1/SavePOSServiceServiceDataFault", Name="ServiceData", Namespace="http://schemas.datacontract.org/2004/07/ENKService")]
        int SavePOSService(int DistributorID, int LoginID, ENK.ServiceReference1.SPOS sp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SavePOSService", ReplyAction="http://tempuri.org/IService1/SavePOSServiceResponse")]
        System.Threading.Tasks.Task<int> SavePOSServiceAsync(int DistributorID, int LoginID, ENK.ServiceReference1.SPOS sp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ShowPOSService", ReplyAction="http://tempuri.org/IService1/ShowPOSServiceResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ENK.ServiceReference1.ServiceData), Action="http://tempuri.org/IService1/ShowPOSServiceServiceDataFault", Name="ServiceData", Namespace="http://schemas.datacontract.org/2004/07/ENKService")]
        System.Data.DataSet ShowPOSService(int DistributorID, int ClientTypeID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ShowPOSService", ReplyAction="http://tempuri.org/IService1/ShowPOSServiceResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> ShowPOSServiceAsync(int DistributorID, int ClientTypeID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/InsertVendorService", ReplyAction="http://tempuri.org/IService1/InsertVendorServiceResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ENK.ServiceReference1.ServiceData), Action="http://tempuri.org/IService1/InsertVendorServiceServiceDataFault", Name="ServiceData", Namespace="http://schemas.datacontract.org/2004/07/ENKService")]
        int InsertVendorService(int DistributorID, int LoginID, int ClientTypeID, ENK.ServiceReference1.SVendor svn);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/InsertVendorService", ReplyAction="http://tempuri.org/IService1/InsertVendorServiceResponse")]
        System.Threading.Tasks.Task<int> InsertVendorServiceAsync(int DistributorID, int LoginID, int ClientTypeID, ENK.ServiceReference1.SVendor svn);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/InsertCurrencyService", ReplyAction="http://tempuri.org/IService1/InsertCurrencyServiceResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ENK.ServiceReference1.ServiceData), Action="http://tempuri.org/IService1/InsertCurrencyServiceServiceDataFault", Name="ServiceData", Namespace="http://schemas.datacontract.org/2004/07/ENKService")]
        int InsertCurrencyService(string Name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/InsertCurrencyService", ReplyAction="http://tempuri.org/IService1/InsertCurrencyServiceResponse")]
        System.Threading.Tasks.Task<int> InsertCurrencyServiceAsync(string Name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetCurrencyService", ReplyAction="http://tempuri.org/IService1/GetCurrencyServiceResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ENK.ServiceReference1.ServiceData), Action="http://tempuri.org/IService1/GetCurrencyServiceServiceDataFault", Name="ServiceData", Namespace="http://schemas.datacontract.org/2004/07/ENKService")]
        System.Data.DataSet GetCurrencyService(int DistributorID, int ClientTypeID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetCurrencyService", ReplyAction="http://tempuri.org/IService1/GetCurrencyServiceResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetCurrencyServiceAsync(int DistributorID, int ClientTypeID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/VerifyUserIDService", ReplyAction="http://tempuri.org/IService1/VerifyUserIDServiceResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ENK.ServiceReference1.ServiceData), Action="http://tempuri.org/IService1/VerifyUserIDServiceServiceDataFault", Name="ServiceData", Namespace="http://schemas.datacontract.org/2004/07/ENKService")]
        System.Data.DataSet VerifyUserIDService(int DistributorID, int ClientTypeID, int LoginID, string UserID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/VerifyUserIDService", ReplyAction="http://tempuri.org/IService1/VerifyUserIDServiceResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> VerifyUserIDServiceAsync(int DistributorID, int ClientTypeID, int LoginID, string UserID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ForgetPasswordService", ReplyAction="http://tempuri.org/IService1/ForgetPasswordServiceResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ENK.ServiceReference1.ServiceData), Action="http://tempuri.org/IService1/ForgetPasswordServiceServiceDataFault", Name="ServiceData", Namespace="http://schemas.datacontract.org/2004/07/ENKService")]
        System.Data.DataSet ForgetPasswordService(string UserID, string Mobile);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ForgetPasswordService", ReplyAction="http://tempuri.org/IService1/ForgetPasswordServiceResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> ForgetPasswordServiceAsync(string UserID, string Mobile);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ResetPasswordService", ReplyAction="http://tempuri.org/IService1/ResetPasswordServiceResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ENK.ServiceReference1.ServiceData), Action="http://tempuri.org/IService1/ResetPasswordServiceServiceDataFault", Name="ServiceData", Namespace="http://schemas.datacontract.org/2004/07/ENKService")]
        System.Data.DataSet ResetPasswordService(string UserID, string OldPass, string NewPass, int DistributorID, int LoginID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ResetPasswordService", ReplyAction="http://tempuri.org/IService1/ResetPasswordServiceResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> ResetPasswordServiceAsync(string UserID, string OldPass, string NewPass, int DistributorID, int LoginID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetVendorListService", ReplyAction="http://tempuri.org/IService1/GetVendorListServiceResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ENK.ServiceReference1.ServiceData), Action="http://tempuri.org/IService1/GetVendorListServiceServiceDataFault", Name="ServiceData", Namespace="http://schemas.datacontract.org/2004/07/ENKService")]
        System.Data.DataSet GetVendorListService();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetVendorListService", ReplyAction="http://tempuri.org/IService1/GetVendorListServiceResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetVendorListServiceAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetSingleTariffDetailForActivationService", ReplyAction="http://tempuri.org/IService1/GetSingleTariffDetailForActivationServiceResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ENK.ServiceReference1.ServiceData), Action="http://tempuri.org/IService1/GetSingleTariffDetailForActivationServiceServiceData" +
            "Fault", Name="ServiceData", Namespace="http://schemas.datacontract.org/2004/07/ENKService")]
        System.Data.DataSet GetSingleTariffDetailForActivationService(int LoginID, int DistributorID, int ClientTypeID, int TariffID, int Month, string Action);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetSingleTariffDetailForActivationService", ReplyAction="http://tempuri.org/IService1/GetSingleTariffDetailForActivationServiceResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetSingleTariffDetailForActivationServiceAsync(int LoginID, int DistributorID, int ClientTypeID, int TariffID, int Month, string Action);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetSingleVendorService", ReplyAction="http://tempuri.org/IService1/GetSingleVendorServiceResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ENK.ServiceReference1.ServiceData), Action="http://tempuri.org/IService1/GetSingleVendorServiceServiceDataFault", Name="ServiceData", Namespace="http://schemas.datacontract.org/2004/07/ENKService")]
        System.Data.DataSet GetSingleVendorService(ENK.ServiceReference1.SVendor sVen);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetSingleVendorService", ReplyAction="http://tempuri.org/IService1/GetSingleVendorServiceResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetSingleVendorServiceAsync(ENK.ServiceReference1.SVendor sVen);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateVendorService", ReplyAction="http://tempuri.org/IService1/UpdateVendorServiceResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ENK.ServiceReference1.ServiceData), Action="http://tempuri.org/IService1/UpdateVendorServiceServiceDataFault", Name="ServiceData", Namespace="http://schemas.datacontract.org/2004/07/ENKService")]
        int UpdateVendorService(int DistributorID, int LoginID, int ClientTypeID, ENK.ServiceReference1.SVendor svn);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateVendorService", ReplyAction="http://tempuri.org/IService1/UpdateVendorServiceResponse")]
        System.Threading.Tasks.Task<int> UpdateVendorServiceAsync(int DistributorID, int LoginID, int ClientTypeID, ENK.ServiceReference1.SVendor svn);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetTransactionIDService", ReplyAction="http://tempuri.org/IService1/GetTransactionIDServiceResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ENK.ServiceReference1.ServiceData), Action="http://tempuri.org/IService1/GetTransactionIDServiceServiceDataFault", Name="ServiceData", Namespace="http://schemas.datacontract.org/2004/07/ENKService")]
        System.Data.DataTable GetTransactionIDService();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetTransactionIDService", ReplyAction="http://tempuri.org/IService1/GetTransactionIDServiceResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetTransactionIDServiceAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/InsertPaypalTopupService", ReplyAction="http://tempuri.org/IService1/InsertPaypalTopupServiceResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ENK.ServiceReference1.ServiceData), Action="http://tempuri.org/IService1/InsertPaypalTopupServiceServiceDataFault", Name="ServiceData", Namespace="http://schemas.datacontract.org/2004/07/ENKService")]
        System.Data.DataSet InsertPaypalTopupService(int distributorID, int LoginID, ENK.ServiceReference1.SPayment sp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/InsertPaypalTopupService", ReplyAction="http://tempuri.org/IService1/InsertPaypalTopupServiceResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> InsertPaypalTopupServiceAsync(int distributorID, int LoginID, ENK.ServiceReference1.SPayment sp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdatePaypalTopupService", ReplyAction="http://tempuri.org/IService1/UpdatePaypalTopupServiceResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ENK.ServiceReference1.ServiceData), Action="http://tempuri.org/IService1/UpdatePaypalTopupServiceServiceDataFault", Name="ServiceData", Namespace="http://schemas.datacontract.org/2004/07/ENKService")]
        int UpdatePaypalTopupService(int distributorID, int LoginID, ENK.ServiceReference1.SPayment sp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdatePaypalTopupService", ReplyAction="http://tempuri.org/IService1/UpdatePaypalTopupServiceResponse")]
        System.Threading.Tasks.Task<int> UpdatePaypalTopupServiceAsync(int distributorID, int LoginID, ENK.ServiceReference1.SPayment sp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetTestDataService", ReplyAction="http://tempuri.org/IService1/GetTestDataServiceResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ENK.ServiceReference1.ServiceData), Action="http://tempuri.org/IService1/GetTestDataServiceServiceDataFault", Name="ServiceData", Namespace="http://schemas.datacontract.org/2004/07/ENKService")]
        System.Data.DataSet GetTestDataService();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetTestDataService", ReplyAction="http://tempuri.org/IService1/GetTestDataServiceResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetTestDataServiceAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdatePaypalActivationService", ReplyAction="http://tempuri.org/IService1/UpdatePaypalActivationServiceResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ENK.ServiceReference1.ServiceData), Action="http://tempuri.org/IService1/UpdatePaypalActivationServiceServiceDataFault", Name="ServiceData", Namespace="http://schemas.datacontract.org/2004/07/ENKService")]
        int UpdatePaypalActivationService(int distributorID, int LoginID, ENK.ServiceReference1.SPayment sp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdatePaypalActivationService", ReplyAction="http://tempuri.org/IService1/UpdatePaypalActivationServiceResponse")]
        System.Threading.Tasks.Task<int> UpdatePaypalActivationServiceAsync(int distributorID, int LoginID, ENK.ServiceReference1.SPayment sp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdatePaypalAccountBalanceService", ReplyAction="http://tempuri.org/IService1/UpdatePaypalAccountBalanceServiceResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ENK.ServiceReference1.ServiceData), Action="http://tempuri.org/IService1/UpdatePaypalAccountBalanceServiceServiceDataFault", Name="ServiceData", Namespace="http://schemas.datacontract.org/2004/07/ENKService")]
        int UpdatePaypalAccountBalanceService(int distributorID, int LoginID, string sim, string zipcode, string channel, string lang, ENK.ServiceReference1.SPayment sp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdatePaypalAccountBalanceService", ReplyAction="http://tempuri.org/IService1/UpdatePaypalAccountBalanceServiceResponse")]
        System.Threading.Tasks.Task<int> UpdatePaypalAccountBalanceServiceAsync(int distributorID, int LoginID, string sim, string zipcode, string channel, string lang, ENK.ServiceReference1.SPayment sp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetTopupPaymentDetailsService", ReplyAction="http://tempuri.org/IService1/GetTopupPaymentDetailsServiceResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ENK.ServiceReference1.ServiceData), Action="http://tempuri.org/IService1/GetTopupPaymentDetailsServiceServiceDataFault", Name="ServiceData", Namespace="http://schemas.datacontract.org/2004/07/ENKService")]
        System.Data.DataSet GetTopupPaymentDetailsService(int distributorID, int LoginID, int ClientTypeID, string FromDate, string ToDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetTopupPaymentDetailsService", ReplyAction="http://tempuri.org/IService1/GetTopupPaymentDetailsServiceResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetTopupPaymentDetailsServiceAsync(int distributorID, int LoginID, int ClientTypeID, string FromDate, string ToDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeactivateDistirbutorService", ReplyAction="http://tempuri.org/IService1/DeactivateDistirbutorServiceResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ENK.ServiceReference1.ServiceData), Action="http://tempuri.org/IService1/DeactivateDistirbutorServiceServiceDataFault", Name="ServiceData", Namespace="http://schemas.datacontract.org/2004/07/ENKService")]
        System.Data.DataSet DeactivateDistirbutorService(int DistributorId, int LoginId, string Condition);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeactivateDistirbutorService", ReplyAction="http://tempuri.org/IService1/DeactivateDistirbutorServiceResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> DeactivateDistirbutorServiceAsync(int DistributorId, int LoginId, string Condition);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetSearch", ReplyAction="http://tempuri.org/IService1/GetSearchResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ENK.ServiceReference1.ServiceData), Action="http://tempuri.org/IService1/GetSearchServiceDataFault", Name="ServiceData", Namespace="http://schemas.datacontract.org/2004/07/ENKService")]
        System.Data.DataSet GetSearch(string SerachFor, string SearchText, int ClientID, int ClientTypeID, string EmailID, string DateType, System.DateTime FromDate, System.DateTime ToDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetSearch", ReplyAction="http://tempuri.org/IService1/GetSearchResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetSearchAsync(string SerachFor, string SearchText, int ClientID, int ClientTypeID, string EmailID, string DateType, System.DateTime FromDate, System.DateTime ToDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ChangeStatusForTopUp", ReplyAction="http://tempuri.org/IService1/ChangeStatusForTopUpResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ENK.ServiceReference1.ServiceData), Action="http://tempuri.org/IService1/ChangeStatusForTopUpServiceDataFault", Name="ServiceData", Namespace="http://schemas.datacontract.org/2004/07/ENKService")]
        int ChangeStatusForTopUp(int distributorID, int LoginID, int ClientTypeID, long PaymentID, int StatusManual, string SRemark);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ChangeStatusForTopUp", ReplyAction="http://tempuri.org/IService1/ChangeStatusForTopUpResponse")]
        System.Threading.Tasks.Task<int> ChangeStatusForTopUpAsync(int distributorID, int LoginID, int ClientTypeID, long PaymentID, int StatusManual, string SRemark);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetDistributorofMappingwithPlan", ReplyAction="http://tempuri.org/IService1/GetDistributorofMappingwithPlanResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ENK.ServiceReference1.ServiceData), Action="http://tempuri.org/IService1/GetDistributorofMappingwithPlanServiceDataFault", Name="ServiceData", Namespace="http://schemas.datacontract.org/2004/07/ENKService")]
        System.Data.DataSet GetDistributorofMappingwithPlan(int TariffID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetDistributorofMappingwithPlan", ReplyAction="http://tempuri.org/IService1/GetDistributorofMappingwithPlanResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetDistributorofMappingwithPlanAsync(int TariffID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SaveDistributorofMappingwithPlan", ReplyAction="http://tempuri.org/IService1/SaveDistributorofMappingwithPlanResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ENK.ServiceReference1.ServiceData), Action="http://tempuri.org/IService1/SaveDistributorofMappingwithPlanServiceDataFault", Name="ServiceData", Namespace="http://schemas.datacontract.org/2004/07/ENKService")]
        int SaveDistributorofMappingwithPlan(decimal Rental, System.Data.DataTable dt, int TariffID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SaveDistributorofMappingwithPlan", ReplyAction="http://tempuri.org/IService1/SaveDistributorofMappingwithPlanResponse")]
        System.Threading.Tasks.Task<int> SaveDistributorofMappingwithPlanAsync(decimal Rental, System.Data.DataTable dt, int TariffID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetImportFileDetailsService", ReplyAction="http://tempuri.org/IService1/GetImportFileDetailsServiceResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ENK.ServiceReference1.ServiceData), Action="http://tempuri.org/IService1/GetImportFileDetailsServiceServiceDataFault", Name="ServiceData", Namespace="http://schemas.datacontract.org/2004/07/ENKService")]
        System.Data.DataSet GetImportFileDetailsService(System.Data.DataTable dt, string Action);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetImportFileDetailsService", ReplyAction="http://tempuri.org/IService1/GetImportFileDetailsServiceResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetImportFileDetailsServiceAsync(System.Data.DataTable dt, string Action);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetReportTopup", ReplyAction="http://tempuri.org/IService1/GetReportTopupResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ENK.ServiceReference1.ServiceData), Action="http://tempuri.org/IService1/GetReportTopupServiceDataFault", Name="ServiceData", Namespace="http://schemas.datacontract.org/2004/07/ENKService")]
        System.Data.DataSet GetReportTopup(int ClientID, int ClientTypeID, int LoginID, System.DateTime FromDate, System.DateTime ToDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetReportTopup", ReplyAction="http://tempuri.org/IService1/GetReportTopupResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetReportTopupAsync(int ClientID, int ClientTypeID, int LoginID, System.DateTime FromDate, System.DateTime ToDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetReportTopupLedger", ReplyAction="http://tempuri.org/IService1/GetReportTopupLedgerResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ENK.ServiceReference1.ServiceData), Action="http://tempuri.org/IService1/GetReportTopupLedgerServiceDataFault", Name="ServiceData", Namespace="http://schemas.datacontract.org/2004/07/ENKService")]
        System.Data.DataSet GetReportTopupLedger(int ClientID, int ClientTypeID, System.DateTime FromDate, System.DateTime ToDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetReportTopupLedger", ReplyAction="http://tempuri.org/IService1/GetReportTopupLedgerResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetReportTopupLedgerAsync(int ClientID, int ClientTypeID, System.DateTime FromDate, System.DateTime ToDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetLedgerReport", ReplyAction="http://tempuri.org/IService1/GetLedgerReportResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ENK.ServiceReference1.ServiceData), Action="http://tempuri.org/IService1/GetLedgerReportServiceDataFault", Name="ServiceData", Namespace="http://schemas.datacontract.org/2004/07/ENKService")]
        System.Data.DataSet GetLedgerReport(int ClientID, int ClientTypeID, System.DateTime FromDate, System.DateTime ToDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetLedgerReport", ReplyAction="http://tempuri.org/IService1/GetLedgerReportResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetLedgerReportAsync(int ClientID, int ClientTypeID, System.DateTime FromDate, System.DateTime ToDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SaveAndSendNotification", ReplyAction="http://tempuri.org/IService1/SaveAndSendNotificationResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ENK.ServiceReference1.ServiceData), Action="http://tempuri.org/IService1/SaveAndSendNotificationServiceDataFault", Name="ServiceData", Namespace="http://schemas.datacontract.org/2004/07/ENKService")]
        System.Data.DataSet SaveAndSendNotification(long LoginID, long DistributorID, System.Data.DataTable dt, string NotificationText, string Status, string Action, int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SaveAndSendNotification", ReplyAction="http://tempuri.org/IService1/SaveAndSendNotificationResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> SaveAndSendNotificationAsync(long LoginID, long DistributorID, System.Data.DataTable dt, string NotificationText, string Status, string Action, int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SaveProductMaster", ReplyAction="http://tempuri.org/IService1/SaveProductMasterResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ENK.ServiceReference1.ServiceData), Action="http://tempuri.org/IService1/SaveProductMasterServiceDataFault", Name="ServiceData", Namespace="http://schemas.datacontract.org/2004/07/ENKService")]
        System.Data.DataSet SaveProductMaster(int NetworkID, int ProductID, string ShortName, string ProductDescription, string Currency, string Amount, int CreatedBy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SaveProductMaster", ReplyAction="http://tempuri.org/IService1/SaveProductMasterResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> SaveProductMasterAsync(int NetworkID, int ProductID, string ShortName, string ProductDescription, string Currency, string Amount, int CreatedBy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SaveTransactionDetails", ReplyAction="http://tempuri.org/IService1/SaveTransactionDetailsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ENK.ServiceReference1.ServiceData), Action="http://tempuri.org/IService1/SaveTransactionDetailsServiceDataFault", Name="ServiceData", Namespace="http://schemas.datacontract.org/2004/07/ENKService")]
        System.Data.DataSet SaveTransactionDetails(int NetworkID, int ProductID, string TransactionType, string ProductPinID, string SIMNumber, string InvoiveNumber, string Amount, string Currency, string City, string Zip, string NPA, int CreatedBy, string ChargeAmount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SaveTransactionDetails", ReplyAction="http://tempuri.org/IService1/SaveTransactionDetailsResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> SaveTransactionDetailsAsync(int NetworkID, int ProductID, string TransactionType, string ProductPinID, string SIMNumber, string InvoiveNumber, string Amount, string Currency, string City, string Zip, string NPA, int CreatedBy, string ChargeAmount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetTariffGroupService", ReplyAction="http://tempuri.org/IService1/GetTariffGroupServiceResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ENK.ServiceReference1.ServiceData), Action="http://tempuri.org/IService1/GetTariffGroupServiceServiceDataFault", Name="ServiceData", Namespace="http://schemas.datacontract.org/2004/07/ENKService")]
        System.Data.DataSet GetTariffGroupService(int LoginID, int DistributorID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetTariffGroupService", ReplyAction="http://tempuri.org/IService1/GetTariffGroupServiceResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetTariffGroupServiceAsync(int LoginID, int DistributorID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetTariffGroupViewService", ReplyAction="http://tempuri.org/IService1/GetTariffGroupViewServiceResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ENK.ServiceReference1.ServiceData), Action="http://tempuri.org/IService1/GetTariffGroupViewServiceServiceDataFault", Name="ServiceData", Namespace="http://schemas.datacontract.org/2004/07/ENKService")]
        System.Data.DataSet GetTariffGroupViewService(int TariffID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetTariffGroupViewService", ReplyAction="http://tempuri.org/IService1/GetTariffGroupViewServiceResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetTariffGroupViewServiceAsync(int TariffID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddNewTariffService", ReplyAction="http://tempuri.org/IService1/AddNewTariffServiceResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ENK.ServiceReference1.ServiceData), Action="http://tempuri.org/IService1/AddNewTariffServiceServiceDataFault", Name="ServiceData", Namespace="http://schemas.datacontract.org/2004/07/ENKService")]
        int AddNewTariffService(ENK.ServiceReference1.STariff st, int LoginID, int DistributorID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddNewTariffService", ReplyAction="http://tempuri.org/IService1/AddNewTariffServiceResponse")]
        System.Threading.Tasks.Task<int> AddNewTariffServiceAsync(ENK.ServiceReference1.STariff st, int LoginID, int DistributorID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateTariffGroupService", ReplyAction="http://tempuri.org/IService1/UpdateTariffGroupServiceResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ENK.ServiceReference1.ServiceData), Action="http://tempuri.org/IService1/UpdateTariffGroupServiceServiceDataFault", Name="ServiceData", Namespace="http://schemas.datacontract.org/2004/07/ENKService")]
        int UpdateTariffGroupService(ENK.ServiceReference1.STariff st, int LoginID, int DistributorID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateTariffGroupService", ReplyAction="http://tempuri.org/IService1/UpdateTariffGroupServiceResponse")]
        System.Threading.Tasks.Task<int> UpdateTariffGroupServiceAsync(ENK.ServiceReference1.STariff st, int LoginID, int DistributorID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateAccountBalanceAfterCancelPortIn", ReplyAction="http://tempuri.org/IService1/UpdateAccountBalanceAfterCancelPortInResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ENK.ServiceReference1.ServiceData), Action="http://tempuri.org/IService1/UpdateAccountBalanceAfterCancelPortInServiceDataFaul" +
            "t", Name="ServiceData", Namespace="http://schemas.datacontract.org/2004/07/ENKService")]
        void UpdateAccountBalanceAfterCancelPortIn(string MNPRefNum, string POrtInCancelReq, string PortInCancelResp, int UserId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateAccountBalanceAfterCancelPortIn", ReplyAction="http://tempuri.org/IService1/UpdateAccountBalanceAfterCancelPortInResponse")]
        System.Threading.Tasks.Task UpdateAccountBalanceAfterCancelPortInAsync(string MNPRefNum, string POrtInCancelReq, string PortInCancelResp, int UserId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetPrintRecipt", ReplyAction="http://tempuri.org/IService1/GetPrintReciptResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ENK.ServiceReference1.ServiceData), Action="http://tempuri.org/IService1/GetPrintReciptServiceDataFault", Name="ServiceData", Namespace="http://schemas.datacontract.org/2004/07/ENKService")]
        System.Data.DataSet GetPrintRecipt(string tansactionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetPrintRecipt", ReplyAction="http://tempuri.org/IService1/GetPrintReciptResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetPrintReciptAsync(string tansactionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetMsimDetails", ReplyAction="http://tempuri.org/IService1/GetMsimDetailsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ENK.ServiceReference1.ServiceData), Action="http://tempuri.org/IService1/GetMsimDetailsServiceDataFault", Name="ServiceData", Namespace="http://schemas.datacontract.org/2004/07/ENKService")]
        System.Data.DataSet GetMsimDetails(string MSIM, string MNPNo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetMsimDetails", ReplyAction="http://tempuri.org/IService1/GetMsimDetailsResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetMsimDetailsAsync(string MSIM, string MNPNo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SaveModifiedPortinDetails", ReplyAction="http://tempuri.org/IService1/SaveModifiedPortinDetailsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ENK.ServiceReference1.ServiceData), Action="http://tempuri.org/IService1/SaveModifiedPortinDetailsServiceDataFault", Name="ServiceData", Namespace="http://schemas.datacontract.org/2004/07/ENKService")]
        void SaveModifiedPortinDetails(string Request, string APIResponse, System.DateTime RequestedTime, int Requestedby, string MSISDN);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SaveModifiedPortinDetails", ReplyAction="http://tempuri.org/IService1/SaveModifiedPortinDetailsResponse")]
        System.Threading.Tasks.Task SaveModifiedPortinDetailsAsync(string Request, string APIResponse, System.DateTime RequestedTime, int Requestedby, string MSISDN);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAddOnANDInternationCreadit", ReplyAction="http://tempuri.org/IService1/GetAddOnANDInternationCreaditResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ENK.ServiceReference1.ServiceData), Action="http://tempuri.org/IService1/GetAddOnANDInternationCreaditServiceDataFault", Name="ServiceData", Namespace="http://schemas.datacontract.org/2004/07/ENKService")]
        System.Data.DataSet GetAddOnANDInternationCreadit();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAddOnANDInternationCreadit", ReplyAction="http://tempuri.org/IService1/GetAddOnANDInternationCreaditResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetAddOnANDInternationCreaditAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetDiscountAndRental", ReplyAction="http://tempuri.org/IService1/GetDiscountAndRentalResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ENK.ServiceReference1.ServiceData), Action="http://tempuri.org/IService1/GetDiscountAndRentalServiceDataFault", Name="ServiceData", Namespace="http://schemas.datacontract.org/2004/07/ENKService")]
        System.Data.DataSet GetDiscountAndRental(int DistributorID, int tariffID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetDiscountAndRental", ReplyAction="http://tempuri.org/IService1/GetDiscountAndRentalResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetDiscountAndRentalAsync(int DistributorID, int tariffID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateAccountBalanceService", ReplyAction="http://tempuri.org/IService1/UpdateAccountBalanceServiceResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ENK.ServiceReference1.ServiceData), Action="http://tempuri.org/IService1/UpdateAccountBalanceServiceServiceDataFault", Name="ServiceData", Namespace="http://schemas.datacontract.org/2004/07/ENKService")]
        int UpdateAccountBalanceService(int distributorID, int LoginID, string sim, string zipcode, string channel, string lang, ENK.ServiceReference1.SPayment sp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateAccountBalanceService", ReplyAction="http://tempuri.org/IService1/UpdateAccountBalanceServiceResponse")]
        System.Threading.Tasks.Task<int> UpdateAccountBalanceServiceAsync(int distributorID, int LoginID, string sim, string zipcode, string channel, string lang, ENK.ServiceReference1.SPayment sp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/CHECKDistributor", ReplyAction="http://tempuri.org/IService1/CHECKDistributorResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ENK.ServiceReference1.ServiceData), Action="http://tempuri.org/IService1/CHECKDistributorServiceDataFault", Name="ServiceData", Namespace="http://schemas.datacontract.org/2004/07/ENKService")]
        System.Data.DataSet CHECKDistributor(string UserID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/CHECKDistributor", ReplyAction="http://tempuri.org/IService1/CHECKDistributorResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> CHECKDistributorAsync(string UserID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ValidatePreloadedSim", ReplyAction="http://tempuri.org/IService1/ValidatePreloadedSimResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ENK.ServiceReference1.ServiceData), Action="http://tempuri.org/IService1/ValidatePreloadedSimServiceDataFault", Name="ServiceData", Namespace="http://schemas.datacontract.org/2004/07/ENKService")]
        System.Data.DataSet ValidatePreloadedSim(string SimNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ValidatePreloadedSim", ReplyAction="http://tempuri.org/IService1/ValidatePreloadedSimResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> ValidatePreloadedSimAsync(string SimNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetTariffForActivation_ForSubscriber", ReplyAction="http://tempuri.org/IService1/GetTariffForActivation_ForSubscriberResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ENK.ServiceReference1.ServiceData), Action="http://tempuri.org/IService1/GetTariffForActivation_ForSubscriberServiceDataFault" +
            "", Name="ServiceData", Namespace="http://schemas.datacontract.org/2004/07/ENKService")]
        System.Data.DataSet GetTariffForActivation_ForSubscriber(string simnumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetTariffForActivation_ForSubscriber", ReplyAction="http://tempuri.org/IService1/GetTariffForActivation_ForSubscriberResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetTariffForActivation_ForSubscriberAsync(string simnumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetInventoryBulkTransfer1", ReplyAction="http://tempuri.org/IService1/GetInventoryBulkTransfer1Response")]
        [System.ServiceModel.FaultContractAttribute(typeof(ENK.ServiceReference1.ServiceData), Action="http://tempuri.org/IService1/GetInventoryBulkTransfer1ServiceDataFault", Name="ServiceData", Namespace="http://schemas.datacontract.org/2004/07/ENKService")]
        System.Data.DataSet GetInventoryBulkTransfer1(int ClientID, System.Data.DataTable SIMDt);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetInventoryBulkTransfer1", ReplyAction="http://tempuri.org/IService1/GetInventoryBulkTransfer1Response")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetInventoryBulkTransfer1Async(int ClientID, System.Data.DataTable SIMDt);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetDistributor1", ReplyAction="http://tempuri.org/IService1/GetDistributor1Response")]
        [System.ServiceModel.FaultContractAttribute(typeof(ENK.ServiceReference1.ServiceData), Action="http://tempuri.org/IService1/GetDistributor1ServiceDataFault", Name="ServiceData", Namespace="http://schemas.datacontract.org/2004/07/ENKService")]
        System.Data.DataSet GetDistributor1(int UserId, int Distrib);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetDistributor1", ReplyAction="http://tempuri.org/IService1/GetDistributor1Response")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetDistributor1Async(int UserId, int Distrib);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetActivationsWithoutMSISDN", ReplyAction="http://tempuri.org/IService1/GetActivationsWithoutMSISDNResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ENK.ServiceReference1.ServiceData), Action="http://tempuri.org/IService1/GetActivationsWithoutMSISDNServiceDataFault", Name="ServiceData", Namespace="http://schemas.datacontract.org/2004/07/ENKService")]
        System.Data.DataSet GetActivationsWithoutMSISDN();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetActivationsWithoutMSISDN", ReplyAction="http://tempuri.org/IService1/GetActivationsWithoutMSISDNResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetActivationsWithoutMSISDNAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateActivationMSISDN", ReplyAction="http://tempuri.org/IService1/UpdateActivationMSISDNResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ENK.ServiceReference1.ServiceData), Action="http://tempuri.org/IService1/UpdateActivationMSISDNServiceDataFault", Name="ServiceData", Namespace="http://schemas.datacontract.org/2004/07/ENKService")]
        void UpdateActivationMSISDN(long ActivationID, string MSISDN);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateActivationMSISDN", ReplyAction="http://tempuri.org/IService1/UpdateActivationMSISDNResponse")]
        System.Threading.Tasks.Task UpdateActivationMSISDNAsync(long ActivationID, string MSISDN);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetNotification", ReplyAction="http://tempuri.org/IService1/GetNotificationResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ENK.ServiceReference1.ServiceData), Action="http://tempuri.org/IService1/GetNotificationServiceDataFault", Name="ServiceData", Namespace="http://schemas.datacontract.org/2004/07/ENKService")]
        System.Data.DataSet GetNotification(long DistributorID, int MsgID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetNotification", ReplyAction="http://tempuri.org/IService1/GetNotificationResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetNotificationAsync(long DistributorID, int MsgID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ViewNotification", ReplyAction="http://tempuri.org/IService1/ViewNotificationResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ENK.ServiceReference1.ServiceData), Action="http://tempuri.org/IService1/ViewNotificationServiceDataFault", Name="ServiceData", Namespace="http://schemas.datacontract.org/2004/07/ENKService")]
        System.Data.DataSet ViewNotification(long Createdby, int MsgID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ViewNotification", ReplyAction="http://tempuri.org/IService1/ViewNotificationResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> ViewNotificationAsync(long Createdby, int MsgID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/FetchContactDetail", ReplyAction="http://tempuri.org/IService1/FetchContactDetailResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ENK.ServiceReference1.ServiceData), Action="http://tempuri.org/IService1/FetchContactDetailServiceDataFault", Name="ServiceData", Namespace="http://schemas.datacontract.org/2004/07/ENKService")]
        System.Data.DataSet FetchContactDetail(int Distributorid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/FetchContactDetail", ReplyAction="http://tempuri.org/IService1/FetchContactDetailResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> FetchContactDetailAsync(int Distributorid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetRandomPassword", ReplyAction="http://tempuri.org/IService1/GetRandomPasswordResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ENK.ServiceReference1.ServiceData), Action="http://tempuri.org/IService1/GetRandomPasswordServiceDataFault", Name="ServiceData", Namespace="http://schemas.datacontract.org/2004/07/ENKService")]
        System.Data.DataSet GetRandomPassword(long DistributorID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetRandomPassword", ReplyAction="http://tempuri.org/IService1/GetRandomPasswordResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetRandomPasswordAsync(long DistributorID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SaveRandomPassword", ReplyAction="http://tempuri.org/IService1/SaveRandomPasswordResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ENK.ServiceReference1.ServiceData), Action="http://tempuri.org/IService1/SaveRandomPasswordServiceDataFault", Name="ServiceData", Namespace="http://schemas.datacontract.org/2004/07/ENKService")]
        System.Data.DataSet SaveRandomPassword(long DistributorID, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SaveRandomPassword", ReplyAction="http://tempuri.org/IService1/SaveRandomPasswordResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> SaveRandomPasswordAsync(long DistributorID, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetCommissionDetail", ReplyAction="http://tempuri.org/IService1/GetCommissionDetailResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ENK.ServiceReference1.ServiceData), Action="http://tempuri.org/IService1/GetCommissionDetailServiceDataFault", Name="ServiceData", Namespace="http://schemas.datacontract.org/2004/07/ENKService")]
        System.Data.DataSet GetCommissionDetail(long DistributorID, int Month, int Year, string MonthYear);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetCommissionDetail", ReplyAction="http://tempuri.org/IService1/GetCommissionDetailResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetCommissionDetailAsync(long DistributorID, int Month, int Year, string MonthYear);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/VerifySimNumber", ReplyAction="http://tempuri.org/IService1/VerifySimNumberResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ENK.ServiceReference1.ServiceData), Action="http://tempuri.org/IService1/VerifySimNumberServiceDataFault", Name="ServiceData", Namespace="http://schemas.datacontract.org/2004/07/ENKService")]
        int VerifySimNumber(string OldSimNumber, string NewSimNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/VerifySimNumber", ReplyAction="http://tempuri.org/IService1/VerifySimNumberResponse")]
        System.Threading.Tasks.Task<int> VerifySimNumberAsync(string OldSimNumber, string NewSimNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateSwapSim", ReplyAction="http://tempuri.org/IService1/UpdateSwapSimResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ENK.ServiceReference1.ServiceData), Action="http://tempuri.org/IService1/UpdateSwapSimServiceDataFault", Name="ServiceData", Namespace="http://schemas.datacontract.org/2004/07/ENKService")]
        int UpdateSwapSim(string MSISDN, string OldSimNumber, string NewSimNumber, long Createdby);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateSwapSim", ReplyAction="http://tempuri.org/IService1/UpdateSwapSimResponse")]
        System.Threading.Tasks.Task<int> UpdateSwapSimAsync(string MSISDN, string OldSimNumber, string NewSimNumber, long Createdby);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/FetchInventory", ReplyAction="http://tempuri.org/IService1/FetchInventoryResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ENK.ServiceReference1.ServiceData), Action="http://tempuri.org/IService1/FetchInventoryServiceDataFault", Name="ServiceData", Namespace="http://schemas.datacontract.org/2004/07/ENKService")]
        System.Data.DataSet FetchInventory(int ClientID, string Action, string SimNumber, string FromSim, string ToSim, int NetworkID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/FetchInventory", ReplyAction="http://tempuri.org/IService1/FetchInventoryResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> FetchInventoryAsync(int ClientID, string Action, string SimNumber, string FromSim, string ToSim, int NetworkID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SwapSimRequest", ReplyAction="http://tempuri.org/IService1/SwapSimRequestResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ENK.ServiceReference1.ServiceData), Action="http://tempuri.org/IService1/SwapSimRequestServiceDataFault", Name="ServiceData", Namespace="http://schemas.datacontract.org/2004/07/ENKService")]
        int SwapSimRequest(string MSISDN, string OldSimNumber, string NewSimNumber, int Createdby, string Request, string Response, string Status);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SwapSimRequest", ReplyAction="http://tempuri.org/IService1/SwapSimRequestResponse")]
        System.Threading.Tasks.Task<int> SwapSimRequestAsync(string MSISDN, string OldSimNumber, string NewSimNumber, int Createdby, string Request, string Response, string Status);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateHoldStatus", ReplyAction="http://tempuri.org/IService1/UpdateHoldStatusResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ENK.ServiceReference1.ServiceData), Action="http://tempuri.org/IService1/UpdateHoldStatusServiceDataFault", Name="ServiceData", Namespace="http://schemas.datacontract.org/2004/07/ENKService")]
        int UpdateHoldStatus(long DistributorID, int HoldStatus, string HoldReason);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateHoldStatus", ReplyAction="http://tempuri.org/IService1/UpdateHoldStatusResponse")]
        System.Threading.Tasks.Task<int> UpdateHoldStatusAsync(long DistributorID, int HoldStatus, string HoldReason);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateTopupOption", ReplyAction="http://tempuri.org/IService1/UpdateTopupOptionResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ENK.ServiceReference1.ServiceData), Action="http://tempuri.org/IService1/UpdateTopupOptionServiceDataFault", Name="ServiceData", Namespace="http://schemas.datacontract.org/2004/07/ENKService")]
        int UpdateTopupOption(long DistributorID, decimal MinTopup, decimal MaxTopup, decimal PaypalTax, string PaypalTaxType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateTopupOption", ReplyAction="http://tempuri.org/IService1/UpdateTopupOptionResponse")]
        System.Threading.Tasks.Task<int> UpdateTopupOptionAsync(long DistributorID, decimal MinTopup, decimal MaxTopup, decimal PaypalTax, string PaypalTaxType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/RechargeActivationCancelDetail", ReplyAction="http://tempuri.org/IService1/RechargeActivationCancelDetailResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ENK.ServiceReference1.ServiceData), Action="http://tempuri.org/IService1/RechargeActivationCancelDetailServiceDataFault", Name="ServiceData", Namespace="http://schemas.datacontract.org/2004/07/ENKService")]
        System.Data.DataSet RechargeActivationCancelDetail(string MSISDN, string SerialNumber, string Action);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/RechargeActivationCancelDetail", ReplyAction="http://tempuri.org/IService1/RechargeActivationCancelDetailResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> RechargeActivationCancelDetailAsync(string MSISDN, string SerialNumber, string Action);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SaveRechargeActivationCancelDetails", ReplyAction="http://tempuri.org/IService1/SaveRechargeActivationCancelDetailsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ENK.ServiceReference1.ServiceData), Action="http://tempuri.org/IService1/SaveRechargeActivationCancelDetailsServiceDataFault", Name="ServiceData", Namespace="http://schemas.datacontract.org/2004/07/ENKService")]
        int SaveRechargeActivationCancelDetails(int ID, string MSISDN, int TariffID, decimal Rental, decimal RegulatoryFee, string CancelType, short CancelMonth);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SaveRechargeActivationCancelDetails", ReplyAction="http://tempuri.org/IService1/SaveRechargeActivationCancelDetailsResponse")]
        System.Threading.Tasks.Task<int> SaveRechargeActivationCancelDetailsAsync(int ID, string MSISDN, int TariffID, decimal Rental, decimal RegulatoryFee, string CancelType, short CancelMonth);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetHoldReason", ReplyAction="http://tempuri.org/IService1/GetHoldReasonResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ENK.ServiceReference1.ServiceData), Action="http://tempuri.org/IService1/GetHoldReasonServiceDataFault", Name="ServiceData", Namespace="http://schemas.datacontract.org/2004/07/ENKService")]
        System.Data.DataSet GetHoldReason(long DistributorID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetHoldReason", ReplyAction="http://tempuri.org/IService1/GetHoldReasonResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetHoldReasonAsync(long DistributorID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetRechargeActivationCancelReport", ReplyAction="http://tempuri.org/IService1/GetRechargeActivationCancelReportResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ENK.ServiceReference1.ServiceData), Action="http://tempuri.org/IService1/GetRechargeActivationCancelReportServiceDataFault", Name="ServiceData", Namespace="http://schemas.datacontract.org/2004/07/ENKService")]
        System.Data.DataSet GetRechargeActivationCancelReport(System.DateTime FromDate, System.DateTime ToDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetRechargeActivationCancelReport", ReplyAction="http://tempuri.org/IService1/GetRechargeActivationCancelReportResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetRechargeActivationCancelReportAsync(System.DateTime FromDate, System.DateTime ToDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetImageUrl", ReplyAction="http://tempuri.org/IService1/GetImageUrlResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ENK.ServiceReference1.ServiceData), Action="http://tempuri.org/IService1/GetImageUrlServiceDataFault", Name="ServiceData", Namespace="http://schemas.datacontract.org/2004/07/ENKService")]
        System.Data.DataSet GetImageUrl(int ImgFlag);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetImageUrl", ReplyAction="http://tempuri.org/IService1/GetImageUrlResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetImageUrlAsync(int ImgFlag);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/pGetImeurl", ReplyAction="http://tempuri.org/IService1/pGetImeurlResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ENK.ServiceReference1.ServiceData), Action="http://tempuri.org/IService1/pGetImeurlServiceDataFault", Name="ServiceData", Namespace="http://schemas.datacontract.org/2004/07/ENKService")]
        int pGetImeurl(string Url, int ImgFlag);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/pGetImeurl", ReplyAction="http://tempuri.org/IService1/pGetImeurlResponse")]
        System.Threading.Tasks.Task<int> pGetImeurlAsync(string Url, int ImgFlag);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteImage", ReplyAction="http://tempuri.org/IService1/DeleteImageResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ENK.ServiceReference1.ServiceData), Action="http://tempuri.org/IService1/DeleteImageServiceDataFault", Name="ServiceData", Namespace="http://schemas.datacontract.org/2004/07/ENKService")]
        System.Data.DataSet DeleteImage(int ImageID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteImage", ReplyAction="http://tempuri.org/IService1/DeleteImageResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> DeleteImageAsync(int ImageID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getImage1FromDB", ReplyAction="http://tempuri.org/IService1/getImage1FromDBResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ENK.ServiceReference1.ServiceData), Action="http://tempuri.org/IService1/getImage1FromDBServiceDataFault", Name="ServiceData", Namespace="http://schemas.datacontract.org/2004/07/ENKService")]
        System.Data.DataSet getImage1FromDB(int ImgFlag);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getImage1FromDB", ReplyAction="http://tempuri.org/IService1/getImage1FromDBResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> getImage1FromDBAsync(int ImgFlag);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/pUpdateImagePosition", ReplyAction="http://tempuri.org/IService1/pUpdateImagePositionResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ENK.ServiceReference1.ServiceData), Action="http://tempuri.org/IService1/pUpdateImagePositionServiceDataFault", Name="ServiceData", Namespace="http://schemas.datacontract.org/2004/07/ENKService")]
        System.Data.DataSet pUpdateImagePosition(int ImageID, int Position);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/pUpdateImagePosition", ReplyAction="http://tempuri.org/IService1/pUpdateImagePositionResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> pUpdateImagePositionAsync(int ImageID, int Position);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetApiDetail", ReplyAction="http://tempuri.org/IService1/GetApiDetailResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ENK.ServiceReference1.ServiceData), Action="http://tempuri.org/IService1/GetApiDetailServiceDataFault", Name="ServiceData", Namespace="http://schemas.datacontract.org/2004/07/ENKService")]
        System.Data.DataSet GetApiDetail(long DistributorID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetApiDetail", ReplyAction="http://tempuri.org/IService1/GetApiDetailResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetApiDetailAsync(long DistributorID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SaveApiMapping", ReplyAction="http://tempuri.org/IService1/SaveApiMappingResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ENK.ServiceReference1.ServiceData), Action="http://tempuri.org/IService1/SaveApiMappingServiceDataFault", Name="ServiceData", Namespace="http://schemas.datacontract.org/2004/07/ENKService")]
        int SaveApiMapping(long DistributorID, int clientcode, System.Data.DataTable dtApi, int chkApiStatus);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SaveApiMapping", ReplyAction="http://tempuri.org/IService1/SaveApiMappingResponse")]
        System.Threading.Tasks.Task<int> SaveApiMappingAsync(long DistributorID, int clientcode, System.Data.DataTable dtApi, int chkApiStatus);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/CheckSimAndMobileExistance", ReplyAction="http://tempuri.org/IService1/CheckSimAndMobileExistanceResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ENK.ServiceReference1.ServiceData), Action="http://tempuri.org/IService1/CheckSimAndMobileExistanceServiceDataFault", Name="ServiceData", Namespace="http://schemas.datacontract.org/2004/07/ENKService")]
        System.Data.DataSet CheckSimAndMobileExistance(string SimNumber, string MobileNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/CheckSimAndMobileExistance", ReplyAction="http://tempuri.org/IService1/CheckSimAndMobileExistanceResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> CheckSimAndMobileExistanceAsync(string SimNumber, string MobileNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetTransactionReport", ReplyAction="http://tempuri.org/IService1/GetTransactionReportResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ENK.ServiceReference1.ServiceData), Action="http://tempuri.org/IService1/GetTransactionReportServiceDataFault", Name="ServiceData", Namespace="http://schemas.datacontract.org/2004/07/ENKService")]
        System.Data.DataSet GetTransactionReport(System.DateTime FromDate, System.DateTime ToDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetTransactionReport", ReplyAction="http://tempuri.org/IService1/GetTransactionReportResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetTransactionReportAsync(System.DateTime FromDate, System.DateTime ToDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetDistributorServiceWithDate", ReplyAction="http://tempuri.org/IService1/GetDistributorServiceWithDateResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ENK.ServiceReference1.ServiceData), Action="http://tempuri.org/IService1/GetDistributorServiceWithDateServiceDataFault", Name="ServiceData", Namespace="http://schemas.datacontract.org/2004/07/ENKService")]
        ENK.ServiceReference1.Distributor[] GetDistributorServiceWithDate(int Userid, int Distributorid, string TaxDocument, string ResellerCertificate, System.DateTime FromDate, System.DateTime ToDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetDistributorServiceWithDate", ReplyAction="http://tempuri.org/IService1/GetDistributorServiceWithDateResponse")]
        System.Threading.Tasks.Task<ENK.ServiceReference1.Distributor[]> GetDistributorServiceWithDateAsync(int Userid, int Distributorid, string TaxDocument, string ResellerCertificate, System.DateTime FromDate, System.DateTime ToDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetDistributorInformation", ReplyAction="http://tempuri.org/IService1/GetDistributorInformationResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ENK.ServiceReference1.ServiceData), Action="http://tempuri.org/IService1/GetDistributorInformationServiceDataFault", Name="ServiceData", Namespace="http://schemas.datacontract.org/2004/07/ENKService")]
        System.Data.DataSet GetDistributorInformation(int Distributorid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetDistributorInformation", ReplyAction="http://tempuri.org/IService1/GetDistributorInformationResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetDistributorInformationAsync(int Distributorid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/CountActivationPreloaded", ReplyAction="http://tempuri.org/IService1/CountActivationPreloadedResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ENK.ServiceReference1.ServiceData), Action="http://tempuri.org/IService1/CountActivationPreloadedServiceDataFault", Name="ServiceData", Namespace="http://schemas.datacontract.org/2004/07/ENKService")]
        System.Data.DataSet CountActivationPreloaded(int DistributorID, int ClientTypeID, int loginID, int month, int year, int NetworkID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/CountActivationPreloaded", ReplyAction="http://tempuri.org/IService1/CountActivationPreloadedResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> CountActivationPreloadedAsync(int DistributorID, int ClientTypeID, int loginID, int month, int year, int NetworkID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/checkTaxId", ReplyAction="http://tempuri.org/IService1/checkTaxIdResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ENK.ServiceReference1.ServiceData), Action="http://tempuri.org/IService1/checkTaxIdServiceDataFault", Name="ServiceData", Namespace="http://schemas.datacontract.org/2004/07/ENKService")]
        System.Data.DataSet checkTaxId(string taxId, long distributorID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/checkTaxId", ReplyAction="http://tempuri.org/IService1/checkTaxIdResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> checkTaxIdAsync(string taxId, long distributorID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetCurrentbalance", ReplyAction="http://tempuri.org/IService1/GetCurrentbalanceResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ENK.ServiceReference1.ServiceData), Action="http://tempuri.org/IService1/GetCurrentbalanceServiceDataFault", Name="ServiceData", Namespace="http://schemas.datacontract.org/2004/07/ENKService")]
        System.Data.DataSet GetCurrentbalance(int DistributorID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetCurrentbalance", ReplyAction="http://tempuri.org/IService1/GetCurrentbalanceResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetCurrentbalanceAsync(int DistributorID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GETLEVELDistributor", ReplyAction="http://tempuri.org/IService1/GETLEVELDistributorResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ENK.ServiceReference1.ServiceData), Action="http://tempuri.org/IService1/GETLEVELDistributorServiceDataFault", Name="ServiceData", Namespace="http://schemas.datacontract.org/2004/07/ENKService")]
        System.Data.DataSet GETLEVELDistributor(int distributorID, int treeLevel);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GETLEVELDistributor", ReplyAction="http://tempuri.org/IService1/GETLEVELDistributorResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GETLEVELDistributorAsync(int distributorID, int treeLevel);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateAccountDingRecharge", ReplyAction="http://tempuri.org/IService1/UpdateAccountDingRechargeResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ENK.ServiceReference1.ServiceData), Action="http://tempuri.org/IService1/UpdateAccountDingRechargeServiceDataFault", Name="ServiceData", Namespace="http://schemas.datacontract.org/2004/07/ENKService")]
        int UpdateAccountDingRecharge(
                    int distributorID, 
                    int LoginID, 
                    string MobileNumber, 
                    string channel, 
                    string lang, 
                    ENK.ServiceReference1.SPayment sp, 
                    string SkuTariffCode, 
                    string TariffDescription, 
                    string TransferRef, 
                    decimal TxnAmount, 
                    string RespCode, 
                    string RespMsg, 
                    string TxnDate, 
                    string Country, 
                    string Operator, 
                    string SendCurrencyIso);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateAccountDingRecharge", ReplyAction="http://tempuri.org/IService1/UpdateAccountDingRechargeResponse")]
        System.Threading.Tasks.Task<int> UpdateAccountDingRechargeAsync(
                    int distributorID, 
                    int LoginID, 
                    string MobileNumber, 
                    string channel, 
                    string lang, 
                    ENK.ServiceReference1.SPayment sp, 
                    string SkuTariffCode, 
                    string TariffDescription, 
                    string TransferRef, 
                    decimal TxnAmount, 
                    string RespCode, 
                    string RespMsg, 
                    string TxnDate, 
                    string Country, 
                    string Operator, 
                    string SendCurrencyIso);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetCountriesForDing", ReplyAction="http://tempuri.org/IService1/GetCountriesForDingResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ENK.ServiceReference1.ServiceData), Action="http://tempuri.org/IService1/GetCountriesForDingServiceDataFault", Name="ServiceData", Namespace="http://schemas.datacontract.org/2004/07/ENKService")]
        System.Data.DataTable GetCountriesForDing();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetCountriesForDing", ReplyAction="http://tempuri.org/IService1/GetCountriesForDingResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetCountriesForDingAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/OperatorAginstCountry", ReplyAction="http://tempuri.org/IService1/OperatorAginstCountryResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ENK.ServiceReference1.ServiceData), Action="http://tempuri.org/IService1/OperatorAginstCountryServiceDataFault", Name="ServiceData", Namespace="http://schemas.datacontract.org/2004/07/ENKService")]
        System.Data.DataTable OperatorAginstCountry(string countryISO);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/OperatorAginstCountry", ReplyAction="http://tempuri.org/IService1/OperatorAginstCountryResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> OperatorAginstCountryAsync(string countryISO);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/StoredAPIRequestBeforeCall", ReplyAction="http://tempuri.org/IService1/StoredAPIRequestBeforeCallResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ENK.ServiceReference1.ServiceData), Action="http://tempuri.org/IService1/StoredAPIRequestBeforeCallServiceDataFault", Name="ServiceData", Namespace="http://schemas.datacontract.org/2004/07/ENKService")]
        int StoredAPIRequestBeforeCall(string Title, string Request, int DistributorId, string TransactionID, string Msisdn, string SIMNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/StoredAPIRequestBeforeCall", ReplyAction="http://tempuri.org/IService1/StoredAPIRequestBeforeCallResponse")]
        System.Threading.Tasks.Task<int> StoredAPIRequestBeforeCallAsync(string Title, string Request, int DistributorId, string TransactionID, string Msisdn, string SIMNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/CheckDuplicateRecharge", ReplyAction="http://tempuri.org/IService1/CheckDuplicateRechargeResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ENK.ServiceReference1.ServiceData), Action="http://tempuri.org/IService1/CheckDuplicateRechargeServiceDataFault", Name="ServiceData", Namespace="http://schemas.datacontract.org/2004/07/ENKService")]
        System.Data.DataTable CheckDuplicateRecharge(string MSISDN, int TariffID, int DistributorId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/CheckDuplicateRecharge", ReplyAction="http://tempuri.org/IService1/CheckDuplicateRechargeResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> CheckDuplicateRechargeAsync(string MSISDN, int TariffID, int DistributorId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/CheckAlreadySuccessfullPortIn", ReplyAction="http://tempuri.org/IService1/CheckAlreadySuccessfullPortInResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ENK.ServiceReference1.ServiceData), Action="http://tempuri.org/IService1/CheckAlreadySuccessfullPortInServiceDataFault", Name="ServiceData", Namespace="http://schemas.datacontract.org/2004/07/ENKService")]
        System.Data.DataSet CheckAlreadySuccessfullPortIn(string SimNumber, string PhoneNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/CheckAlreadySuccessfullPortIn", ReplyAction="http://tempuri.org/IService1/CheckAlreadySuccessfullPortInResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> CheckAlreadySuccessfullPortInAsync(string SimNumber, string PhoneNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetInventory1", ReplyAction="http://tempuri.org/IService1/GetInventory1Response")]
        [System.ServiceModel.FaultContractAttribute(typeof(ENK.ServiceReference1.ServiceData), Action="http://tempuri.org/IService1/GetInventory1ServiceDataFault", Name="ServiceData", Namespace="http://schemas.datacontract.org/2004/07/ENKService")]
        System.Data.DataSet GetInventory1(int ClientID, string Action, string SimNumber, string FromSimNumber, string ToSimNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetInventory1", ReplyAction="http://tempuri.org/IService1/GetInventory1Response")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetInventory1Async(int ClientID, string Action, string SimNumber, string FromSimNumber, string ToSimNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetIPMapping", ReplyAction="http://tempuri.org/IService1/GetIPMappingResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ENK.ServiceReference1.ServiceData), Action="http://tempuri.org/IService1/GetIPMappingServiceDataFault", Name="ServiceData", Namespace="http://schemas.datacontract.org/2004/07/ENKService")]
        System.Data.DataTable GetIPMapping(int Distributorid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetIPMapping", ReplyAction="http://tempuri.org/IService1/GetIPMappingResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetIPMappingAsync(int Distributorid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetImportFile", ReplyAction="http://tempuri.org/IService1/GetImportFileResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ENK.ServiceReference1.ServiceData), Action="http://tempuri.org/IService1/GetImportFileServiceDataFault", Name="ServiceData", Namespace="http://schemas.datacontract.org/2004/07/ENKService")]
        System.Data.DataSet GetImportFile(string xmlSTR);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetImportFile", ReplyAction="http://tempuri.org/IService1/GetImportFileResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetImportFileAsync(string xmlSTR);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SaveTariffGroupSpiffMapping", ReplyAction="http://tempuri.org/IService1/SaveTariffGroupSpiffMappingResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ENK.ServiceReference1.ServiceData), Action="http://tempuri.org/IService1/SaveTariffGroupSpiffMappingServiceDataFault", Name="ServiceData", Namespace="http://schemas.datacontract.org/2004/07/ENKService")]
        int SaveTariffGroupSpiffMapping(ENK.ServiceReference1.STariff st, int LoginID, int TariffGroupId, string Action, decimal RechargeCommission, decimal H2ORechargeDiscount, decimal Comission, decimal H2OGeneralDiscount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SaveTariffGroupSpiffMapping", ReplyAction="http://tempuri.org/IService1/SaveTariffGroupSpiffMappingResponse")]
        System.Threading.Tasks.Task<int> SaveTariffGroupSpiffMappingAsync(ENK.ServiceReference1.STariff st, int LoginID, int TariffGroupId, string Action, decimal RechargeCommission, decimal H2ORechargeDiscount, decimal Comission, decimal H2OGeneralDiscount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetRegulatery", ReplyAction="http://tempuri.org/IService1/GetRegulateryResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ENK.ServiceReference1.ServiceData), Action="http://tempuri.org/IService1/GetRegulateryServiceDataFault", Name="ServiceData", Namespace="http://schemas.datacontract.org/2004/07/ENKService")]
        System.Data.DataSet GetRegulatery();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetRegulatery", ReplyAction="http://tempuri.org/IService1/GetRegulateryResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetRegulateryAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetDistributorNotes", ReplyAction="http://tempuri.org/IService1/GetDistributorNotesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ENK.ServiceReference1.ServiceData), Action="http://tempuri.org/IService1/GetDistributorNotesServiceDataFault", Name="ServiceData", Namespace="http://schemas.datacontract.org/2004/07/ENKService")]
        System.Data.DataSet GetDistributorNotes(int ClientID, int ClientTypeID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetDistributorNotes", ReplyAction="http://tempuri.org/IService1/GetDistributorNotesResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetDistributorNotesAsync(int ClientID, int ClientTypeID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetStockTransferReport", ReplyAction="http://tempuri.org/IService1/GetStockTransferReportResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ENK.ServiceReference1.ServiceData), Action="http://tempuri.org/IService1/GetStockTransferReportServiceDataFault", Name="ServiceData", Namespace="http://schemas.datacontract.org/2004/07/ENKService")]
        System.Data.DataSet GetStockTransferReport(int ClientID, int ClientTypeID, System.DateTime fromDate, System.DateTime Todate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetStockTransferReport", ReplyAction="http://tempuri.org/IService1/GetStockTransferReportResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetStockTransferReportAsync(int ClientID, int ClientTypeID, System.DateTime fromDate, System.DateTime Todate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SaveDistributorNotes", ReplyAction="http://tempuri.org/IService1/SaveDistributorNotesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ENK.ServiceReference1.ServiceData), Action="http://tempuri.org/IService1/SaveDistributorNotesServiceDataFault", Name="ServiceData", Namespace="http://schemas.datacontract.org/2004/07/ENKService")]
        int SaveDistributorNotes(int DistributorID, string Notes, int LoginID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SaveDistributorNotes", ReplyAction="http://tempuri.org/IService1/SaveDistributorNotesResponse")]
        System.Threading.Tasks.Task<int> SaveDistributorNotesAsync(int DistributorID, string Notes, int LoginID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateStatusActivation", ReplyAction="http://tempuri.org/IService1/UpdateStatusActivationResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ENK.ServiceReference1.ServiceData), Action="http://tempuri.org/IService1/UpdateStatusActivationServiceDataFault", Name="ServiceData", Namespace="http://schemas.datacontract.org/2004/07/ENKService")]
        int UpdateStatusActivation(int ActivationID, int LoginID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateStatusActivation", ReplyAction="http://tempuri.org/IService1/UpdateStatusActivationResponse")]
        System.Threading.Tasks.Task<int> UpdateStatusActivationAsync(int ActivationID, int LoginID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ResetSubscriberPassword", ReplyAction="http://tempuri.org/IService1/ResetSubscriberPasswordResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ENK.ServiceReference1.ServiceData), Action="http://tempuri.org/IService1/ResetSubscriberPasswordServiceDataFault", Name="ServiceData", Namespace="http://schemas.datacontract.org/2004/07/ENKService")]
        int ResetSubscriberPassword(string UserID, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ResetSubscriberPassword", ReplyAction="http://tempuri.org/IService1/ResetSubscriberPasswordResponse")]
        System.Threading.Tasks.Task<int> ResetSubscriberPasswordAsync(string UserID, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetReportAcivationFail", ReplyAction="http://tempuri.org/IService1/GetReportAcivationFailResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ENK.ServiceReference1.ServiceData), Action="http://tempuri.org/IService1/GetReportAcivationFailServiceDataFault", Name="ServiceData", Namespace="http://schemas.datacontract.org/2004/07/ENKService")]
        System.Data.DataSet GetReportAcivationFail(int ClientID, int ClientTypeID, int LoginID, System.DateTime FromDate, System.DateTime ToDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetReportAcivationFail", ReplyAction="http://tempuri.org/IService1/GetReportAcivationFailResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetReportAcivationFailAsync(int ClientID, int ClientTypeID, int LoginID, System.DateTime FromDate, System.DateTime ToDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateStatusRecharge", ReplyAction="http://tempuri.org/IService1/UpdateStatusRechargeResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ENK.ServiceReference1.ServiceData), Action="http://tempuri.org/IService1/UpdateStatusRechargeServiceDataFault", Name="ServiceData", Namespace="http://schemas.datacontract.org/2004/07/ENKService")]
        int UpdateStatusRecharge(int RechargeID, int LoginID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateStatusRecharge", ReplyAction="http://tempuri.org/IService1/UpdateStatusRechargeResponse")]
        System.Threading.Tasks.Task<int> UpdateStatusRechargeAsync(int RechargeID, int LoginID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetRechargeFailReport", ReplyAction="http://tempuri.org/IService1/GetRechargeFailReportResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ENK.ServiceReference1.ServiceData), Action="http://tempuri.org/IService1/GetRechargeFailReportServiceDataFault", Name="ServiceData", Namespace="http://schemas.datacontract.org/2004/07/ENKService")]
        System.Data.DataSet GetRechargeFailReport(int ClientID, int ClientTypeID, int LoginID, System.DateTime FromDate, System.DateTime ToDate, string RechargeVia);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetRechargeFailReport", ReplyAction="http://tempuri.org/IService1/GetRechargeFailReportResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetRechargeFailReportAsync(int ClientID, int ClientTypeID, int LoginID, System.DateTime FromDate, System.DateTime ToDate, string RechargeVia);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateBulkNetwork", ReplyAction="http://tempuri.org/IService1/UpdateBulkNetworkResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ENK.ServiceReference1.ServiceData), Action="http://tempuri.org/IService1/UpdateBulkNetworkServiceDataFault", Name="ServiceData", Namespace="http://schemas.datacontract.org/2004/07/ENKService")]
        System.Data.DataSet UpdateBulkNetwork(int NetworkID, System.Data.DataTable dt);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateBulkNetwork", ReplyAction="http://tempuri.org/IService1/UpdateBulkNetworkResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> UpdateBulkNetworkAsync(int NetworkID, System.Data.DataTable dt);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/CheckDuplicatePaypalTxnID", ReplyAction="http://tempuri.org/IService1/CheckDuplicatePaypalTxnIDResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ENK.ServiceReference1.ServiceData), Action="http://tempuri.org/IService1/CheckDuplicatePaypalTxnIDServiceDataFault", Name="ServiceData", Namespace="http://schemas.datacontract.org/2004/07/ENKService")]
        System.Data.DataSet CheckDuplicatePaypalTxnID(string TxnID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/CheckDuplicatePaypalTxnID", ReplyAction="http://tempuri.org/IService1/CheckDuplicatePaypalTxnIDResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> CheckDuplicatePaypalTxnIDAsync(string TxnID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/CheckSimNumber", ReplyAction="http://tempuri.org/IService1/CheckSimNumberResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ENK.ServiceReference1.ServiceData), Action="http://tempuri.org/IService1/CheckSimNumberServiceDataFault", Name="ServiceData", Namespace="http://schemas.datacontract.org/2004/07/ENKService")]
        System.Data.DataSet CheckSimNumber(int NetworkID, System.Data.DataTable dt);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/CheckSimNumber", ReplyAction="http://tempuri.org/IService1/CheckSimNumberResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> CheckSimNumberAsync(int NetworkID, System.Data.DataTable dt);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetDistributor", ReplyAction="http://tempuri.org/IService1/GetDistributorResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ENK.ServiceReference1.ServiceData), Action="http://tempuri.org/IService1/GetDistributorServiceDataFault", Name="ServiceData", Namespace="http://schemas.datacontract.org/2004/07/ENKService")]
        System.Data.DataSet GetDistributor(int Distributorid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetDistributor", ReplyAction="http://tempuri.org/IService1/GetDistributorResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetDistributorAsync(int Distributorid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SaveDistributorRechageBulk", ReplyAction="http://tempuri.org/IService1/SaveDistributorRechageBulkResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ENK.ServiceReference1.ServiceData), Action="http://tempuri.org/IService1/SaveDistributorRechageBulkServiceDataFault", Name="ServiceData", Namespace="http://schemas.datacontract.org/2004/07/ENKService")]
        int SaveDistributorRechageBulk(decimal Rental, System.Data.DataTable dt, int NetworkID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SaveDistributorRechageBulk", ReplyAction="http://tempuri.org/IService1/SaveDistributorRechageBulkResponse")]
        System.Threading.Tasks.Task<int> SaveDistributorRechageBulkAsync(decimal Rental, System.Data.DataTable dt, int NetworkID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetLoginHistory", ReplyAction="http://tempuri.org/IService1/GetLoginHistoryResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ENK.ServiceReference1.ServiceData), Action="http://tempuri.org/IService1/GetLoginHistoryServiceDataFault", Name="ServiceData", Namespace="http://schemas.datacontract.org/2004/07/ENKService")]
        System.Data.DataSet GetLoginHistory(System.DateTime FromDate, System.DateTime ToDate, int DistributorID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetLoginHistory", ReplyAction="http://tempuri.org/IService1/GetLoginHistoryResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetLoginHistoryAsync(System.DateTime FromDate, System.DateTime ToDate, int DistributorID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetReportDeduct", ReplyAction="http://tempuri.org/IService1/GetReportDeductResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ENK.ServiceReference1.ServiceData), Action="http://tempuri.org/IService1/GetReportDeductServiceDataFault", Name="ServiceData", Namespace="http://schemas.datacontract.org/2004/07/ENKService")]
        System.Data.DataSet GetReportDeduct(int ClientID, int ClientTypeID, int LoginID, System.DateTime FromDate, System.DateTime ToDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetReportDeduct", ReplyAction="http://tempuri.org/IService1/GetReportDeductResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetReportDeductAsync(int ClientID, int ClientTypeID, int LoginID, System.DateTime FromDate, System.DateTime ToDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SaveRechageRequest", ReplyAction="http://tempuri.org/IService1/SaveRechageRequestResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ENK.ServiceReference1.ServiceData), Action="http://tempuri.org/IService1/SaveRechageRequestServiceDataFault", Name="ServiceData", Namespace="http://schemas.datacontract.org/2004/07/ENKService")]
        int SaveRechageRequest(int NetworkID, int TariffID, string SerialNumber, string ZipCode, string RechargeRequest, string EmailID, string City, decimal Amount, decimal TaxAmount, decimal TotalAmount, decimal Regulatery, int CreatedBy, int DistributorID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SaveRechageRequest", ReplyAction="http://tempuri.org/IService1/SaveRechageRequestResponse")]
        System.Threading.Tasks.Task<int> SaveRechageRequestAsync(int NetworkID, int TariffID, string SerialNumber, string ZipCode, string RechargeRequest, string EmailID, string City, decimal Amount, decimal TaxAmount, decimal TotalAmount, decimal Regulatery, int CreatedBy, int DistributorID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetPurchaseCode", ReplyAction="http://tempuri.org/IService1/GetPurchaseCodeResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ENK.ServiceReference1.ServiceData), Action="http://tempuri.org/IService1/GetPurchaseCodeServiceDataFault", Name="ServiceData", Namespace="http://schemas.datacontract.org/2004/07/ENKService")]
        System.Data.DataSet GetPurchaseCode();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetPurchaseCode", ReplyAction="http://tempuri.org/IService1/GetPurchaseCodeResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetPurchaseCodeAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetPurchaseReport", ReplyAction="http://tempuri.org/IService1/GetPurchaseReportResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ENK.ServiceReference1.ServiceData), Action="http://tempuri.org/IService1/GetPurchaseReportServiceDataFault", Name="ServiceData", Namespace="http://schemas.datacontract.org/2004/07/ENKService")]
        System.Data.DataSet GetPurchaseReport(int ClientID, int ClientTypeID, int LoginID, System.DateTime FromDate, System.DateTime ToDate, int PurchaseID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetPurchaseReport", ReplyAction="http://tempuri.org/IService1/GetPurchaseReportResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetPurchaseReportAsync(int ClientID, int ClientTypeID, int LoginID, System.DateTime FromDate, System.DateTime ToDate, int PurchaseID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeductDistributorTopUpAmount", ReplyAction="http://tempuri.org/IService1/DeductDistributorTopUpAmountResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ENK.ServiceReference1.ServiceData), Action="http://tempuri.org/IService1/DeductDistributorTopUpAmountServiceDataFault", Name="ServiceData", Namespace="http://schemas.datacontract.org/2004/07/ENKService")]
        System.Data.DataSet DeductDistributorTopUpAmount(int Distributorid, decimal Amount, string Remarks);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeductDistributorTopUpAmount", ReplyAction="http://tempuri.org/IService1/DeductDistributorTopUpAmountResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> DeductDistributorTopUpAmountAsync(int Distributorid, decimal Amount, string Remarks);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetReportRechargeFilterwise", ReplyAction="http://tempuri.org/IService1/GetReportRechargeFilterwiseResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ENK.ServiceReference1.ServiceData), Action="http://tempuri.org/IService1/GetReportRechargeFilterwiseServiceDataFault", Name="ServiceData", Namespace="http://schemas.datacontract.org/2004/07/ENKService")]
        System.Data.DataSet GetReportRechargeFilterwise(int ClientID, int ClientTypeID, int LoginID, string MobileNo, string TxnID, string RechargeVia);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetReportRechargeFilterwise", ReplyAction="http://tempuri.org/IService1/GetReportRechargeFilterwiseResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetReportRechargeFilterwiseAsync(int ClientID, int ClientTypeID, int LoginID, string MobileNo, string TxnID, string RechargeVia);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateAccountBalanceAfterRecharge", ReplyAction="http://tempuri.org/IService1/UpdateAccountBalanceAfterRechargeResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ENK.ServiceReference1.ServiceData), Action="http://tempuri.org/IService1/UpdateAccountBalanceAfterRechargeServiceDataFault", Name="ServiceData", Namespace="http://schemas.datacontract.org/2004/07/ENKService")]
        int UpdateAccountBalanceAfterRecharge(
                    int NetworkID, 
                    int TariffID, 
                    string SerialNumber, 
                    decimal ChargedAmount, 
                    int distributorID, 
                    string ZipCode, 
                    string RechargeStatus, 
                    string RechargeVia, 
                    string RechargeRequest, 
                    string RechargeResponse, 
                    int LoginID, 
                    int PaymentFrom, 
                    string PaymentMode, 
                    string TransactionId, 
                    int Currency, 
                    string TransactionStatus, 
                    int TransactionStatusId, 
                    string PinNumber, 
                    string State, 
                    string TxnID, 
                    string Tax, 
                    string TotalAmount, 
                    string InvoiceNo, 
                    string StatusVia, 
                    string Regulatry);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateAccountBalanceAfterRecharge", ReplyAction="http://tempuri.org/IService1/UpdateAccountBalanceAfterRechargeResponse")]
        System.Threading.Tasks.Task<int> UpdateAccountBalanceAfterRechargeAsync(
                    int NetworkID, 
                    int TariffID, 
                    string SerialNumber, 
                    decimal ChargedAmount, 
                    int distributorID, 
                    string ZipCode, 
                    string RechargeStatus, 
                    string RechargeVia, 
                    string RechargeRequest, 
                    string RechargeResponse, 
                    int LoginID, 
                    int PaymentFrom, 
                    string PaymentMode, 
                    string TransactionId, 
                    int Currency, 
                    string TransactionStatus, 
                    int TransactionStatusId, 
                    string PinNumber, 
                    string State, 
                    string TxnID, 
                    string Tax, 
                    string TotalAmount, 
                    string InvoiceNo, 
                    string StatusVia, 
                    string Regulatry);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateAccountBalanceAfterRechargeNew", ReplyAction="http://tempuri.org/IService1/UpdateAccountBalanceAfterRechargeNewResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ENK.ServiceReference1.ServiceData), Action="http://tempuri.org/IService1/UpdateAccountBalanceAfterRechargeNewServiceDataFault" +
            "", Name="ServiceData", Namespace="http://schemas.datacontract.org/2004/07/ENKService")]
        int UpdateAccountBalanceAfterRechargeNew(
                    int TariffID, 
                    string SerialNumber, 
                    decimal ChargedAmount, 
                    int distributorID, 
                    string RechargeStatus, 
                    string TransactionStatus, 
                    int TransactionStatusId, 
                    string RechargeVia, 
                    string RechargeRequest, 
                    string RechargeResponse, 
                    string TotalAmount, 
                    int LoginID, 
                    string TxnID, 
                    string Regulatery, 
                    string Month, 
                    int PaymentFrom, 
                    string PaymentMode, 
                    int DataAddOnID, 
                    int InternationalID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateAccountBalanceAfterRechargeNew", ReplyAction="http://tempuri.org/IService1/UpdateAccountBalanceAfterRechargeNewResponse")]
        System.Threading.Tasks.Task<int> UpdateAccountBalanceAfterRechargeNewAsync(
                    int TariffID, 
                    string SerialNumber, 
                    decimal ChargedAmount, 
                    int distributorID, 
                    string RechargeStatus, 
                    string TransactionStatus, 
                    int TransactionStatusId, 
                    string RechargeVia, 
                    string RechargeRequest, 
                    string RechargeResponse, 
                    string TotalAmount, 
                    int LoginID, 
                    string TxnID, 
                    string Regulatery, 
                    string Month, 
                    int PaymentFrom, 
                    string PaymentMode, 
                    int DataAddOnID, 
                    int InternationalID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateAccountBalanceAfterRechargeNewForH2O", ReplyAction="http://tempuri.org/IService1/UpdateAccountBalanceAfterRechargeNewForH2OResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ENK.ServiceReference1.ServiceData), Action="http://tempuri.org/IService1/UpdateAccountBalanceAfterRechargeNewForH2OServiceDat" +
            "aFault", Name="ServiceData", Namespace="http://schemas.datacontract.org/2004/07/ENKService")]
        int UpdateAccountBalanceAfterRechargeNewForH2O(
                    int TariffID, 
                    string SerialNumber, 
                    decimal ChargedAmount, 
                    int distributorID, 
                    string RechargeStatus, 
                    string TransactionStatus, 
                    int TransactionStatusId, 
                    string RechargeVia, 
                    string RechargeRequest, 
                    string RechargeResponse, 
                    string TotalAmount, 
                    int LoginID, 
                    string TxnID, 
                    string Regulatery, 
                    string Month, 
                    int PaymentFrom, 
                    string PaymentMode, 
                    int DataAddOnID, 
                    int InternationalID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateAccountBalanceAfterRechargeNewForH2O", ReplyAction="http://tempuri.org/IService1/UpdateAccountBalanceAfterRechargeNewForH2OResponse")]
        System.Threading.Tasks.Task<int> UpdateAccountBalanceAfterRechargeNewForH2OAsync(
                    int TariffID, 
                    string SerialNumber, 
                    decimal ChargedAmount, 
                    int distributorID, 
                    string RechargeStatus, 
                    string TransactionStatus, 
                    int TransactionStatusId, 
                    string RechargeVia, 
                    string RechargeRequest, 
                    string RechargeResponse, 
                    string TotalAmount, 
                    int LoginID, 
                    string TxnID, 
                    string Regulatery, 
                    string Month, 
                    int PaymentFrom, 
                    string PaymentMode, 
                    int DataAddOnID, 
                    int InternationalID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/CheckRechargeDuplicate", ReplyAction="http://tempuri.org/IService1/CheckRechargeDuplicateResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ENK.ServiceReference1.ServiceData), Action="http://tempuri.org/IService1/CheckRechargeDuplicateServiceDataFault", Name="ServiceData", Namespace="http://schemas.datacontract.org/2004/07/ENKService")]
        System.Data.DataSet CheckRechargeDuplicate(int NetworkID, string SerialNumber, int TariffID, string InvoiceNo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/CheckRechargeDuplicate", ReplyAction="http://tempuri.org/IService1/CheckRechargeDuplicateResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> CheckRechargeDuplicateAsync(int NetworkID, string SerialNumber, int TariffID, string InvoiceNo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetProductRecharge", ReplyAction="http://tempuri.org/IService1/GetProductRechargeResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ENK.ServiceReference1.ServiceData), Action="http://tempuri.org/IService1/GetProductRechargeServiceDataFault", Name="ServiceData", Namespace="http://schemas.datacontract.org/2004/07/ENKService")]
        System.Data.DataSet GetProductRecharge(int NetworkID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetProductRecharge", ReplyAction="http://tempuri.org/IService1/GetProductRechargeResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetProductRechargeAsync(int NetworkID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetState", ReplyAction="http://tempuri.org/IService1/GetStateResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ENK.ServiceReference1.ServiceData), Action="http://tempuri.org/IService1/GetStateServiceDataFault", Name="ServiceData", Namespace="http://schemas.datacontract.org/2004/07/ENKService")]
        System.Data.DataSet GetState();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetState", ReplyAction="http://tempuri.org/IService1/GetStateResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetStateAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetSimNetwork", ReplyAction="http://tempuri.org/IService1/GetSimNetworkResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ENK.ServiceReference1.ServiceData), Action="http://tempuri.org/IService1/GetSimNetworkServiceDataFault", Name="ServiceData", Namespace="http://schemas.datacontract.org/2004/07/ENKService")]
        System.Data.DataSet GetSimNetwork(string SimNo, string Action);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetSimNetwork", ReplyAction="http://tempuri.org/IService1/GetSimNetworkResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetSimNetworkAsync(string SimNo, string Action);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetReportActivationLedger", ReplyAction="http://tempuri.org/IService1/GetReportActivationLedgerResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ENK.ServiceReference1.ServiceData), Action="http://tempuri.org/IService1/GetReportActivationLedgerServiceDataFault", Name="ServiceData", Namespace="http://schemas.datacontract.org/2004/07/ENKService")]
        System.Data.DataSet GetReportActivationLedger(int ClientID, int ClientTypeID, int LoginID, System.DateTime FromDate, System.DateTime ToDate, int CurrentLogin);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetReportActivationLedger", ReplyAction="http://tempuri.org/IService1/GetReportActivationLedgerResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetReportActivationLedgerAsync(int ClientID, int ClientTypeID, int LoginID, System.DateTime FromDate, System.DateTime ToDate, int CurrentLogin);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdatePurchaseSimNetwork", ReplyAction="http://tempuri.org/IService1/UpdatePurchaseSimNetworkResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ENK.ServiceReference1.ServiceData), Action="http://tempuri.org/IService1/UpdatePurchaseSimNetworkServiceDataFault", Name="ServiceData", Namespace="http://schemas.datacontract.org/2004/07/ENKService")]
        System.Data.DataSet UpdatePurchaseSimNetwork(int VendorID, string SimNo, long PurchaseID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdatePurchaseSimNetwork", ReplyAction="http://tempuri.org/IService1/UpdatePurchaseSimNetworkResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> UpdatePurchaseSimNetworkAsync(int VendorID, string SimNo, long PurchaseID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SaveInventory", ReplyAction="http://tempuri.org/IService1/SaveInventoryResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ENK.ServiceReference1.ServiceData), Action="http://tempuri.org/IService1/SaveInventoryServiceDataFault", Name="ServiceData", Namespace="http://schemas.datacontract.org/2004/07/ENKService")]
        int SaveInventory(ENK.ServiceReference1.SIM s, int UserID, ENK.ServiceReference1.Actions Action);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SaveInventory", ReplyAction="http://tempuri.org/IService1/SaveInventoryResponse")]
        System.Threading.Tasks.Task<int> SaveInventoryAsync(ENK.ServiceReference1.SIM s, int UserID, ENK.ServiceReference1.Actions Action);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetVendor", ReplyAction="http://tempuri.org/IService1/GetVendorResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ENK.ServiceReference1.ServiceData), Action="http://tempuri.org/IService1/GetVendorServiceDataFault", Name="ServiceData", Namespace="http://schemas.datacontract.org/2004/07/ENKService")]
        System.Data.DataTable GetVendor(int UserID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetVendor", ReplyAction="http://tempuri.org/IService1/GetVendorResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetVendorAsync(int UserID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/PreloadedSIMCheck", ReplyAction="http://tempuri.org/IService1/PreloadedSIMCheckResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ENK.ServiceReference1.ServiceData), Action="http://tempuri.org/IService1/PreloadedSIMCheckServiceDataFault", Name="ServiceData", Namespace="http://schemas.datacontract.org/2004/07/ENKService")]
        System.Data.DataTable PreloadedSIMCheck(string SimNo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/PreloadedSIMCheck", ReplyAction="http://tempuri.org/IService1/PreloadedSIMCheckResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> PreloadedSIMCheckAsync(string SimNo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetTariffService", ReplyAction="http://tempuri.org/IService1/GetTariffServiceResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ENK.ServiceReference1.ServiceData), Action="http://tempuri.org/IService1/GetTariffServiceServiceDataFault", Name="ServiceData", Namespace="http://schemas.datacontract.org/2004/07/ENKService")]
        System.Data.DataSet GetTariffService(int LoginID, int DistributorID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetTariffService", ReplyAction="http://tempuri.org/IService1/GetTariffServiceResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetTariffServiceAsync(int LoginID, int DistributorID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/InventoryTransfer", ReplyAction="http://tempuri.org/IService1/InventoryTransferResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ENK.ServiceReference1.ServiceData), Action="http://tempuri.org/IService1/InventoryTransferServiceDataFault", Name="ServiceData", Namespace="http://schemas.datacontract.org/2004/07/ENKService")]
        int InventoryTransfer(ENK.ServiceReference1.SIM s, int UserID, ENK.ServiceReference1.Actions Action, string checkInventoryWAY);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/InventoryTransfer", ReplyAction="http://tempuri.org/IService1/InventoryTransferResponse")]
        System.Threading.Tasks.Task<int> InventoryTransferAsync(ENK.ServiceReference1.SIM s, int UserID, ENK.ServiceReference1.Actions Action, string checkInventoryWAY);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetInventory", ReplyAction="http://tempuri.org/IService1/GetInventoryResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ENK.ServiceReference1.ServiceData), Action="http://tempuri.org/IService1/GetInventoryServiceDataFault", Name="ServiceData", Namespace="http://schemas.datacontract.org/2004/07/ENKService")]
        System.Data.DataSet GetInventory(int ClientID, string Action);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetInventory", ReplyAction="http://tempuri.org/IService1/GetInventoryResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetInventoryAsync(int ClientID, string Action);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetInventoryForAccept", ReplyAction="http://tempuri.org/IService1/GetInventoryForAcceptResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ENK.ServiceReference1.ServiceData), Action="http://tempuri.org/IService1/GetInventoryForAcceptServiceDataFault", Name="ServiceData", Namespace="http://schemas.datacontract.org/2004/07/ENKService")]
        System.Data.DataSet GetInventoryForAccept(int ClientID, int LoginClientID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetInventoryForAccept", ReplyAction="http://tempuri.org/IService1/GetInventoryForAcceptResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetInventoryForAcceptAsync(int ClientID, int LoginClientID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetInventoryForSIMReplacement", ReplyAction="http://tempuri.org/IService1/GetInventoryForSIMReplacementResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ENK.ServiceReference1.ServiceData), Action="http://tempuri.org/IService1/GetInventoryForSIMReplacementServiceDataFault", Name="ServiceData", Namespace="http://schemas.datacontract.org/2004/07/ENKService")]
        System.Data.DataSet GetInventoryForSIMReplacement(string MSISDNNo, string SIMNo, int ClientID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetInventoryForSIMReplacement", ReplyAction="http://tempuri.org/IService1/GetInventoryForSIMReplacementResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetInventoryForSIMReplacementAsync(string MSISDNNo, string SIMNo, int ClientID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SIMReplacement", ReplyAction="http://tempuri.org/IService1/SIMReplacementResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ENK.ServiceReference1.ServiceData), Action="http://tempuri.org/IService1/SIMReplacementServiceDataFault", Name="ServiceData", Namespace="http://schemas.datacontract.org/2004/07/ENKService")]
        int SIMReplacement(ENK.ServiceReference1.SIM s, ENK.ServiceReference1.Actions Action);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SIMReplacement", ReplyAction="http://tempuri.org/IService1/SIMReplacementResponse")]
        System.Threading.Tasks.Task<int> SIMReplacementAsync(ENK.ServiceReference1.SIM s, ENK.ServiceReference1.Actions Action);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetReportInventoryStatus", ReplyAction="http://tempuri.org/IService1/GetReportInventoryStatusResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ENK.ServiceReference1.ServiceData), Action="http://tempuri.org/IService1/GetReportInventoryStatusServiceDataFault", Name="ServiceData", Namespace="http://schemas.datacontract.org/2004/07/ENKService")]
        System.Data.DataSet GetReportInventoryStatus(int ClientID, int ClientTypeID, int LoginID, System.DateTime FromDate, System.DateTime ToDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetReportInventoryStatus", ReplyAction="http://tempuri.org/IService1/GetReportInventoryStatusResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetReportInventoryStatusAsync(int ClientID, int ClientTypeID, int LoginID, System.DateTime FromDate, System.DateTime ToDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetReportSalesReport", ReplyAction="http://tempuri.org/IService1/GetReportSalesReportResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ENK.ServiceReference1.ServiceData), Action="http://tempuri.org/IService1/GetReportSalesReportServiceDataFault", Name="ServiceData", Namespace="http://schemas.datacontract.org/2004/07/ENKService")]
        System.Data.DataSet GetReportSalesReport(int ClientID, int ClientTypeID, int LoginID, System.DateTime FromDate, System.DateTime ToDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetReportSalesReport", ReplyAction="http://tempuri.org/IService1/GetReportSalesReportResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetReportSalesReportAsync(int ClientID, int ClientTypeID, int LoginID, System.DateTime FromDate, System.DateTime ToDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetReportActivationSIM", ReplyAction="http://tempuri.org/IService1/GetReportActivationSIMResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ENK.ServiceReference1.ServiceData), Action="http://tempuri.org/IService1/GetReportActivationSIMServiceDataFault", Name="ServiceData", Namespace="http://schemas.datacontract.org/2004/07/ENKService")]
        System.Data.DataSet GetReportActivationSIM(int ClientID, int ClientTypeID, int LoginID, System.DateTime FromDate, System.DateTime ToDate, int checkMainDistributor, int NetworkID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetReportActivationSIM", ReplyAction="http://tempuri.org/IService1/GetReportActivationSIMResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetReportActivationSIMAsync(int ClientID, int ClientTypeID, int LoginID, System.DateTime FromDate, System.DateTime ToDate, int checkMainDistributor, int NetworkID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetRechargeSIMReport", ReplyAction="http://tempuri.org/IService1/GetRechargeSIMReportResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ENK.ServiceReference1.ServiceData), Action="http://tempuri.org/IService1/GetRechargeSIMReportServiceDataFault", Name="ServiceData", Namespace="http://schemas.datacontract.org/2004/07/ENKService")]
        System.Data.DataSet GetRechargeSIMReport(int ClientID, int ClientTypeID, int LoginID, System.DateTime FromDate, System.DateTime ToDate, int NetworkID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetRechargeSIMReport", ReplyAction="http://tempuri.org/IService1/GetRechargeSIMReportResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetRechargeSIMReportAsync(int ClientID, int ClientTypeID, int LoginID, System.DateTime FromDate, System.DateTime ToDate, int NetworkID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetRequesrRechargeSIMReport", ReplyAction="http://tempuri.org/IService1/GetRequesrRechargeSIMReportResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ENK.ServiceReference1.ServiceData), Action="http://tempuri.org/IService1/GetRequesrRechargeSIMReportServiceDataFault", Name="ServiceData", Namespace="http://schemas.datacontract.org/2004/07/ENKService")]
        System.Data.DataSet GetRequesrRechargeSIMReport(int ClientID, int ClientTypeID, int LoginID, System.DateTime FromDate, System.DateTime ToDate, string RechargeVia);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetRequesrRechargeSIMReport", ReplyAction="http://tempuri.org/IService1/GetRequesrRechargeSIMReportResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetRequesrRechargeSIMReportAsync(int ClientID, int ClientTypeID, int LoginID, System.DateTime FromDate, System.DateTime ToDate, string RechargeVia);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetReportSIMHistory", ReplyAction="http://tempuri.org/IService1/GetReportSIMHistoryResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ENK.ServiceReference1.ServiceData), Action="http://tempuri.org/IService1/GetReportSIMHistoryServiceDataFault", Name="ServiceData", Namespace="http://schemas.datacontract.org/2004/07/ENKService")]
        System.Data.DataSet GetReportSIMHistory(int ClientID, int ClientTypeID, int LoginID, string SearchText);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetReportSIMHistory", ReplyAction="http://tempuri.org/IService1/GetReportSIMHistoryResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetReportSIMHistoryAsync(int ClientID, int ClientTypeID, int LoginID, string SearchText);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SimTariffMapping", ReplyAction="http://tempuri.org/IService1/SimTariffMappingResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ENK.ServiceReference1.ServiceData), Action="http://tempuri.org/IService1/SimTariffMappingServiceDataFault", Name="ServiceData", Namespace="http://schemas.datacontract.org/2004/07/ENKService")]
        int SimTariffMapping(ENK.ServiceReference1.SIM s, int UserID, ENK.ServiceReference1.Actions Action, int Months);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SimTariffMapping", ReplyAction="http://tempuri.org/IService1/SimTariffMappingResponse")]
        System.Threading.Tasks.Task<int> SimTariffMappingAsync(ENK.ServiceReference1.SIM s, int UserID, ENK.ServiceReference1.Actions Action, int Months);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetSaleReportForActivationAndPortIn", ReplyAction="http://tempuri.org/IService1/GetSaleReportForActivationAndPortInResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ENK.ServiceReference1.ServiceData), Action="http://tempuri.org/IService1/GetSaleReportForActivationAndPortInServiceDataFault", Name="ServiceData", Namespace="http://schemas.datacontract.org/2004/07/ENKService")]
        System.Data.DataSet GetSaleReportForActivationAndPortIn(int ClientID, int ClientTypeID, System.DateTime FromDate, System.DateTime ToDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetSaleReportForActivationAndPortIn", ReplyAction="http://tempuri.org/IService1/GetSaleReportForActivationAndPortInResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetSaleReportForActivationAndPortInAsync(int ClientID, int ClientTypeID, System.DateTime FromDate, System.DateTime ToDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetInventoryBulkTransfer", ReplyAction="http://tempuri.org/IService1/GetInventoryBulkTransferResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ENK.ServiceReference1.ServiceData), Action="http://tempuri.org/IService1/GetInventoryBulkTransferServiceDataFault", Name="ServiceData", Namespace="http://schemas.datacontract.org/2004/07/ENKService")]
        System.Data.DataSet GetInventoryBulkTransfer(int ClientID, System.Data.DataTable SIMDt);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetInventoryBulkTransfer", ReplyAction="http://tempuri.org/IService1/GetInventoryBulkTransferResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetInventoryBulkTransferAsync(int ClientID, System.Data.DataTable SIMDt);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetInventoryForAcceptOnDasboard", ReplyAction="http://tempuri.org/IService1/GetInventoryForAcceptOnDasboardResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ENK.ServiceReference1.ServiceData), Action="http://tempuri.org/IService1/GetInventoryForAcceptOnDasboardServiceDataFault", Name="ServiceData", Namespace="http://schemas.datacontract.org/2004/07/ENKService")]
        System.Data.DataSet GetInventoryForAcceptOnDasboard(int LoginClientID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetInventoryForAcceptOnDasboard", ReplyAction="http://tempuri.org/IService1/GetInventoryForAcceptOnDasboardResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetInventoryForAcceptOnDasboardAsync(int LoginClientID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetData", ReplyAction="http://tempuri.org/IService1/GetDataResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ENK.ServiceReference1.ServiceData), Action="http://tempuri.org/IService1/GetDataServiceDataFault", Name="ServiceData", Namespace="http://schemas.datacontract.org/2004/07/ENKService")]
        int GetData(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetData", ReplyAction="http://tempuri.org/IService1/GetDataResponse")]
        System.Threading.Tasks.Task<int> GetDataAsync(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddDistirbutorService", ReplyAction="http://tempuri.org/IService1/AddDistirbutorServiceResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ENK.ServiceReference1.ServiceData), Action="http://tempuri.org/IService1/AddDistirbutorServiceServiceDataFault", Name="ServiceData", Namespace="http://schemas.datacontract.org/2004/07/ENKService")]
        System.Data.DataSet AddDistirbutorService(ENK.ServiceReference1.Distributor distbtr, int UserID, System.Data.DataTable dt, System.Data.DataTable dtRecharge, string UserName, int ChkSellr, int Chktariffgroup);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddDistirbutorService", ReplyAction="http://tempuri.org/IService1/AddDistirbutorServiceResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> AddDistirbutorServiceAsync(ENK.ServiceReference1.Distributor distbtr, int UserID, System.Data.DataTable dt, System.Data.DataTable dtRecharge, string UserName, int ChkSellr, int Chktariffgroup);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateDistirbutorService", ReplyAction="http://tempuri.org/IService1/UpdateDistirbutorServiceResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ENK.ServiceReference1.ServiceData), Action="http://tempuri.org/IService1/UpdateDistirbutorServiceServiceDataFault", Name="ServiceData", Namespace="http://schemas.datacontract.org/2004/07/ENKService")]
        int UpdateDistirbutorService(ENK.ServiceReference1.Distributor dist, int Userid, System.Data.DataTable dt, System.Data.DataTable dtRecharge, string Username, string passw, int ChkSellr, int Chktariffgroup);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateDistirbutorService", ReplyAction="http://tempuri.org/IService1/UpdateDistirbutorServiceResponse")]
        System.Threading.Tasks.Task<int> UpdateDistirbutorServiceAsync(ENK.ServiceReference1.Distributor dist, int Userid, System.Data.DataTable dt, System.Data.DataTable dtRecharge, string Username, string passw, int ChkSellr, int Chktariffgroup);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetDistributorService1", ReplyAction="http://tempuri.org/IService1/GetDistributorService1Response")]
        [System.ServiceModel.FaultContractAttribute(typeof(ENK.ServiceReference1.ServiceData), Action="http://tempuri.org/IService1/GetDistributorService1ServiceDataFault", Name="ServiceData", Namespace="http://schemas.datacontract.org/2004/07/ENKService")]
        ENK.ServiceReference1.Distributor[] GetDistributorService1(int Userid, int Distributorid, string TaxDocument, string ResellerCertificate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetDistributorService1", ReplyAction="http://tempuri.org/IService1/GetDistributorService1Response")]
        System.Threading.Tasks.Task<ENK.ServiceReference1.Distributor[]> GetDistributorService1Async(int Userid, int Distributorid, string TaxDocument, string ResellerCertificate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetSingleDistributorService", ReplyAction="http://tempuri.org/IService1/GetSingleDistributorServiceResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ENK.ServiceReference1.ServiceData), Action="http://tempuri.org/IService1/GetSingleDistributorServiceServiceDataFault", Name="ServiceData", Namespace="http://schemas.datacontract.org/2004/07/ENKService")]
        ENK.ServiceReference1.Distributor[] GetSingleDistributorService(int Distributorid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetSingleDistributorService", ReplyAction="http://tempuri.org/IService1/GetSingleDistributorServiceResponse")]
        System.Threading.Tasks.Task<ENK.ServiceReference1.Distributor[]> GetSingleDistributorServiceAsync(int Distributorid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetSingleDistributorTariffService", ReplyAction="http://tempuri.org/IService1/GetSingleDistributorTariffServiceResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ENK.ServiceReference1.ServiceData), Action="http://tempuri.org/IService1/GetSingleDistributorTariffServiceServiceDataFault", Name="ServiceData", Namespace="http://schemas.datacontract.org/2004/07/ENKService")]
        System.Data.DataSet GetSingleDistributorTariffService(int Distributorid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetSingleDistributorTariffService", ReplyAction="http://tempuri.org/IService1/GetSingleDistributorTariffServiceResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetSingleDistributorTariffServiceAsync(int Distributorid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetClientType", ReplyAction="http://tempuri.org/IService1/GetClientTypeResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ENK.ServiceReference1.ServiceData), Action="http://tempuri.org/IService1/GetClientTypeServiceDataFault", Name="ServiceData", Namespace="http://schemas.datacontract.org/2004/07/ENKService")]
        System.Data.DataSet GetClientType(int loginID, int DistributorID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetClientType", ReplyAction="http://tempuri.org/IService1/GetClientTypeResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetClientTypeAsync(int loginID, int DistributorID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetDistributorDDLService", ReplyAction="http://tempuri.org/IService1/GetDistributorDDLServiceResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ENK.ServiceReference1.ServiceData), Action="http://tempuri.org/IService1/GetDistributorDDLServiceServiceDataFault", Name="ServiceData", Namespace="http://schemas.datacontract.org/2004/07/ENKService")]
        ENK.ServiceReference1.Distributor[] GetDistributorDDLService(int Userid, int Distributorid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetDistributorDDLService", ReplyAction="http://tempuri.org/IService1/GetDistributorDDLServiceResponse")]
        System.Threading.Tasks.Task<ENK.ServiceReference1.Distributor[]> GetDistributorDDLServiceAsync(int Userid, int Distributorid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetRoleService", ReplyAction="http://tempuri.org/IService1/GetRoleServiceResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ENK.ServiceReference1.ServiceData), Action="http://tempuri.org/IService1/GetRoleServiceServiceDataFault", Name="ServiceData", Namespace="http://schemas.datacontract.org/2004/07/ENKService")]
        System.Data.DataSet GetRoleService();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetRoleService", ReplyAction="http://tempuri.org/IService1/GetRoleServiceResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetRoleServiceAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ValidateLoginService", ReplyAction="http://tempuri.org/IService1/ValidateLoginServiceResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ENK.ServiceReference1.ServiceData), Action="http://tempuri.org/IService1/ValidateLoginServiceServiceDataFault", Name="ServiceData", Namespace="http://schemas.datacontract.org/2004/07/ENKService")]
        System.Data.DataSet ValidateLoginService(string UserName, string Pwd);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ValidateLoginService", ReplyAction="http://tempuri.org/IService1/ValidateLoginServiceResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> ValidateLoginServiceAsync(string UserName, string Pwd);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ValidateLoginApp", ReplyAction="http://tempuri.org/IService1/ValidateLoginAppResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ENK.ServiceReference1.ServiceData), Action="http://tempuri.org/IService1/ValidateLoginAppServiceDataFault", Name="ServiceData", Namespace="http://schemas.datacontract.org/2004/07/ENKService")]
        System.Data.DataSet ValidateLoginApp(long LoginId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ValidateLoginApp", ReplyAction="http://tempuri.org/IService1/ValidateLoginAppResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> ValidateLoginAppAsync(long LoginId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddUserService", ReplyAction="http://tempuri.org/IService1/AddUserServiceResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ENK.ServiceReference1.ServiceData), Action="http://tempuri.org/IService1/AddUserServiceServiceDataFault", Name="ServiceData", Namespace="http://schemas.datacontract.org/2004/07/ENKService")]
        int AddUserService(ENK.ServiceReference1.SUsers ud, int loginID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddUserService", ReplyAction="http://tempuri.org/IService1/AddUserServiceResponse")]
        System.Threading.Tasks.Task<int> AddUserServiceAsync(ENK.ServiceReference1.SUsers ud, int loginID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateUserService", ReplyAction="http://tempuri.org/IService1/UpdateUserServiceResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ENK.ServiceReference1.ServiceData), Action="http://tempuri.org/IService1/UpdateUserServiceServiceDataFault", Name="ServiceData", Namespace="http://schemas.datacontract.org/2004/07/ENKService")]
        int UpdateUserService(ENK.ServiceReference1.SUsers ud, int loginID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateUserService", ReplyAction="http://tempuri.org/IService1/UpdateUserServiceResponse")]
        System.Threading.Tasks.Task<int> UpdateUserServiceAsync(ENK.ServiceReference1.SUsers ud, int loginID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetUserListService", ReplyAction="http://tempuri.org/IService1/GetUserListServiceResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ENK.ServiceReference1.ServiceData), Action="http://tempuri.org/IService1/GetUserListServiceServiceDataFault", Name="ServiceData", Namespace="http://schemas.datacontract.org/2004/07/ENKService")]
        System.Data.DataSet GetUserListService(int loginID, int DistributorID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetUserListService", ReplyAction="http://tempuri.org/IService1/GetUserListServiceResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetUserListServiceAsync(int loginID, int DistributorID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetUserService", ReplyAction="http://tempuri.org/IService1/GetUserServiceResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ENK.ServiceReference1.ServiceData), Action="http://tempuri.org/IService1/GetUserServiceServiceDataFault", Name="ServiceData", Namespace="http://schemas.datacontract.org/2004/07/ENKService")]
        System.Data.DataSet GetUserService(int UserID, int LoginID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetUserService", ReplyAction="http://tempuri.org/IService1/GetUserServiceResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetUserServiceAsync(int UserID, int LoginID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/InsertCompanyTopupBalanceService", ReplyAction="http://tempuri.org/IService1/InsertCompanyTopupBalanceServiceResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ENK.ServiceReference1.ServiceData), Action="http://tempuri.org/IService1/InsertCompanyTopupBalanceServiceServiceDataFault", Name="ServiceData", Namespace="http://schemas.datacontract.org/2004/07/ENKService")]
        int InsertCompanyTopupBalanceService(int distributorID, int LoginID, ENK.ServiceReference1.SPayment sp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/InsertCompanyTopupBalanceService", ReplyAction="http://tempuri.org/IService1/InsertCompanyTopupBalanceServiceResponse")]
        System.Threading.Tasks.Task<int> InsertCompanyTopupBalanceServiceAsync(int distributorID, int LoginID, ENK.ServiceReference1.SPayment sp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/InsertLoginHistoryService", ReplyAction="http://tempuri.org/IService1/InsertLoginHistoryServiceResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ENK.ServiceReference1.ServiceData), Action="http://tempuri.org/IService1/InsertLoginHistoryServiceServiceDataFault", Name="ServiceData", Namespace="http://schemas.datacontract.org/2004/07/ENKService")]
        int InsertLoginHistoryService(ENK.ServiceReference1.SLoginHistory sl);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/InsertLoginHistoryService", ReplyAction="http://tempuri.org/IService1/InsertLoginHistoryServiceResponse")]
        System.Threading.Tasks.Task<int> InsertLoginHistoryServiceAsync(ENK.ServiceReference1.SLoginHistory sl);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetScreenService", ReplyAction="http://tempuri.org/IService1/GetScreenServiceResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ENK.ServiceReference1.ServiceData), Action="http://tempuri.org/IService1/GetScreenServiceServiceDataFault", Name="ServiceData", Namespace="http://schemas.datacontract.org/2004/07/ENKService")]
        System.Data.DataSet GetScreenService(int RoleID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetScreenService", ReplyAction="http://tempuri.org/IService1/GetScreenServiceResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetScreenServiceAsync(int RoleID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetSingleTariffService", ReplyAction="http://tempuri.org/IService1/GetSingleTariffServiceResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ENK.ServiceReference1.ServiceData), Action="http://tempuri.org/IService1/GetSingleTariffServiceServiceDataFault", Name="ServiceData", Namespace="http://schemas.datacontract.org/2004/07/ENKService")]
        System.Data.DataSet GetSingleTariffService(int TariffID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetSingleTariffService", ReplyAction="http://tempuri.org/IService1/GetSingleTariffServiceResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetSingleTariffServiceAsync(int TariffID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddTariffService", ReplyAction="http://tempuri.org/IService1/AddTariffServiceResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ENK.ServiceReference1.ServiceData), Action="http://tempuri.org/IService1/AddTariffServiceServiceDataFault", Name="ServiceData", Namespace="http://schemas.datacontract.org/2004/07/ENKService")]
        int AddTariffService(ENK.ServiceReference1.STariff st, int LoginID, int DistributorID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddTariffService", ReplyAction="http://tempuri.org/IService1/AddTariffServiceResponse")]
        System.Threading.Tasks.Task<int> AddTariffServiceAsync(ENK.ServiceReference1.STariff st, int LoginID, int DistributorID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateTariffService", ReplyAction="http://tempuri.org/IService1/UpdateTariffServiceResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ENK.ServiceReference1.ServiceData), Action="http://tempuri.org/IService1/UpdateTariffServiceServiceDataFault", Name="ServiceData", Namespace="http://schemas.datacontract.org/2004/07/ENKService")]
        int UpdateTariffService(ENK.ServiceReference1.STariff st, int LoginID, int DistributorID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateTariffService", ReplyAction="http://tempuri.org/IService1/UpdateTariffServiceResponse")]
        System.Threading.Tasks.Task<int> UpdateTariffServiceAsync(ENK.ServiceReference1.STariff st, int LoginID, int DistributorID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetShortCodeService", ReplyAction="http://tempuri.org/IService1/GetShortCodeServiceResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ENK.ServiceReference1.ServiceData), Action="http://tempuri.org/IService1/GetShortCodeServiceServiceDataFault", Name="ServiceData", Namespace="http://schemas.datacontract.org/2004/07/ENKService")]
        System.Data.DataSet GetShortCodeService(string Condition);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetShortCodeService", ReplyAction="http://tempuri.org/IService1/GetShortCodeServiceResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetShortCodeServiceAsync(string Condition);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetTariffForActivationService", ReplyAction="http://tempuri.org/IService1/GetTariffForActivationServiceResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ENK.ServiceReference1.ServiceData), Action="http://tempuri.org/IService1/GetTariffForActivationServiceServiceDataFault", Name="ServiceData", Namespace="http://schemas.datacontract.org/2004/07/ENKService")]
        System.Data.DataSet GetTariffForActivationService(int LoginID, int DistributorID, int ClientTypeID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetTariffForActivationService", ReplyAction="http://tempuri.org/IService1/GetTariffForActivationServiceResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetTariffForActivationServiceAsync(int LoginID, int DistributorID, int ClientTypeID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateAccountBalanceServiceActivation", ReplyAction="http://tempuri.org/IService1/UpdateAccountBalanceServiceActivationResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ENK.ServiceReference1.ServiceData), Action="http://tempuri.org/IService1/UpdateAccountBalanceServiceActivationServiceDataFaul" +
            "t", Name="ServiceData", Namespace="http://schemas.datacontract.org/2004/07/ENKService")]
        int UpdateAccountBalanceServiceActivation(
                    int distributorID, 
                    int LoginID, 
                    string sim, 
                    string zipcode, 
                    string channel, 
                    string lang, 
                    int NetworkID, 
                    ENK.ServiceReference1.SPayment sp, 
                    int DataAddOnID, 
                    int InternationalID, 
                    decimal DataAddOnValue, 
                    decimal DataAddOnDiscountedAmount, 
                    decimal DataAddOnDiscountPercent, 
                    decimal InternationalCreditValue, 
                    decimal InternationalCreditDiscountedAmount, 
                    decimal InternationalCreditDiscountPercent, 
                    string MNPNO, 
                    string Serialnumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateAccountBalanceServiceActivation", ReplyAction="http://tempuri.org/IService1/UpdateAccountBalanceServiceActivationResponse")]
        System.Threading.Tasks.Task<int> UpdateAccountBalanceServiceActivationAsync(
                    int distributorID, 
                    int LoginID, 
                    string sim, 
                    string zipcode, 
                    string channel, 
                    string lang, 
                    int NetworkID, 
                    ENK.ServiceReference1.SPayment sp, 
                    int DataAddOnID, 
                    int InternationalID, 
                    decimal DataAddOnValue, 
                    decimal DataAddOnDiscountedAmount, 
                    decimal DataAddOnDiscountPercent, 
                    decimal InternationalCreditValue, 
                    decimal InternationalCreditDiscountedAmount, 
                    decimal InternationalCreditDiscountPercent, 
                    string MNPNO, 
                    string Serialnumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/InsertSubscriberActivationDetailService", ReplyAction="http://tempuri.org/IService1/InsertSubscriberActivationDetailServiceResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ENK.ServiceReference1.ServiceData), Action="http://tempuri.org/IService1/InsertSubscriberActivationDetailServiceServiceDataFa" +
            "ult", Name="ServiceData", Namespace="http://schemas.datacontract.org/2004/07/ENKService")]
        int InsertSubscriberActivationDetailService(int distributorID, int LoginID, string sim, string zipcode, string channel, string lang, ENK.ServiceReference1.SPayment sp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/InsertSubscriberActivationDetailService", ReplyAction="http://tempuri.org/IService1/InsertSubscriberActivationDetailServiceResponse")]
        System.Threading.Tasks.Task<int> InsertSubscriberActivationDetailServiceAsync(int distributorID, int LoginID, string sim, string zipcode, string channel, string lang, ENK.ServiceReference1.SPayment sp);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService1Channel : ENK.ServiceReference1.IService1, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Service1Client : System.ServiceModel.ClientBase<ENK.ServiceReference1.IService1>, ENK.ServiceReference1.IService1 {
        
        public Service1Client() {
        }
        
        public Service1Client(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public Service1Client(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Data.DataSet GetReportInventoryPurchase(int ClientID, int ClientTypeID, int LoginID, System.DateTime FromDate, System.DateTime ToDate) {
            return base.Channel.GetReportInventoryPurchase(ClientID, ClientTypeID, LoginID, FromDate, ToDate);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetReportInventoryPurchaseAsync(int ClientID, int ClientTypeID, int LoginID, System.DateTime FromDate, System.DateTime ToDate) {
            return base.Channel.GetReportInventoryPurchaseAsync(ClientID, ClientTypeID, LoginID, FromDate, ToDate);
        }
        
        public int SaveIpMapping(long DistributorID, string _IP, int chkRistrictIP) {
            return base.Channel.SaveIpMapping(DistributorID, _IP, chkRistrictIP);
        }
        
        public System.Threading.Tasks.Task<int> SaveIpMappingAsync(long DistributorID, string _IP, int chkRistrictIP) {
            return base.Channel.SaveIpMappingAsync(DistributorID, _IP, chkRistrictIP);
        }
        
        public int DeleteMappingID(int ID) {
            return base.Channel.DeleteMappingID(ID);
        }
        
        public System.Threading.Tasks.Task<int> DeleteMappingIDAsync(int ID) {
            return base.Channel.DeleteMappingIDAsync(ID);
        }
        
        public System.Data.DataTable GetRolewiseScreen(int LoginID, int RoleID) {
            return base.Channel.GetRolewiseScreen(LoginID, RoleID);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetRolewiseScreenAsync(int LoginID, int RoleID) {
            return base.Channel.GetRolewiseScreenAsync(LoginID, RoleID);
        }
        
        public System.Data.DataTable PerticularAPIDOWN(string APINAME) {
            return base.Channel.PerticularAPIDOWN(APINAME);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> PerticularAPIDOWNAsync(string APINAME) {
            return base.Channel.PerticularAPIDOWNAsync(APINAME);
        }
        
        public int SaveITRFile(System.Data.DataTable objitr, string filename) {
            return base.Channel.SaveITRFile(objitr, filename);
        }
        
        public System.Threading.Tasks.Task<int> SaveITRFileAsync(System.Data.DataTable objitr, string filename) {
            return base.Channel.SaveITRFileAsync(objitr, filename);
        }
        
        public int ProcessingManualCommission(string stepNo) {
            return base.Channel.ProcessingManualCommission(stepNo);
        }
        
        public System.Threading.Tasks.Task<int> ProcessingManualCommissionAsync(string stepNo) {
            return base.Channel.ProcessingManualCommissionAsync(stepNo);
        }
        
        public System.Data.DataSet GetCountryByAreaCode(int _AreaCode) {
            return base.Channel.GetCountryByAreaCode(_AreaCode);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetCountryByAreaCodeAsync(int _AreaCode) {
            return base.Channel.GetCountryByAreaCodeAsync(_AreaCode);
        }
        
        public System.Data.DataSet GetH2OStatesList() {
            return base.Channel.GetH2OStatesList();
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetH2OStatesListAsync() {
            return base.Channel.GetH2OStatesListAsync();
        }
        
        public System.Data.DataSet GetH2OServiceProviderList() {
            return base.Channel.GetH2OServiceProviderList();
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetH2OServiceProviderListAsync() {
            return base.Channel.GetH2OServiceProviderListAsync();
        }
        
        public System.Data.DataSet CheckTariffGroupExist(string GroupName) {
            return base.Channel.CheckTariffGroupExist(GroupName);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> CheckTariffGroupExistAsync(string GroupName) {
            return base.Channel.CheckTariffGroupExistAsync(GroupName);
        }
        
        public System.Data.DataSet ShowDashBoardDataService(int DistributorID, int ClientTypeID, int NetworkID) {
            return base.Channel.ShowDashBoardDataService(DistributorID, ClientTypeID, NetworkID);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> ShowDashBoardDataServiceAsync(int DistributorID, int ClientTypeID, int NetworkID) {
            return base.Channel.ShowDashBoardDataServiceAsync(DistributorID, ClientTypeID, NetworkID);
        }
        
        public System.Data.DataSet CheckSimActivationService(int DistributorID, int ClientTypeID, string SimNumber, string Action) {
            return base.Channel.CheckSimActivationService(DistributorID, ClientTypeID, SimNumber, Action);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> CheckSimActivationServiceAsync(int DistributorID, int ClientTypeID, string SimNumber, string Action) {
            return base.Channel.CheckSimActivationServiceAsync(DistributorID, ClientTypeID, SimNumber, Action);
        }
        
        public System.Data.DataSet CheckSimPortINService(int DistributorID, int ClientTypeID, string SimNumber) {
            return base.Channel.CheckSimPortINService(DistributorID, ClientTypeID, SimNumber);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> CheckSimPortINServiceAsync(int DistributorID, int ClientTypeID, string SimNumber) {
            return base.Channel.CheckSimPortINServiceAsync(DistributorID, ClientTypeID, SimNumber);
        }
        
        public System.Data.DataSet GetTariffSpiffDetails(string mode, int Id) {
            return base.Channel.GetTariffSpiffDetails(mode, Id);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetTariffSpiffDetailsAsync(string mode, int Id) {
            return base.Channel.GetTariffSpiffDetailsAsync(mode, Id);
        }
        
        public System.Data.DataSet ShowDashBoardActivationDataService(int DistributorID, int ClientTypeID, int loginID, string Action, int month, int year, string FromDate, string ToDate) {
            return base.Channel.ShowDashBoardActivationDataService(DistributorID, ClientTypeID, loginID, Action, month, year, FromDate, ToDate);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> ShowDashBoardActivationDataServiceAsync(int DistributorID, int ClientTypeID, int loginID, string Action, int month, int year, string FromDate, string ToDate) {
            return base.Channel.ShowDashBoardActivationDataServiceAsync(DistributorID, ClientTypeID, loginID, Action, month, year, FromDate, ToDate);
        }
        
        public int SavePOSService(int DistributorID, int LoginID, ENK.ServiceReference1.SPOS sp) {
            return base.Channel.SavePOSService(DistributorID, LoginID, sp);
        }
        
        public System.Threading.Tasks.Task<int> SavePOSServiceAsync(int DistributorID, int LoginID, ENK.ServiceReference1.SPOS sp) {
            return base.Channel.SavePOSServiceAsync(DistributorID, LoginID, sp);
        }
        
        public System.Data.DataSet ShowPOSService(int DistributorID, int ClientTypeID) {
            return base.Channel.ShowPOSService(DistributorID, ClientTypeID);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> ShowPOSServiceAsync(int DistributorID, int ClientTypeID) {
            return base.Channel.ShowPOSServiceAsync(DistributorID, ClientTypeID);
        }
        
        public int InsertVendorService(int DistributorID, int LoginID, int ClientTypeID, ENK.ServiceReference1.SVendor svn) {
            return base.Channel.InsertVendorService(DistributorID, LoginID, ClientTypeID, svn);
        }
        
        public System.Threading.Tasks.Task<int> InsertVendorServiceAsync(int DistributorID, int LoginID, int ClientTypeID, ENK.ServiceReference1.SVendor svn) {
            return base.Channel.InsertVendorServiceAsync(DistributorID, LoginID, ClientTypeID, svn);
        }
        
        public int InsertCurrencyService(string Name) {
            return base.Channel.InsertCurrencyService(Name);
        }
        
        public System.Threading.Tasks.Task<int> InsertCurrencyServiceAsync(string Name) {
            return base.Channel.InsertCurrencyServiceAsync(Name);
        }
        
        public System.Data.DataSet GetCurrencyService(int DistributorID, int ClientTypeID) {
            return base.Channel.GetCurrencyService(DistributorID, ClientTypeID);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetCurrencyServiceAsync(int DistributorID, int ClientTypeID) {
            return base.Channel.GetCurrencyServiceAsync(DistributorID, ClientTypeID);
        }
        
        public System.Data.DataSet VerifyUserIDService(int DistributorID, int ClientTypeID, int LoginID, string UserID) {
            return base.Channel.VerifyUserIDService(DistributorID, ClientTypeID, LoginID, UserID);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> VerifyUserIDServiceAsync(int DistributorID, int ClientTypeID, int LoginID, string UserID) {
            return base.Channel.VerifyUserIDServiceAsync(DistributorID, ClientTypeID, LoginID, UserID);
        }
        
        public System.Data.DataSet ForgetPasswordService(string UserID, string Mobile) {
            return base.Channel.ForgetPasswordService(UserID, Mobile);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> ForgetPasswordServiceAsync(string UserID, string Mobile) {
            return base.Channel.ForgetPasswordServiceAsync(UserID, Mobile);
        }
        
        public System.Data.DataSet ResetPasswordService(string UserID, string OldPass, string NewPass, int DistributorID, int LoginID) {
            return base.Channel.ResetPasswordService(UserID, OldPass, NewPass, DistributorID, LoginID);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> ResetPasswordServiceAsync(string UserID, string OldPass, string NewPass, int DistributorID, int LoginID) {
            return base.Channel.ResetPasswordServiceAsync(UserID, OldPass, NewPass, DistributorID, LoginID);
        }
        
        public System.Data.DataSet GetVendorListService() {
            return base.Channel.GetVendorListService();
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetVendorListServiceAsync() {
            return base.Channel.GetVendorListServiceAsync();
        }
        
        public System.Data.DataSet GetSingleTariffDetailForActivationService(int LoginID, int DistributorID, int ClientTypeID, int TariffID, int Month, string Action) {
            return base.Channel.GetSingleTariffDetailForActivationService(LoginID, DistributorID, ClientTypeID, TariffID, Month, Action);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetSingleTariffDetailForActivationServiceAsync(int LoginID, int DistributorID, int ClientTypeID, int TariffID, int Month, string Action) {
            return base.Channel.GetSingleTariffDetailForActivationServiceAsync(LoginID, DistributorID, ClientTypeID, TariffID, Month, Action);
        }
        
        public System.Data.DataSet GetSingleVendorService(ENK.ServiceReference1.SVendor sVen) {
            return base.Channel.GetSingleVendorService(sVen);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetSingleVendorServiceAsync(ENK.ServiceReference1.SVendor sVen) {
            return base.Channel.GetSingleVendorServiceAsync(sVen);
        }
        
        public int UpdateVendorService(int DistributorID, int LoginID, int ClientTypeID, ENK.ServiceReference1.SVendor svn) {
            return base.Channel.UpdateVendorService(DistributorID, LoginID, ClientTypeID, svn);
        }
        
        public System.Threading.Tasks.Task<int> UpdateVendorServiceAsync(int DistributorID, int LoginID, int ClientTypeID, ENK.ServiceReference1.SVendor svn) {
            return base.Channel.UpdateVendorServiceAsync(DistributorID, LoginID, ClientTypeID, svn);
        }
        
        public System.Data.DataTable GetTransactionIDService() {
            return base.Channel.GetTransactionIDService();
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetTransactionIDServiceAsync() {
            return base.Channel.GetTransactionIDServiceAsync();
        }
        
        public System.Data.DataSet InsertPaypalTopupService(int distributorID, int LoginID, ENK.ServiceReference1.SPayment sp) {
            return base.Channel.InsertPaypalTopupService(distributorID, LoginID, sp);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> InsertPaypalTopupServiceAsync(int distributorID, int LoginID, ENK.ServiceReference1.SPayment sp) {
            return base.Channel.InsertPaypalTopupServiceAsync(distributorID, LoginID, sp);
        }
        
        public int UpdatePaypalTopupService(int distributorID, int LoginID, ENK.ServiceReference1.SPayment sp) {
            return base.Channel.UpdatePaypalTopupService(distributorID, LoginID, sp);
        }
        
        public System.Threading.Tasks.Task<int> UpdatePaypalTopupServiceAsync(int distributorID, int LoginID, ENK.ServiceReference1.SPayment sp) {
            return base.Channel.UpdatePaypalTopupServiceAsync(distributorID, LoginID, sp);
        }
        
        public System.Data.DataSet GetTestDataService() {
            return base.Channel.GetTestDataService();
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetTestDataServiceAsync() {
            return base.Channel.GetTestDataServiceAsync();
        }
        
        public int UpdatePaypalActivationService(int distributorID, int LoginID, ENK.ServiceReference1.SPayment sp) {
            return base.Channel.UpdatePaypalActivationService(distributorID, LoginID, sp);
        }
        
        public System.Threading.Tasks.Task<int> UpdatePaypalActivationServiceAsync(int distributorID, int LoginID, ENK.ServiceReference1.SPayment sp) {
            return base.Channel.UpdatePaypalActivationServiceAsync(distributorID, LoginID, sp);
        }
        
        public int UpdatePaypalAccountBalanceService(int distributorID, int LoginID, string sim, string zipcode, string channel, string lang, ENK.ServiceReference1.SPayment sp) {
            return base.Channel.UpdatePaypalAccountBalanceService(distributorID, LoginID, sim, zipcode, channel, lang, sp);
        }
        
        public System.Threading.Tasks.Task<int> UpdatePaypalAccountBalanceServiceAsync(int distributorID, int LoginID, string sim, string zipcode, string channel, string lang, ENK.ServiceReference1.SPayment sp) {
            return base.Channel.UpdatePaypalAccountBalanceServiceAsync(distributorID, LoginID, sim, zipcode, channel, lang, sp);
        }
        
        public System.Data.DataSet GetTopupPaymentDetailsService(int distributorID, int LoginID, int ClientTypeID, string FromDate, string ToDate) {
            return base.Channel.GetTopupPaymentDetailsService(distributorID, LoginID, ClientTypeID, FromDate, ToDate);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetTopupPaymentDetailsServiceAsync(int distributorID, int LoginID, int ClientTypeID, string FromDate, string ToDate) {
            return base.Channel.GetTopupPaymentDetailsServiceAsync(distributorID, LoginID, ClientTypeID, FromDate, ToDate);
        }
        
        public System.Data.DataSet DeactivateDistirbutorService(int DistributorId, int LoginId, string Condition) {
            return base.Channel.DeactivateDistirbutorService(DistributorId, LoginId, Condition);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> DeactivateDistirbutorServiceAsync(int DistributorId, int LoginId, string Condition) {
            return base.Channel.DeactivateDistirbutorServiceAsync(DistributorId, LoginId, Condition);
        }
        
        public System.Data.DataSet GetSearch(string SerachFor, string SearchText, int ClientID, int ClientTypeID, string EmailID, string DateType, System.DateTime FromDate, System.DateTime ToDate) {
            return base.Channel.GetSearch(SerachFor, SearchText, ClientID, ClientTypeID, EmailID, DateType, FromDate, ToDate);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetSearchAsync(string SerachFor, string SearchText, int ClientID, int ClientTypeID, string EmailID, string DateType, System.DateTime FromDate, System.DateTime ToDate) {
            return base.Channel.GetSearchAsync(SerachFor, SearchText, ClientID, ClientTypeID, EmailID, DateType, FromDate, ToDate);
        }
        
        public int ChangeStatusForTopUp(int distributorID, int LoginID, int ClientTypeID, long PaymentID, int StatusManual, string SRemark) {
            return base.Channel.ChangeStatusForTopUp(distributorID, LoginID, ClientTypeID, PaymentID, StatusManual, SRemark);
        }
        
        public System.Threading.Tasks.Task<int> ChangeStatusForTopUpAsync(int distributorID, int LoginID, int ClientTypeID, long PaymentID, int StatusManual, string SRemark) {
            return base.Channel.ChangeStatusForTopUpAsync(distributorID, LoginID, ClientTypeID, PaymentID, StatusManual, SRemark);
        }
        
        public System.Data.DataSet GetDistributorofMappingwithPlan(int TariffID) {
            return base.Channel.GetDistributorofMappingwithPlan(TariffID);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetDistributorofMappingwithPlanAsync(int TariffID) {
            return base.Channel.GetDistributorofMappingwithPlanAsync(TariffID);
        }
        
        public int SaveDistributorofMappingwithPlan(decimal Rental, System.Data.DataTable dt, int TariffID) {
            return base.Channel.SaveDistributorofMappingwithPlan(Rental, dt, TariffID);
        }
        
        public System.Threading.Tasks.Task<int> SaveDistributorofMappingwithPlanAsync(decimal Rental, System.Data.DataTable dt, int TariffID) {
            return base.Channel.SaveDistributorofMappingwithPlanAsync(Rental, dt, TariffID);
        }
        
        public System.Data.DataSet GetImportFileDetailsService(System.Data.DataTable dt, string Action) {
            return base.Channel.GetImportFileDetailsService(dt, Action);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetImportFileDetailsServiceAsync(System.Data.DataTable dt, string Action) {
            return base.Channel.GetImportFileDetailsServiceAsync(dt, Action);
        }
        
        public System.Data.DataSet GetReportTopup(int ClientID, int ClientTypeID, int LoginID, System.DateTime FromDate, System.DateTime ToDate) {
            return base.Channel.GetReportTopup(ClientID, ClientTypeID, LoginID, FromDate, ToDate);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetReportTopupAsync(int ClientID, int ClientTypeID, int LoginID, System.DateTime FromDate, System.DateTime ToDate) {
            return base.Channel.GetReportTopupAsync(ClientID, ClientTypeID, LoginID, FromDate, ToDate);
        }
        
        public System.Data.DataSet GetReportTopupLedger(int ClientID, int ClientTypeID, System.DateTime FromDate, System.DateTime ToDate) {
            return base.Channel.GetReportTopupLedger(ClientID, ClientTypeID, FromDate, ToDate);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetReportTopupLedgerAsync(int ClientID, int ClientTypeID, System.DateTime FromDate, System.DateTime ToDate) {
            return base.Channel.GetReportTopupLedgerAsync(ClientID, ClientTypeID, FromDate, ToDate);
        }
        
        public System.Data.DataSet GetLedgerReport(int ClientID, int ClientTypeID, System.DateTime FromDate, System.DateTime ToDate) {
            return base.Channel.GetLedgerReport(ClientID, ClientTypeID, FromDate, ToDate);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetLedgerReportAsync(int ClientID, int ClientTypeID, System.DateTime FromDate, System.DateTime ToDate) {
            return base.Channel.GetLedgerReportAsync(ClientID, ClientTypeID, FromDate, ToDate);
        }
        
        public System.Data.DataSet SaveAndSendNotification(long LoginID, long DistributorID, System.Data.DataTable dt, string NotificationText, string Status, string Action, int id) {
            return base.Channel.SaveAndSendNotification(LoginID, DistributorID, dt, NotificationText, Status, Action, id);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> SaveAndSendNotificationAsync(long LoginID, long DistributorID, System.Data.DataTable dt, string NotificationText, string Status, string Action, int id) {
            return base.Channel.SaveAndSendNotificationAsync(LoginID, DistributorID, dt, NotificationText, Status, Action, id);
        }
        
        public System.Data.DataSet SaveProductMaster(int NetworkID, int ProductID, string ShortName, string ProductDescription, string Currency, string Amount, int CreatedBy) {
            return base.Channel.SaveProductMaster(NetworkID, ProductID, ShortName, ProductDescription, Currency, Amount, CreatedBy);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> SaveProductMasterAsync(int NetworkID, int ProductID, string ShortName, string ProductDescription, string Currency, string Amount, int CreatedBy) {
            return base.Channel.SaveProductMasterAsync(NetworkID, ProductID, ShortName, ProductDescription, Currency, Amount, CreatedBy);
        }
        
        public System.Data.DataSet SaveTransactionDetails(int NetworkID, int ProductID, string TransactionType, string ProductPinID, string SIMNumber, string InvoiveNumber, string Amount, string Currency, string City, string Zip, string NPA, int CreatedBy, string ChargeAmount) {
            return base.Channel.SaveTransactionDetails(NetworkID, ProductID, TransactionType, ProductPinID, SIMNumber, InvoiveNumber, Amount, Currency, City, Zip, NPA, CreatedBy, ChargeAmount);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> SaveTransactionDetailsAsync(int NetworkID, int ProductID, string TransactionType, string ProductPinID, string SIMNumber, string InvoiveNumber, string Amount, string Currency, string City, string Zip, string NPA, int CreatedBy, string ChargeAmount) {
            return base.Channel.SaveTransactionDetailsAsync(NetworkID, ProductID, TransactionType, ProductPinID, SIMNumber, InvoiveNumber, Amount, Currency, City, Zip, NPA, CreatedBy, ChargeAmount);
        }
        
        public System.Data.DataSet GetTariffGroupService(int LoginID, int DistributorID) {
            return base.Channel.GetTariffGroupService(LoginID, DistributorID);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetTariffGroupServiceAsync(int LoginID, int DistributorID) {
            return base.Channel.GetTariffGroupServiceAsync(LoginID, DistributorID);
        }
        
        public System.Data.DataSet GetTariffGroupViewService(int TariffID) {
            return base.Channel.GetTariffGroupViewService(TariffID);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetTariffGroupViewServiceAsync(int TariffID) {
            return base.Channel.GetTariffGroupViewServiceAsync(TariffID);
        }
        
        public int AddNewTariffService(ENK.ServiceReference1.STariff st, int LoginID, int DistributorID) {
            return base.Channel.AddNewTariffService(st, LoginID, DistributorID);
        }
        
        public System.Threading.Tasks.Task<int> AddNewTariffServiceAsync(ENK.ServiceReference1.STariff st, int LoginID, int DistributorID) {
            return base.Channel.AddNewTariffServiceAsync(st, LoginID, DistributorID);
        }
        
        public int UpdateTariffGroupService(ENK.ServiceReference1.STariff st, int LoginID, int DistributorID) {
            return base.Channel.UpdateTariffGroupService(st, LoginID, DistributorID);
        }
        
        public System.Threading.Tasks.Task<int> UpdateTariffGroupServiceAsync(ENK.ServiceReference1.STariff st, int LoginID, int DistributorID) {
            return base.Channel.UpdateTariffGroupServiceAsync(st, LoginID, DistributorID);
        }
        
        public void UpdateAccountBalanceAfterCancelPortIn(string MNPRefNum, string POrtInCancelReq, string PortInCancelResp, int UserId) {
            base.Channel.UpdateAccountBalanceAfterCancelPortIn(MNPRefNum, POrtInCancelReq, PortInCancelResp, UserId);
        }
        
        public System.Threading.Tasks.Task UpdateAccountBalanceAfterCancelPortInAsync(string MNPRefNum, string POrtInCancelReq, string PortInCancelResp, int UserId) {
            return base.Channel.UpdateAccountBalanceAfterCancelPortInAsync(MNPRefNum, POrtInCancelReq, PortInCancelResp, UserId);
        }
        
        public System.Data.DataSet GetPrintRecipt(string tansactionId) {
            return base.Channel.GetPrintRecipt(tansactionId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetPrintReciptAsync(string tansactionId) {
            return base.Channel.GetPrintReciptAsync(tansactionId);
        }
        
        public System.Data.DataSet GetMsimDetails(string MSIM, string MNPNo) {
            return base.Channel.GetMsimDetails(MSIM, MNPNo);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetMsimDetailsAsync(string MSIM, string MNPNo) {
            return base.Channel.GetMsimDetailsAsync(MSIM, MNPNo);
        }
        
        public void SaveModifiedPortinDetails(string Request, string APIResponse, System.DateTime RequestedTime, int Requestedby, string MSISDN) {
            base.Channel.SaveModifiedPortinDetails(Request, APIResponse, RequestedTime, Requestedby, MSISDN);
        }
        
        public System.Threading.Tasks.Task SaveModifiedPortinDetailsAsync(string Request, string APIResponse, System.DateTime RequestedTime, int Requestedby, string MSISDN) {
            return base.Channel.SaveModifiedPortinDetailsAsync(Request, APIResponse, RequestedTime, Requestedby, MSISDN);
        }
        
        public System.Data.DataSet GetAddOnANDInternationCreadit() {
            return base.Channel.GetAddOnANDInternationCreadit();
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetAddOnANDInternationCreaditAsync() {
            return base.Channel.GetAddOnANDInternationCreaditAsync();
        }
        
        public System.Data.DataSet GetDiscountAndRental(int DistributorID, int tariffID) {
            return base.Channel.GetDiscountAndRental(DistributorID, tariffID);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetDiscountAndRentalAsync(int DistributorID, int tariffID) {
            return base.Channel.GetDiscountAndRentalAsync(DistributorID, tariffID);
        }
        
        public int UpdateAccountBalanceService(int distributorID, int LoginID, string sim, string zipcode, string channel, string lang, ENK.ServiceReference1.SPayment sp) {
            return base.Channel.UpdateAccountBalanceService(distributorID, LoginID, sim, zipcode, channel, lang, sp);
        }
        
        public System.Threading.Tasks.Task<int> UpdateAccountBalanceServiceAsync(int distributorID, int LoginID, string sim, string zipcode, string channel, string lang, ENK.ServiceReference1.SPayment sp) {
            return base.Channel.UpdateAccountBalanceServiceAsync(distributorID, LoginID, sim, zipcode, channel, lang, sp);
        }
        
        public System.Data.DataSet CHECKDistributor(string UserID) {
            return base.Channel.CHECKDistributor(UserID);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> CHECKDistributorAsync(string UserID) {
            return base.Channel.CHECKDistributorAsync(UserID);
        }
        
        public System.Data.DataSet ValidatePreloadedSim(string SimNumber) {
            return base.Channel.ValidatePreloadedSim(SimNumber);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> ValidatePreloadedSimAsync(string SimNumber) {
            return base.Channel.ValidatePreloadedSimAsync(SimNumber);
        }
        
        public System.Data.DataSet GetTariffForActivation_ForSubscriber(string simnumber) {
            return base.Channel.GetTariffForActivation_ForSubscriber(simnumber);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetTariffForActivation_ForSubscriberAsync(string simnumber) {
            return base.Channel.GetTariffForActivation_ForSubscriberAsync(simnumber);
        }
        
        public System.Data.DataSet GetInventoryBulkTransfer1(int ClientID, System.Data.DataTable SIMDt) {
            return base.Channel.GetInventoryBulkTransfer1(ClientID, SIMDt);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetInventoryBulkTransfer1Async(int ClientID, System.Data.DataTable SIMDt) {
            return base.Channel.GetInventoryBulkTransfer1Async(ClientID, SIMDt);
        }
        
        public System.Data.DataSet GetDistributor1(int UserId, int Distrib) {
            return base.Channel.GetDistributor1(UserId, Distrib);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetDistributor1Async(int UserId, int Distrib) {
            return base.Channel.GetDistributor1Async(UserId, Distrib);
        }
        
        public System.Data.DataSet GetActivationsWithoutMSISDN() {
            return base.Channel.GetActivationsWithoutMSISDN();
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetActivationsWithoutMSISDNAsync() {
            return base.Channel.GetActivationsWithoutMSISDNAsync();
        }
        
        public void UpdateActivationMSISDN(long ActivationID, string MSISDN) {
            base.Channel.UpdateActivationMSISDN(ActivationID, MSISDN);
        }
        
        public System.Threading.Tasks.Task UpdateActivationMSISDNAsync(long ActivationID, string MSISDN) {
            return base.Channel.UpdateActivationMSISDNAsync(ActivationID, MSISDN);
        }
        
        public System.Data.DataSet GetNotification(long DistributorID, int MsgID) {
            return base.Channel.GetNotification(DistributorID, MsgID);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetNotificationAsync(long DistributorID, int MsgID) {
            return base.Channel.GetNotificationAsync(DistributorID, MsgID);
        }
        
        public System.Data.DataSet ViewNotification(long Createdby, int MsgID) {
            return base.Channel.ViewNotification(Createdby, MsgID);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> ViewNotificationAsync(long Createdby, int MsgID) {
            return base.Channel.ViewNotificationAsync(Createdby, MsgID);
        }
        
        public System.Data.DataSet FetchContactDetail(int Distributorid) {
            return base.Channel.FetchContactDetail(Distributorid);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> FetchContactDetailAsync(int Distributorid) {
            return base.Channel.FetchContactDetailAsync(Distributorid);
        }
        
        public System.Data.DataSet GetRandomPassword(long DistributorID) {
            return base.Channel.GetRandomPassword(DistributorID);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetRandomPasswordAsync(long DistributorID) {
            return base.Channel.GetRandomPasswordAsync(DistributorID);
        }
        
        public System.Data.DataSet SaveRandomPassword(long DistributorID, string Password) {
            return base.Channel.SaveRandomPassword(DistributorID, Password);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> SaveRandomPasswordAsync(long DistributorID, string Password) {
            return base.Channel.SaveRandomPasswordAsync(DistributorID, Password);
        }
        
        public System.Data.DataSet GetCommissionDetail(long DistributorID, int Month, int Year, string MonthYear) {
            return base.Channel.GetCommissionDetail(DistributorID, Month, Year, MonthYear);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetCommissionDetailAsync(long DistributorID, int Month, int Year, string MonthYear) {
            return base.Channel.GetCommissionDetailAsync(DistributorID, Month, Year, MonthYear);
        }
        
        public int VerifySimNumber(string OldSimNumber, string NewSimNumber) {
            return base.Channel.VerifySimNumber(OldSimNumber, NewSimNumber);
        }
        
        public System.Threading.Tasks.Task<int> VerifySimNumberAsync(string OldSimNumber, string NewSimNumber) {
            return base.Channel.VerifySimNumberAsync(OldSimNumber, NewSimNumber);
        }
        
        public int UpdateSwapSim(string MSISDN, string OldSimNumber, string NewSimNumber, long Createdby) {
            return base.Channel.UpdateSwapSim(MSISDN, OldSimNumber, NewSimNumber, Createdby);
        }
        
        public System.Threading.Tasks.Task<int> UpdateSwapSimAsync(string MSISDN, string OldSimNumber, string NewSimNumber, long Createdby) {
            return base.Channel.UpdateSwapSimAsync(MSISDN, OldSimNumber, NewSimNumber, Createdby);
        }
        
        public System.Data.DataSet FetchInventory(int ClientID, string Action, string SimNumber, string FromSim, string ToSim, int NetworkID) {
            return base.Channel.FetchInventory(ClientID, Action, SimNumber, FromSim, ToSim, NetworkID);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> FetchInventoryAsync(int ClientID, string Action, string SimNumber, string FromSim, string ToSim, int NetworkID) {
            return base.Channel.FetchInventoryAsync(ClientID, Action, SimNumber, FromSim, ToSim, NetworkID);
        }
        
        public int SwapSimRequest(string MSISDN, string OldSimNumber, string NewSimNumber, int Createdby, string Request, string Response, string Status) {
            return base.Channel.SwapSimRequest(MSISDN, OldSimNumber, NewSimNumber, Createdby, Request, Response, Status);
        }
        
        public System.Threading.Tasks.Task<int> SwapSimRequestAsync(string MSISDN, string OldSimNumber, string NewSimNumber, int Createdby, string Request, string Response, string Status) {
            return base.Channel.SwapSimRequestAsync(MSISDN, OldSimNumber, NewSimNumber, Createdby, Request, Response, Status);
        }
        
        public int UpdateHoldStatus(long DistributorID, int HoldStatus, string HoldReason) {
            return base.Channel.UpdateHoldStatus(DistributorID, HoldStatus, HoldReason);
        }
        
        public System.Threading.Tasks.Task<int> UpdateHoldStatusAsync(long DistributorID, int HoldStatus, string HoldReason) {
            return base.Channel.UpdateHoldStatusAsync(DistributorID, HoldStatus, HoldReason);
        }
        
        public int UpdateTopupOption(long DistributorID, decimal MinTopup, decimal MaxTopup, decimal PaypalTax, string PaypalTaxType) {
            return base.Channel.UpdateTopupOption(DistributorID, MinTopup, MaxTopup, PaypalTax, PaypalTaxType);
        }
        
        public System.Threading.Tasks.Task<int> UpdateTopupOptionAsync(long DistributorID, decimal MinTopup, decimal MaxTopup, decimal PaypalTax, string PaypalTaxType) {
            return base.Channel.UpdateTopupOptionAsync(DistributorID, MinTopup, MaxTopup, PaypalTax, PaypalTaxType);
        }
        
        public System.Data.DataSet RechargeActivationCancelDetail(string MSISDN, string SerialNumber, string Action) {
            return base.Channel.RechargeActivationCancelDetail(MSISDN, SerialNumber, Action);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> RechargeActivationCancelDetailAsync(string MSISDN, string SerialNumber, string Action) {
            return base.Channel.RechargeActivationCancelDetailAsync(MSISDN, SerialNumber, Action);
        }
        
        public int SaveRechargeActivationCancelDetails(int ID, string MSISDN, int TariffID, decimal Rental, decimal RegulatoryFee, string CancelType, short CancelMonth) {
            return base.Channel.SaveRechargeActivationCancelDetails(ID, MSISDN, TariffID, Rental, RegulatoryFee, CancelType, CancelMonth);
        }
        
        public System.Threading.Tasks.Task<int> SaveRechargeActivationCancelDetailsAsync(int ID, string MSISDN, int TariffID, decimal Rental, decimal RegulatoryFee, string CancelType, short CancelMonth) {
            return base.Channel.SaveRechargeActivationCancelDetailsAsync(ID, MSISDN, TariffID, Rental, RegulatoryFee, CancelType, CancelMonth);
        }
        
        public System.Data.DataSet GetHoldReason(long DistributorID) {
            return base.Channel.GetHoldReason(DistributorID);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetHoldReasonAsync(long DistributorID) {
            return base.Channel.GetHoldReasonAsync(DistributorID);
        }
        
        public System.Data.DataSet GetRechargeActivationCancelReport(System.DateTime FromDate, System.DateTime ToDate) {
            return base.Channel.GetRechargeActivationCancelReport(FromDate, ToDate);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetRechargeActivationCancelReportAsync(System.DateTime FromDate, System.DateTime ToDate) {
            return base.Channel.GetRechargeActivationCancelReportAsync(FromDate, ToDate);
        }
        
        public System.Data.DataSet GetImageUrl(int ImgFlag) {
            return base.Channel.GetImageUrl(ImgFlag);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetImageUrlAsync(int ImgFlag) {
            return base.Channel.GetImageUrlAsync(ImgFlag);
        }
        
        public int pGetImeurl(string Url, int ImgFlag) {
            return base.Channel.pGetImeurl(Url, ImgFlag);
        }
        
        public System.Threading.Tasks.Task<int> pGetImeurlAsync(string Url, int ImgFlag) {
            return base.Channel.pGetImeurlAsync(Url, ImgFlag);
        }
        
        public System.Data.DataSet DeleteImage(int ImageID) {
            return base.Channel.DeleteImage(ImageID);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> DeleteImageAsync(int ImageID) {
            return base.Channel.DeleteImageAsync(ImageID);
        }
        
        public System.Data.DataSet getImage1FromDB(int ImgFlag) {
            return base.Channel.getImage1FromDB(ImgFlag);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> getImage1FromDBAsync(int ImgFlag) {
            return base.Channel.getImage1FromDBAsync(ImgFlag);
        }
        
        public System.Data.DataSet pUpdateImagePosition(int ImageID, int Position) {
            return base.Channel.pUpdateImagePosition(ImageID, Position);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> pUpdateImagePositionAsync(int ImageID, int Position) {
            return base.Channel.pUpdateImagePositionAsync(ImageID, Position);
        }
        
        public System.Data.DataSet GetApiDetail(long DistributorID) {
            return base.Channel.GetApiDetail(DistributorID);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetApiDetailAsync(long DistributorID) {
            return base.Channel.GetApiDetailAsync(DistributorID);
        }
        
        public int SaveApiMapping(long DistributorID, int clientcode, System.Data.DataTable dtApi, int chkApiStatus) {
            return base.Channel.SaveApiMapping(DistributorID, clientcode, dtApi, chkApiStatus);
        }
        
        public System.Threading.Tasks.Task<int> SaveApiMappingAsync(long DistributorID, int clientcode, System.Data.DataTable dtApi, int chkApiStatus) {
            return base.Channel.SaveApiMappingAsync(DistributorID, clientcode, dtApi, chkApiStatus);
        }
        
        public System.Data.DataSet CheckSimAndMobileExistance(string SimNumber, string MobileNumber) {
            return base.Channel.CheckSimAndMobileExistance(SimNumber, MobileNumber);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> CheckSimAndMobileExistanceAsync(string SimNumber, string MobileNumber) {
            return base.Channel.CheckSimAndMobileExistanceAsync(SimNumber, MobileNumber);
        }
        
        public System.Data.DataSet GetTransactionReport(System.DateTime FromDate, System.DateTime ToDate) {
            return base.Channel.GetTransactionReport(FromDate, ToDate);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetTransactionReportAsync(System.DateTime FromDate, System.DateTime ToDate) {
            return base.Channel.GetTransactionReportAsync(FromDate, ToDate);
        }
        
        public ENK.ServiceReference1.Distributor[] GetDistributorServiceWithDate(int Userid, int Distributorid, string TaxDocument, string ResellerCertificate, System.DateTime FromDate, System.DateTime ToDate) {
            return base.Channel.GetDistributorServiceWithDate(Userid, Distributorid, TaxDocument, ResellerCertificate, FromDate, ToDate);
        }
        
        public System.Threading.Tasks.Task<ENK.ServiceReference1.Distributor[]> GetDistributorServiceWithDateAsync(int Userid, int Distributorid, string TaxDocument, string ResellerCertificate, System.DateTime FromDate, System.DateTime ToDate) {
            return base.Channel.GetDistributorServiceWithDateAsync(Userid, Distributorid, TaxDocument, ResellerCertificate, FromDate, ToDate);
        }
        
        public System.Data.DataSet GetDistributorInformation(int Distributorid) {
            return base.Channel.GetDistributorInformation(Distributorid);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetDistributorInformationAsync(int Distributorid) {
            return base.Channel.GetDistributorInformationAsync(Distributorid);
        }
        
        public System.Data.DataSet CountActivationPreloaded(int DistributorID, int ClientTypeID, int loginID, int month, int year, int NetworkID) {
            return base.Channel.CountActivationPreloaded(DistributorID, ClientTypeID, loginID, month, year, NetworkID);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> CountActivationPreloadedAsync(int DistributorID, int ClientTypeID, int loginID, int month, int year, int NetworkID) {
            return base.Channel.CountActivationPreloadedAsync(DistributorID, ClientTypeID, loginID, month, year, NetworkID);
        }
        
        public System.Data.DataSet checkTaxId(string taxId, long distributorID) {
            return base.Channel.checkTaxId(taxId, distributorID);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> checkTaxIdAsync(string taxId, long distributorID) {
            return base.Channel.checkTaxIdAsync(taxId, distributorID);
        }
        
        public System.Data.DataSet GetCurrentbalance(int DistributorID) {
            return base.Channel.GetCurrentbalance(DistributorID);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetCurrentbalanceAsync(int DistributorID) {
            return base.Channel.GetCurrentbalanceAsync(DistributorID);
        }
        
        public System.Data.DataSet GETLEVELDistributor(int distributorID, int treeLevel) {
            return base.Channel.GETLEVELDistributor(distributorID, treeLevel);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GETLEVELDistributorAsync(int distributorID, int treeLevel) {
            return base.Channel.GETLEVELDistributorAsync(distributorID, treeLevel);
        }
        
        public int UpdateAccountDingRecharge(
                    int distributorID, 
                    int LoginID, 
                    string MobileNumber, 
                    string channel, 
                    string lang, 
                    ENK.ServiceReference1.SPayment sp, 
                    string SkuTariffCode, 
                    string TariffDescription, 
                    string TransferRef, 
                    decimal TxnAmount, 
                    string RespCode, 
                    string RespMsg, 
                    string TxnDate, 
                    string Country, 
                    string Operator, 
                    string SendCurrencyIso) {
            return base.Channel.UpdateAccountDingRecharge(distributorID, LoginID, MobileNumber, channel, lang, sp, SkuTariffCode, TariffDescription, TransferRef, TxnAmount, RespCode, RespMsg, TxnDate, Country, Operator, SendCurrencyIso);
        }
        
        public System.Threading.Tasks.Task<int> UpdateAccountDingRechargeAsync(
                    int distributorID, 
                    int LoginID, 
                    string MobileNumber, 
                    string channel, 
                    string lang, 
                    ENK.ServiceReference1.SPayment sp, 
                    string SkuTariffCode, 
                    string TariffDescription, 
                    string TransferRef, 
                    decimal TxnAmount, 
                    string RespCode, 
                    string RespMsg, 
                    string TxnDate, 
                    string Country, 
                    string Operator, 
                    string SendCurrencyIso) {
            return base.Channel.UpdateAccountDingRechargeAsync(distributorID, LoginID, MobileNumber, channel, lang, sp, SkuTariffCode, TariffDescription, TransferRef, TxnAmount, RespCode, RespMsg, TxnDate, Country, Operator, SendCurrencyIso);
        }
        
        public System.Data.DataTable GetCountriesForDing() {
            return base.Channel.GetCountriesForDing();
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetCountriesForDingAsync() {
            return base.Channel.GetCountriesForDingAsync();
        }
        
        public System.Data.DataTable OperatorAginstCountry(string countryISO) {
            return base.Channel.OperatorAginstCountry(countryISO);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> OperatorAginstCountryAsync(string countryISO) {
            return base.Channel.OperatorAginstCountryAsync(countryISO);
        }
        
        public int StoredAPIRequestBeforeCall(string Title, string Request, int DistributorId, string TransactionID, string Msisdn, string SIMNumber) {
            return base.Channel.StoredAPIRequestBeforeCall(Title, Request, DistributorId, TransactionID, Msisdn, SIMNumber);
        }
        
        public System.Threading.Tasks.Task<int> StoredAPIRequestBeforeCallAsync(string Title, string Request, int DistributorId, string TransactionID, string Msisdn, string SIMNumber) {
            return base.Channel.StoredAPIRequestBeforeCallAsync(Title, Request, DistributorId, TransactionID, Msisdn, SIMNumber);
        }
        
        public System.Data.DataTable CheckDuplicateRecharge(string MSISDN, int TariffID, int DistributorId) {
            return base.Channel.CheckDuplicateRecharge(MSISDN, TariffID, DistributorId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> CheckDuplicateRechargeAsync(string MSISDN, int TariffID, int DistributorId) {
            return base.Channel.CheckDuplicateRechargeAsync(MSISDN, TariffID, DistributorId);
        }
        
        public System.Data.DataSet CheckAlreadySuccessfullPortIn(string SimNumber, string PhoneNumber) {
            return base.Channel.CheckAlreadySuccessfullPortIn(SimNumber, PhoneNumber);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> CheckAlreadySuccessfullPortInAsync(string SimNumber, string PhoneNumber) {
            return base.Channel.CheckAlreadySuccessfullPortInAsync(SimNumber, PhoneNumber);
        }
        
        public System.Data.DataSet GetInventory1(int ClientID, string Action, string SimNumber, string FromSimNumber, string ToSimNumber) {
            return base.Channel.GetInventory1(ClientID, Action, SimNumber, FromSimNumber, ToSimNumber);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetInventory1Async(int ClientID, string Action, string SimNumber, string FromSimNumber, string ToSimNumber) {
            return base.Channel.GetInventory1Async(ClientID, Action, SimNumber, FromSimNumber, ToSimNumber);
        }
        
        public System.Data.DataTable GetIPMapping(int Distributorid) {
            return base.Channel.GetIPMapping(Distributorid);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetIPMappingAsync(int Distributorid) {
            return base.Channel.GetIPMappingAsync(Distributorid);
        }
        
        public System.Data.DataSet GetImportFile(string xmlSTR) {
            return base.Channel.GetImportFile(xmlSTR);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetImportFileAsync(string xmlSTR) {
            return base.Channel.GetImportFileAsync(xmlSTR);
        }
        
        public int SaveTariffGroupSpiffMapping(ENK.ServiceReference1.STariff st, int LoginID, int TariffGroupId, string Action, decimal RechargeCommission, decimal H2ORechargeDiscount, decimal Comission, decimal H2OGeneralDiscount) {
            return base.Channel.SaveTariffGroupSpiffMapping(st, LoginID, TariffGroupId, Action, RechargeCommission, H2ORechargeDiscount, Comission, H2OGeneralDiscount);
        }
        
        public System.Threading.Tasks.Task<int> SaveTariffGroupSpiffMappingAsync(ENK.ServiceReference1.STariff st, int LoginID, int TariffGroupId, string Action, decimal RechargeCommission, decimal H2ORechargeDiscount, decimal Comission, decimal H2OGeneralDiscount) {
            return base.Channel.SaveTariffGroupSpiffMappingAsync(st, LoginID, TariffGroupId, Action, RechargeCommission, H2ORechargeDiscount, Comission, H2OGeneralDiscount);
        }
        
        public System.Data.DataSet GetRegulatery() {
            return base.Channel.GetRegulatery();
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetRegulateryAsync() {
            return base.Channel.GetRegulateryAsync();
        }
        
        public System.Data.DataSet GetDistributorNotes(int ClientID, int ClientTypeID) {
            return base.Channel.GetDistributorNotes(ClientID, ClientTypeID);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetDistributorNotesAsync(int ClientID, int ClientTypeID) {
            return base.Channel.GetDistributorNotesAsync(ClientID, ClientTypeID);
        }
        
        public System.Data.DataSet GetStockTransferReport(int ClientID, int ClientTypeID, System.DateTime fromDate, System.DateTime Todate) {
            return base.Channel.GetStockTransferReport(ClientID, ClientTypeID, fromDate, Todate);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetStockTransferReportAsync(int ClientID, int ClientTypeID, System.DateTime fromDate, System.DateTime Todate) {
            return base.Channel.GetStockTransferReportAsync(ClientID, ClientTypeID, fromDate, Todate);
        }
        
        public int SaveDistributorNotes(int DistributorID, string Notes, int LoginID) {
            return base.Channel.SaveDistributorNotes(DistributorID, Notes, LoginID);
        }
        
        public System.Threading.Tasks.Task<int> SaveDistributorNotesAsync(int DistributorID, string Notes, int LoginID) {
            return base.Channel.SaveDistributorNotesAsync(DistributorID, Notes, LoginID);
        }
        
        public int UpdateStatusActivation(int ActivationID, int LoginID) {
            return base.Channel.UpdateStatusActivation(ActivationID, LoginID);
        }
        
        public System.Threading.Tasks.Task<int> UpdateStatusActivationAsync(int ActivationID, int LoginID) {
            return base.Channel.UpdateStatusActivationAsync(ActivationID, LoginID);
        }
        
        public int ResetSubscriberPassword(string UserID, string Password) {
            return base.Channel.ResetSubscriberPassword(UserID, Password);
        }
        
        public System.Threading.Tasks.Task<int> ResetSubscriberPasswordAsync(string UserID, string Password) {
            return base.Channel.ResetSubscriberPasswordAsync(UserID, Password);
        }
        
        public System.Data.DataSet GetReportAcivationFail(int ClientID, int ClientTypeID, int LoginID, System.DateTime FromDate, System.DateTime ToDate) {
            return base.Channel.GetReportAcivationFail(ClientID, ClientTypeID, LoginID, FromDate, ToDate);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetReportAcivationFailAsync(int ClientID, int ClientTypeID, int LoginID, System.DateTime FromDate, System.DateTime ToDate) {
            return base.Channel.GetReportAcivationFailAsync(ClientID, ClientTypeID, LoginID, FromDate, ToDate);
        }
        
        public int UpdateStatusRecharge(int RechargeID, int LoginID) {
            return base.Channel.UpdateStatusRecharge(RechargeID, LoginID);
        }
        
        public System.Threading.Tasks.Task<int> UpdateStatusRechargeAsync(int RechargeID, int LoginID) {
            return base.Channel.UpdateStatusRechargeAsync(RechargeID, LoginID);
        }
        
        public System.Data.DataSet GetRechargeFailReport(int ClientID, int ClientTypeID, int LoginID, System.DateTime FromDate, System.DateTime ToDate, string RechargeVia) {
            return base.Channel.GetRechargeFailReport(ClientID, ClientTypeID, LoginID, FromDate, ToDate, RechargeVia);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetRechargeFailReportAsync(int ClientID, int ClientTypeID, int LoginID, System.DateTime FromDate, System.DateTime ToDate, string RechargeVia) {
            return base.Channel.GetRechargeFailReportAsync(ClientID, ClientTypeID, LoginID, FromDate, ToDate, RechargeVia);
        }
        
        public System.Data.DataSet UpdateBulkNetwork(int NetworkID, System.Data.DataTable dt) {
            return base.Channel.UpdateBulkNetwork(NetworkID, dt);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> UpdateBulkNetworkAsync(int NetworkID, System.Data.DataTable dt) {
            return base.Channel.UpdateBulkNetworkAsync(NetworkID, dt);
        }
        
        public System.Data.DataSet CheckDuplicatePaypalTxnID(string TxnID) {
            return base.Channel.CheckDuplicatePaypalTxnID(TxnID);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> CheckDuplicatePaypalTxnIDAsync(string TxnID) {
            return base.Channel.CheckDuplicatePaypalTxnIDAsync(TxnID);
        }
        
        public System.Data.DataSet CheckSimNumber(int NetworkID, System.Data.DataTable dt) {
            return base.Channel.CheckSimNumber(NetworkID, dt);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> CheckSimNumberAsync(int NetworkID, System.Data.DataTable dt) {
            return base.Channel.CheckSimNumberAsync(NetworkID, dt);
        }
        
        public System.Data.DataSet GetDistributor(int Distributorid) {
            return base.Channel.GetDistributor(Distributorid);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetDistributorAsync(int Distributorid) {
            return base.Channel.GetDistributorAsync(Distributorid);
        }
        
        public int SaveDistributorRechageBulk(decimal Rental, System.Data.DataTable dt, int NetworkID) {
            return base.Channel.SaveDistributorRechageBulk(Rental, dt, NetworkID);
        }
        
        public System.Threading.Tasks.Task<int> SaveDistributorRechageBulkAsync(decimal Rental, System.Data.DataTable dt, int NetworkID) {
            return base.Channel.SaveDistributorRechageBulkAsync(Rental, dt, NetworkID);
        }
        
        public System.Data.DataSet GetLoginHistory(System.DateTime FromDate, System.DateTime ToDate, int DistributorID) {
            return base.Channel.GetLoginHistory(FromDate, ToDate, DistributorID);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetLoginHistoryAsync(System.DateTime FromDate, System.DateTime ToDate, int DistributorID) {
            return base.Channel.GetLoginHistoryAsync(FromDate, ToDate, DistributorID);
        }
        
        public System.Data.DataSet GetReportDeduct(int ClientID, int ClientTypeID, int LoginID, System.DateTime FromDate, System.DateTime ToDate) {
            return base.Channel.GetReportDeduct(ClientID, ClientTypeID, LoginID, FromDate, ToDate);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetReportDeductAsync(int ClientID, int ClientTypeID, int LoginID, System.DateTime FromDate, System.DateTime ToDate) {
            return base.Channel.GetReportDeductAsync(ClientID, ClientTypeID, LoginID, FromDate, ToDate);
        }
        
        public int SaveRechageRequest(int NetworkID, int TariffID, string SerialNumber, string ZipCode, string RechargeRequest, string EmailID, string City, decimal Amount, decimal TaxAmount, decimal TotalAmount, decimal Regulatery, int CreatedBy, int DistributorID) {
            return base.Channel.SaveRechageRequest(NetworkID, TariffID, SerialNumber, ZipCode, RechargeRequest, EmailID, City, Amount, TaxAmount, TotalAmount, Regulatery, CreatedBy, DistributorID);
        }
        
        public System.Threading.Tasks.Task<int> SaveRechageRequestAsync(int NetworkID, int TariffID, string SerialNumber, string ZipCode, string RechargeRequest, string EmailID, string City, decimal Amount, decimal TaxAmount, decimal TotalAmount, decimal Regulatery, int CreatedBy, int DistributorID) {
            return base.Channel.SaveRechageRequestAsync(NetworkID, TariffID, SerialNumber, ZipCode, RechargeRequest, EmailID, City, Amount, TaxAmount, TotalAmount, Regulatery, CreatedBy, DistributorID);
        }
        
        public System.Data.DataSet GetPurchaseCode() {
            return base.Channel.GetPurchaseCode();
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetPurchaseCodeAsync() {
            return base.Channel.GetPurchaseCodeAsync();
        }
        
        public System.Data.DataSet GetPurchaseReport(int ClientID, int ClientTypeID, int LoginID, System.DateTime FromDate, System.DateTime ToDate, int PurchaseID) {
            return base.Channel.GetPurchaseReport(ClientID, ClientTypeID, LoginID, FromDate, ToDate, PurchaseID);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetPurchaseReportAsync(int ClientID, int ClientTypeID, int LoginID, System.DateTime FromDate, System.DateTime ToDate, int PurchaseID) {
            return base.Channel.GetPurchaseReportAsync(ClientID, ClientTypeID, LoginID, FromDate, ToDate, PurchaseID);
        }
        
        public System.Data.DataSet DeductDistributorTopUpAmount(int Distributorid, decimal Amount, string Remarks) {
            return base.Channel.DeductDistributorTopUpAmount(Distributorid, Amount, Remarks);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> DeductDistributorTopUpAmountAsync(int Distributorid, decimal Amount, string Remarks) {
            return base.Channel.DeductDistributorTopUpAmountAsync(Distributorid, Amount, Remarks);
        }
        
        public System.Data.DataSet GetReportRechargeFilterwise(int ClientID, int ClientTypeID, int LoginID, string MobileNo, string TxnID, string RechargeVia) {
            return base.Channel.GetReportRechargeFilterwise(ClientID, ClientTypeID, LoginID, MobileNo, TxnID, RechargeVia);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetReportRechargeFilterwiseAsync(int ClientID, int ClientTypeID, int LoginID, string MobileNo, string TxnID, string RechargeVia) {
            return base.Channel.GetReportRechargeFilterwiseAsync(ClientID, ClientTypeID, LoginID, MobileNo, TxnID, RechargeVia);
        }
        
        public int UpdateAccountBalanceAfterRecharge(
                    int NetworkID, 
                    int TariffID, 
                    string SerialNumber, 
                    decimal ChargedAmount, 
                    int distributorID, 
                    string ZipCode, 
                    string RechargeStatus, 
                    string RechargeVia, 
                    string RechargeRequest, 
                    string RechargeResponse, 
                    int LoginID, 
                    int PaymentFrom, 
                    string PaymentMode, 
                    string TransactionId, 
                    int Currency, 
                    string TransactionStatus, 
                    int TransactionStatusId, 
                    string PinNumber, 
                    string State, 
                    string TxnID, 
                    string Tax, 
                    string TotalAmount, 
                    string InvoiceNo, 
                    string StatusVia, 
                    string Regulatry) {
            return base.Channel.UpdateAccountBalanceAfterRecharge(NetworkID, TariffID, SerialNumber, ChargedAmount, distributorID, ZipCode, RechargeStatus, RechargeVia, RechargeRequest, RechargeResponse, LoginID, PaymentFrom, PaymentMode, TransactionId, Currency, TransactionStatus, TransactionStatusId, PinNumber, State, TxnID, Tax, TotalAmount, InvoiceNo, StatusVia, Regulatry);
        }
        
        public System.Threading.Tasks.Task<int> UpdateAccountBalanceAfterRechargeAsync(
                    int NetworkID, 
                    int TariffID, 
                    string SerialNumber, 
                    decimal ChargedAmount, 
                    int distributorID, 
                    string ZipCode, 
                    string RechargeStatus, 
                    string RechargeVia, 
                    string RechargeRequest, 
                    string RechargeResponse, 
                    int LoginID, 
                    int PaymentFrom, 
                    string PaymentMode, 
                    string TransactionId, 
                    int Currency, 
                    string TransactionStatus, 
                    int TransactionStatusId, 
                    string PinNumber, 
                    string State, 
                    string TxnID, 
                    string Tax, 
                    string TotalAmount, 
                    string InvoiceNo, 
                    string StatusVia, 
                    string Regulatry) {
            return base.Channel.UpdateAccountBalanceAfterRechargeAsync(NetworkID, TariffID, SerialNumber, ChargedAmount, distributorID, ZipCode, RechargeStatus, RechargeVia, RechargeRequest, RechargeResponse, LoginID, PaymentFrom, PaymentMode, TransactionId, Currency, TransactionStatus, TransactionStatusId, PinNumber, State, TxnID, Tax, TotalAmount, InvoiceNo, StatusVia, Regulatry);
        }
        
        public int UpdateAccountBalanceAfterRechargeNew(
                    int TariffID, 
                    string SerialNumber, 
                    decimal ChargedAmount, 
                    int distributorID, 
                    string RechargeStatus, 
                    string TransactionStatus, 
                    int TransactionStatusId, 
                    string RechargeVia, 
                    string RechargeRequest, 
                    string RechargeResponse, 
                    string TotalAmount, 
                    int LoginID, 
                    string TxnID, 
                    string Regulatery, 
                    string Month, 
                    int PaymentFrom, 
                    string PaymentMode, 
                    int DataAddOnID, 
                    int InternationalID) {
            return base.Channel.UpdateAccountBalanceAfterRechargeNew(TariffID, SerialNumber, ChargedAmount, distributorID, RechargeStatus, TransactionStatus, TransactionStatusId, RechargeVia, RechargeRequest, RechargeResponse, TotalAmount, LoginID, TxnID, Regulatery, Month, PaymentFrom, PaymentMode, DataAddOnID, InternationalID);
        }
        
        public System.Threading.Tasks.Task<int> UpdateAccountBalanceAfterRechargeNewAsync(
                    int TariffID, 
                    string SerialNumber, 
                    decimal ChargedAmount, 
                    int distributorID, 
                    string RechargeStatus, 
                    string TransactionStatus, 
                    int TransactionStatusId, 
                    string RechargeVia, 
                    string RechargeRequest, 
                    string RechargeResponse, 
                    string TotalAmount, 
                    int LoginID, 
                    string TxnID, 
                    string Regulatery, 
                    string Month, 
                    int PaymentFrom, 
                    string PaymentMode, 
                    int DataAddOnID, 
                    int InternationalID) {
            return base.Channel.UpdateAccountBalanceAfterRechargeNewAsync(TariffID, SerialNumber, ChargedAmount, distributorID, RechargeStatus, TransactionStatus, TransactionStatusId, RechargeVia, RechargeRequest, RechargeResponse, TotalAmount, LoginID, TxnID, Regulatery, Month, PaymentFrom, PaymentMode, DataAddOnID, InternationalID);
        }
        
        public int UpdateAccountBalanceAfterRechargeNewForH2O(
                    int TariffID, 
                    string SerialNumber, 
                    decimal ChargedAmount, 
                    int distributorID, 
                    string RechargeStatus, 
                    string TransactionStatus, 
                    int TransactionStatusId, 
                    string RechargeVia, 
                    string RechargeRequest, 
                    string RechargeResponse, 
                    string TotalAmount, 
                    int LoginID, 
                    string TxnID, 
                    string Regulatery, 
                    string Month, 
                    int PaymentFrom, 
                    string PaymentMode, 
                    int DataAddOnID, 
                    int InternationalID) {
            return base.Channel.UpdateAccountBalanceAfterRechargeNewForH2O(TariffID, SerialNumber, ChargedAmount, distributorID, RechargeStatus, TransactionStatus, TransactionStatusId, RechargeVia, RechargeRequest, RechargeResponse, TotalAmount, LoginID, TxnID, Regulatery, Month, PaymentFrom, PaymentMode, DataAddOnID, InternationalID);
        }
        
        public System.Threading.Tasks.Task<int> UpdateAccountBalanceAfterRechargeNewForH2OAsync(
                    int TariffID, 
                    string SerialNumber, 
                    decimal ChargedAmount, 
                    int distributorID, 
                    string RechargeStatus, 
                    string TransactionStatus, 
                    int TransactionStatusId, 
                    string RechargeVia, 
                    string RechargeRequest, 
                    string RechargeResponse, 
                    string TotalAmount, 
                    int LoginID, 
                    string TxnID, 
                    string Regulatery, 
                    string Month, 
                    int PaymentFrom, 
                    string PaymentMode, 
                    int DataAddOnID, 
                    int InternationalID) {
            return base.Channel.UpdateAccountBalanceAfterRechargeNewForH2OAsync(TariffID, SerialNumber, ChargedAmount, distributorID, RechargeStatus, TransactionStatus, TransactionStatusId, RechargeVia, RechargeRequest, RechargeResponse, TotalAmount, LoginID, TxnID, Regulatery, Month, PaymentFrom, PaymentMode, DataAddOnID, InternationalID);
        }
        
        public System.Data.DataSet CheckRechargeDuplicate(int NetworkID, string SerialNumber, int TariffID, string InvoiceNo) {
            return base.Channel.CheckRechargeDuplicate(NetworkID, SerialNumber, TariffID, InvoiceNo);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> CheckRechargeDuplicateAsync(int NetworkID, string SerialNumber, int TariffID, string InvoiceNo) {
            return base.Channel.CheckRechargeDuplicateAsync(NetworkID, SerialNumber, TariffID, InvoiceNo);
        }
        
        public System.Data.DataSet GetProductRecharge(int NetworkID) {
            return base.Channel.GetProductRecharge(NetworkID);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetProductRechargeAsync(int NetworkID) {
            return base.Channel.GetProductRechargeAsync(NetworkID);
        }
        
        public System.Data.DataSet GetState() {
            return base.Channel.GetState();
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetStateAsync() {
            return base.Channel.GetStateAsync();
        }
        
        public System.Data.DataSet GetSimNetwork(string SimNo, string Action) {
            return base.Channel.GetSimNetwork(SimNo, Action);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetSimNetworkAsync(string SimNo, string Action) {
            return base.Channel.GetSimNetworkAsync(SimNo, Action);
        }
        
        public System.Data.DataSet GetReportActivationLedger(int ClientID, int ClientTypeID, int LoginID, System.DateTime FromDate, System.DateTime ToDate, int CurrentLogin) {
            return base.Channel.GetReportActivationLedger(ClientID, ClientTypeID, LoginID, FromDate, ToDate, CurrentLogin);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetReportActivationLedgerAsync(int ClientID, int ClientTypeID, int LoginID, System.DateTime FromDate, System.DateTime ToDate, int CurrentLogin) {
            return base.Channel.GetReportActivationLedgerAsync(ClientID, ClientTypeID, LoginID, FromDate, ToDate, CurrentLogin);
        }
        
        public System.Data.DataSet UpdatePurchaseSimNetwork(int VendorID, string SimNo, long PurchaseID) {
            return base.Channel.UpdatePurchaseSimNetwork(VendorID, SimNo, PurchaseID);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> UpdatePurchaseSimNetworkAsync(int VendorID, string SimNo, long PurchaseID) {
            return base.Channel.UpdatePurchaseSimNetworkAsync(VendorID, SimNo, PurchaseID);
        }
        
        public int SaveInventory(ENK.ServiceReference1.SIM s, int UserID, ENK.ServiceReference1.Actions Action) {
            return base.Channel.SaveInventory(s, UserID, Action);
        }
        
        public System.Threading.Tasks.Task<int> SaveInventoryAsync(ENK.ServiceReference1.SIM s, int UserID, ENK.ServiceReference1.Actions Action) {
            return base.Channel.SaveInventoryAsync(s, UserID, Action);
        }
        
        public System.Data.DataTable GetVendor(int UserID) {
            return base.Channel.GetVendor(UserID);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetVendorAsync(int UserID) {
            return base.Channel.GetVendorAsync(UserID);
        }
        
        public System.Data.DataTable PreloadedSIMCheck(string SimNo) {
            return base.Channel.PreloadedSIMCheck(SimNo);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> PreloadedSIMCheckAsync(string SimNo) {
            return base.Channel.PreloadedSIMCheckAsync(SimNo);
        }
        
        public System.Data.DataSet GetTariffService(int LoginID, int DistributorID) {
            return base.Channel.GetTariffService(LoginID, DistributorID);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetTariffServiceAsync(int LoginID, int DistributorID) {
            return base.Channel.GetTariffServiceAsync(LoginID, DistributorID);
        }
        
        public int InventoryTransfer(ENK.ServiceReference1.SIM s, int UserID, ENK.ServiceReference1.Actions Action, string checkInventoryWAY) {
            return base.Channel.InventoryTransfer(s, UserID, Action, checkInventoryWAY);
        }
        
        public System.Threading.Tasks.Task<int> InventoryTransferAsync(ENK.ServiceReference1.SIM s, int UserID, ENK.ServiceReference1.Actions Action, string checkInventoryWAY) {
            return base.Channel.InventoryTransferAsync(s, UserID, Action, checkInventoryWAY);
        }
        
        public System.Data.DataSet GetInventory(int ClientID, string Action) {
            return base.Channel.GetInventory(ClientID, Action);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetInventoryAsync(int ClientID, string Action) {
            return base.Channel.GetInventoryAsync(ClientID, Action);
        }
        
        public System.Data.DataSet GetInventoryForAccept(int ClientID, int LoginClientID) {
            return base.Channel.GetInventoryForAccept(ClientID, LoginClientID);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetInventoryForAcceptAsync(int ClientID, int LoginClientID) {
            return base.Channel.GetInventoryForAcceptAsync(ClientID, LoginClientID);
        }
        
        public System.Data.DataSet GetInventoryForSIMReplacement(string MSISDNNo, string SIMNo, int ClientID) {
            return base.Channel.GetInventoryForSIMReplacement(MSISDNNo, SIMNo, ClientID);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetInventoryForSIMReplacementAsync(string MSISDNNo, string SIMNo, int ClientID) {
            return base.Channel.GetInventoryForSIMReplacementAsync(MSISDNNo, SIMNo, ClientID);
        }
        
        public int SIMReplacement(ENK.ServiceReference1.SIM s, ENK.ServiceReference1.Actions Action) {
            return base.Channel.SIMReplacement(s, Action);
        }
        
        public System.Threading.Tasks.Task<int> SIMReplacementAsync(ENK.ServiceReference1.SIM s, ENK.ServiceReference1.Actions Action) {
            return base.Channel.SIMReplacementAsync(s, Action);
        }
        
        public System.Data.DataSet GetReportInventoryStatus(int ClientID, int ClientTypeID, int LoginID, System.DateTime FromDate, System.DateTime ToDate) {
            return base.Channel.GetReportInventoryStatus(ClientID, ClientTypeID, LoginID, FromDate, ToDate);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetReportInventoryStatusAsync(int ClientID, int ClientTypeID, int LoginID, System.DateTime FromDate, System.DateTime ToDate) {
            return base.Channel.GetReportInventoryStatusAsync(ClientID, ClientTypeID, LoginID, FromDate, ToDate);
        }
        
        public System.Data.DataSet GetReportSalesReport(int ClientID, int ClientTypeID, int LoginID, System.DateTime FromDate, System.DateTime ToDate) {
            return base.Channel.GetReportSalesReport(ClientID, ClientTypeID, LoginID, FromDate, ToDate);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetReportSalesReportAsync(int ClientID, int ClientTypeID, int LoginID, System.DateTime FromDate, System.DateTime ToDate) {
            return base.Channel.GetReportSalesReportAsync(ClientID, ClientTypeID, LoginID, FromDate, ToDate);
        }
        
        public System.Data.DataSet GetReportActivationSIM(int ClientID, int ClientTypeID, int LoginID, System.DateTime FromDate, System.DateTime ToDate, int checkMainDistributor, int NetworkID) {
            return base.Channel.GetReportActivationSIM(ClientID, ClientTypeID, LoginID, FromDate, ToDate, checkMainDistributor, NetworkID);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetReportActivationSIMAsync(int ClientID, int ClientTypeID, int LoginID, System.DateTime FromDate, System.DateTime ToDate, int checkMainDistributor, int NetworkID) {
            return base.Channel.GetReportActivationSIMAsync(ClientID, ClientTypeID, LoginID, FromDate, ToDate, checkMainDistributor, NetworkID);
        }
        
        public System.Data.DataSet GetRechargeSIMReport(int ClientID, int ClientTypeID, int LoginID, System.DateTime FromDate, System.DateTime ToDate, int NetworkID) {
            return base.Channel.GetRechargeSIMReport(ClientID, ClientTypeID, LoginID, FromDate, ToDate, NetworkID);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetRechargeSIMReportAsync(int ClientID, int ClientTypeID, int LoginID, System.DateTime FromDate, System.DateTime ToDate, int NetworkID) {
            return base.Channel.GetRechargeSIMReportAsync(ClientID, ClientTypeID, LoginID, FromDate, ToDate, NetworkID);
        }
        
        public System.Data.DataSet GetRequesrRechargeSIMReport(int ClientID, int ClientTypeID, int LoginID, System.DateTime FromDate, System.DateTime ToDate, string RechargeVia) {
            return base.Channel.GetRequesrRechargeSIMReport(ClientID, ClientTypeID, LoginID, FromDate, ToDate, RechargeVia);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetRequesrRechargeSIMReportAsync(int ClientID, int ClientTypeID, int LoginID, System.DateTime FromDate, System.DateTime ToDate, string RechargeVia) {
            return base.Channel.GetRequesrRechargeSIMReportAsync(ClientID, ClientTypeID, LoginID, FromDate, ToDate, RechargeVia);
        }
        
        public System.Data.DataSet GetReportSIMHistory(int ClientID, int ClientTypeID, int LoginID, string SearchText) {
            return base.Channel.GetReportSIMHistory(ClientID, ClientTypeID, LoginID, SearchText);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetReportSIMHistoryAsync(int ClientID, int ClientTypeID, int LoginID, string SearchText) {
            return base.Channel.GetReportSIMHistoryAsync(ClientID, ClientTypeID, LoginID, SearchText);
        }
        
        public int SimTariffMapping(ENK.ServiceReference1.SIM s, int UserID, ENK.ServiceReference1.Actions Action, int Months) {
            return base.Channel.SimTariffMapping(s, UserID, Action, Months);
        }
        
        public System.Threading.Tasks.Task<int> SimTariffMappingAsync(ENK.ServiceReference1.SIM s, int UserID, ENK.ServiceReference1.Actions Action, int Months) {
            return base.Channel.SimTariffMappingAsync(s, UserID, Action, Months);
        }
        
        public System.Data.DataSet GetSaleReportForActivationAndPortIn(int ClientID, int ClientTypeID, System.DateTime FromDate, System.DateTime ToDate) {
            return base.Channel.GetSaleReportForActivationAndPortIn(ClientID, ClientTypeID, FromDate, ToDate);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetSaleReportForActivationAndPortInAsync(int ClientID, int ClientTypeID, System.DateTime FromDate, System.DateTime ToDate) {
            return base.Channel.GetSaleReportForActivationAndPortInAsync(ClientID, ClientTypeID, FromDate, ToDate);
        }
        
        public System.Data.DataSet GetInventoryBulkTransfer(int ClientID, System.Data.DataTable SIMDt) {
            return base.Channel.GetInventoryBulkTransfer(ClientID, SIMDt);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetInventoryBulkTransferAsync(int ClientID, System.Data.DataTable SIMDt) {
            return base.Channel.GetInventoryBulkTransferAsync(ClientID, SIMDt);
        }
        
        public System.Data.DataSet GetInventoryForAcceptOnDasboard(int LoginClientID) {
            return base.Channel.GetInventoryForAcceptOnDasboard(LoginClientID);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetInventoryForAcceptOnDasboardAsync(int LoginClientID) {
            return base.Channel.GetInventoryForAcceptOnDasboardAsync(LoginClientID);
        }
        
        public int GetData(int value) {
            return base.Channel.GetData(value);
        }
        
        public System.Threading.Tasks.Task<int> GetDataAsync(int value) {
            return base.Channel.GetDataAsync(value);
        }
        
        public System.Data.DataSet AddDistirbutorService(ENK.ServiceReference1.Distributor distbtr, int UserID, System.Data.DataTable dt, System.Data.DataTable dtRecharge, string UserName, int ChkSellr, int Chktariffgroup) {
            return base.Channel.AddDistirbutorService(distbtr, UserID, dt, dtRecharge, UserName, ChkSellr, Chktariffgroup);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> AddDistirbutorServiceAsync(ENK.ServiceReference1.Distributor distbtr, int UserID, System.Data.DataTable dt, System.Data.DataTable dtRecharge, string UserName, int ChkSellr, int Chktariffgroup) {
            return base.Channel.AddDistirbutorServiceAsync(distbtr, UserID, dt, dtRecharge, UserName, ChkSellr, Chktariffgroup);
        }
        
        public int UpdateDistirbutorService(ENK.ServiceReference1.Distributor dist, int Userid, System.Data.DataTable dt, System.Data.DataTable dtRecharge, string Username, string passw, int ChkSellr, int Chktariffgroup) {
            return base.Channel.UpdateDistirbutorService(dist, Userid, dt, dtRecharge, Username, passw, ChkSellr, Chktariffgroup);
        }
        
        public System.Threading.Tasks.Task<int> UpdateDistirbutorServiceAsync(ENK.ServiceReference1.Distributor dist, int Userid, System.Data.DataTable dt, System.Data.DataTable dtRecharge, string Username, string passw, int ChkSellr, int Chktariffgroup) {
            return base.Channel.UpdateDistirbutorServiceAsync(dist, Userid, dt, dtRecharge, Username, passw, ChkSellr, Chktariffgroup);
        }
        
        public ENK.ServiceReference1.Distributor[] GetDistributorService1(int Userid, int Distributorid, string TaxDocument, string ResellerCertificate) {
            return base.Channel.GetDistributorService1(Userid, Distributorid, TaxDocument, ResellerCertificate);
        }
        
        public System.Threading.Tasks.Task<ENK.ServiceReference1.Distributor[]> GetDistributorService1Async(int Userid, int Distributorid, string TaxDocument, string ResellerCertificate) {
            return base.Channel.GetDistributorService1Async(Userid, Distributorid, TaxDocument, ResellerCertificate);
        }
        
        public ENK.ServiceReference1.Distributor[] GetSingleDistributorService(int Distributorid) {
            return base.Channel.GetSingleDistributorService(Distributorid);
        }
        
        public System.Threading.Tasks.Task<ENK.ServiceReference1.Distributor[]> GetSingleDistributorServiceAsync(int Distributorid) {
            return base.Channel.GetSingleDistributorServiceAsync(Distributorid);
        }
        
        public System.Data.DataSet GetSingleDistributorTariffService(int Distributorid) {
            return base.Channel.GetSingleDistributorTariffService(Distributorid);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetSingleDistributorTariffServiceAsync(int Distributorid) {
            return base.Channel.GetSingleDistributorTariffServiceAsync(Distributorid);
        }
        
        public System.Data.DataSet GetClientType(int loginID, int DistributorID) {
            return base.Channel.GetClientType(loginID, DistributorID);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetClientTypeAsync(int loginID, int DistributorID) {
            return base.Channel.GetClientTypeAsync(loginID, DistributorID);
        }
        
        public ENK.ServiceReference1.Distributor[] GetDistributorDDLService(int Userid, int Distributorid) {
            return base.Channel.GetDistributorDDLService(Userid, Distributorid);
        }
        
        public System.Threading.Tasks.Task<ENK.ServiceReference1.Distributor[]> GetDistributorDDLServiceAsync(int Userid, int Distributorid) {
            return base.Channel.GetDistributorDDLServiceAsync(Userid, Distributorid);
        }
        
        public System.Data.DataSet GetRoleService() {
            return base.Channel.GetRoleService();
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetRoleServiceAsync() {
            return base.Channel.GetRoleServiceAsync();
        }
        
        public System.Data.DataSet ValidateLoginService(string UserName, string Pwd) {
            return base.Channel.ValidateLoginService(UserName, Pwd);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> ValidateLoginServiceAsync(string UserName, string Pwd) {
            return base.Channel.ValidateLoginServiceAsync(UserName, Pwd);
        }
        
        public System.Data.DataSet ValidateLoginApp(long LoginId) {
            return base.Channel.ValidateLoginApp(LoginId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> ValidateLoginAppAsync(long LoginId) {
            return base.Channel.ValidateLoginAppAsync(LoginId);
        }
        
        public int AddUserService(ENK.ServiceReference1.SUsers ud, int loginID) {
            return base.Channel.AddUserService(ud, loginID);
        }
        
        public System.Threading.Tasks.Task<int> AddUserServiceAsync(ENK.ServiceReference1.SUsers ud, int loginID) {
            return base.Channel.AddUserServiceAsync(ud, loginID);
        }
        
        public int UpdateUserService(ENK.ServiceReference1.SUsers ud, int loginID) {
            return base.Channel.UpdateUserService(ud, loginID);
        }
        
        public System.Threading.Tasks.Task<int> UpdateUserServiceAsync(ENK.ServiceReference1.SUsers ud, int loginID) {
            return base.Channel.UpdateUserServiceAsync(ud, loginID);
        }
        
        public System.Data.DataSet GetUserListService(int loginID, int DistributorID) {
            return base.Channel.GetUserListService(loginID, DistributorID);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetUserListServiceAsync(int loginID, int DistributorID) {
            return base.Channel.GetUserListServiceAsync(loginID, DistributorID);
        }
        
        public System.Data.DataSet GetUserService(int UserID, int LoginID) {
            return base.Channel.GetUserService(UserID, LoginID);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetUserServiceAsync(int UserID, int LoginID) {
            return base.Channel.GetUserServiceAsync(UserID, LoginID);
        }
        
        public int InsertCompanyTopupBalanceService(int distributorID, int LoginID, ENK.ServiceReference1.SPayment sp) {
            return base.Channel.InsertCompanyTopupBalanceService(distributorID, LoginID, sp);
        }
        
        public System.Threading.Tasks.Task<int> InsertCompanyTopupBalanceServiceAsync(int distributorID, int LoginID, ENK.ServiceReference1.SPayment sp) {
            return base.Channel.InsertCompanyTopupBalanceServiceAsync(distributorID, LoginID, sp);
        }
        
        public int InsertLoginHistoryService(ENK.ServiceReference1.SLoginHistory sl) {
            return base.Channel.InsertLoginHistoryService(sl);
        }
        
        public System.Threading.Tasks.Task<int> InsertLoginHistoryServiceAsync(ENK.ServiceReference1.SLoginHistory sl) {
            return base.Channel.InsertLoginHistoryServiceAsync(sl);
        }
        
        public System.Data.DataSet GetScreenService(int RoleID) {
            return base.Channel.GetScreenService(RoleID);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetScreenServiceAsync(int RoleID) {
            return base.Channel.GetScreenServiceAsync(RoleID);
        }
        
        public System.Data.DataSet GetSingleTariffService(int TariffID) {
            return base.Channel.GetSingleTariffService(TariffID);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetSingleTariffServiceAsync(int TariffID) {
            return base.Channel.GetSingleTariffServiceAsync(TariffID);
        }
        
        public int AddTariffService(ENK.ServiceReference1.STariff st, int LoginID, int DistributorID) {
            return base.Channel.AddTariffService(st, LoginID, DistributorID);
        }
        
        public System.Threading.Tasks.Task<int> AddTariffServiceAsync(ENK.ServiceReference1.STariff st, int LoginID, int DistributorID) {
            return base.Channel.AddTariffServiceAsync(st, LoginID, DistributorID);
        }
        
        public int UpdateTariffService(ENK.ServiceReference1.STariff st, int LoginID, int DistributorID) {
            return base.Channel.UpdateTariffService(st, LoginID, DistributorID);
        }
        
        public System.Threading.Tasks.Task<int> UpdateTariffServiceAsync(ENK.ServiceReference1.STariff st, int LoginID, int DistributorID) {
            return base.Channel.UpdateTariffServiceAsync(st, LoginID, DistributorID);
        }
        
        public System.Data.DataSet GetShortCodeService(string Condition) {
            return base.Channel.GetShortCodeService(Condition);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetShortCodeServiceAsync(string Condition) {
            return base.Channel.GetShortCodeServiceAsync(Condition);
        }
        
        public System.Data.DataSet GetTariffForActivationService(int LoginID, int DistributorID, int ClientTypeID) {
            return base.Channel.GetTariffForActivationService(LoginID, DistributorID, ClientTypeID);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetTariffForActivationServiceAsync(int LoginID, int DistributorID, int ClientTypeID) {
            return base.Channel.GetTariffForActivationServiceAsync(LoginID, DistributorID, ClientTypeID);
        }
        
        public int UpdateAccountBalanceServiceActivation(
                    int distributorID, 
                    int LoginID, 
                    string sim, 
                    string zipcode, 
                    string channel, 
                    string lang, 
                    int NetworkID, 
                    ENK.ServiceReference1.SPayment sp, 
                    int DataAddOnID, 
                    int InternationalID, 
                    decimal DataAddOnValue, 
                    decimal DataAddOnDiscountedAmount, 
                    decimal DataAddOnDiscountPercent, 
                    decimal InternationalCreditValue, 
                    decimal InternationalCreditDiscountedAmount, 
                    decimal InternationalCreditDiscountPercent, 
                    string MNPNO, 
                    string Serialnumber) {
            return base.Channel.UpdateAccountBalanceServiceActivation(distributorID, LoginID, sim, zipcode, channel, lang, NetworkID, sp, DataAddOnID, InternationalID, DataAddOnValue, DataAddOnDiscountedAmount, DataAddOnDiscountPercent, InternationalCreditValue, InternationalCreditDiscountedAmount, InternationalCreditDiscountPercent, MNPNO, Serialnumber);
        }
        
        public System.Threading.Tasks.Task<int> UpdateAccountBalanceServiceActivationAsync(
                    int distributorID, 
                    int LoginID, 
                    string sim, 
                    string zipcode, 
                    string channel, 
                    string lang, 
                    int NetworkID, 
                    ENK.ServiceReference1.SPayment sp, 
                    int DataAddOnID, 
                    int InternationalID, 
                    decimal DataAddOnValue, 
                    decimal DataAddOnDiscountedAmount, 
                    decimal DataAddOnDiscountPercent, 
                    decimal InternationalCreditValue, 
                    decimal InternationalCreditDiscountedAmount, 
                    decimal InternationalCreditDiscountPercent, 
                    string MNPNO, 
                    string Serialnumber) {
            return base.Channel.UpdateAccountBalanceServiceActivationAsync(distributorID, LoginID, sim, zipcode, channel, lang, NetworkID, sp, DataAddOnID, InternationalID, DataAddOnValue, DataAddOnDiscountedAmount, DataAddOnDiscountPercent, InternationalCreditValue, InternationalCreditDiscountedAmount, InternationalCreditDiscountPercent, MNPNO, Serialnumber);
        }
        
        public int InsertSubscriberActivationDetailService(int distributorID, int LoginID, string sim, string zipcode, string channel, string lang, ENK.ServiceReference1.SPayment sp) {
            return base.Channel.InsertSubscriberActivationDetailService(distributorID, LoginID, sim, zipcode, channel, lang, sp);
        }
        
        public System.Threading.Tasks.Task<int> InsertSubscriberActivationDetailServiceAsync(int distributorID, int LoginID, string sim, string zipcode, string channel, string lang, ENK.ServiceReference1.SPayment sp) {
            return base.Channel.InsertSubscriberActivationDetailServiceAsync(distributorID, LoginID, sim, zipcode, channel, lang, sp);
        }
    }
}
