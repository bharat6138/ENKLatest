//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.34209.
// 
#pragma warning disable 1591

namespace ENKService.net.emida.ws {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="rpcrouterSoapBinding", Namespace="urn:debisys-soap-services")]
    public partial class webServicesService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback LookUpBillPaymentMxByInvocieNoOperationCompleted;
        
        private System.Threading.SendOrPostCallback LookUpSimActivationByInvoiceNo1OperationCompleted;
        
        private System.Threading.SendOrPostCallback LookupQuippiTransactionByInvoiceNoOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTransactionsOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckTerminalOperationCompleted;
        
        private System.Threading.SendOrPostCallback PinDistSale_XBorderOperationCompleted;
        
        private System.Threading.SendOrPostCallback PinDistSale_XBorder_01OperationCompleted;
        
        private System.Threading.SendOrPostCallback PinDistSaleTicketOperationCompleted;
        
        private System.Threading.SendOrPostCallback PinDistSaleUSSDOperationCompleted;
        
        private System.Threading.SendOrPostCallback PinDistRefundOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetProductsProvidersLimitsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetProductListExtOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetProductListOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCarrierListOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCategoryListOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTransTypeListOperationCompleted;
        
        private System.Threading.SendOrPostCallback TransactionConfirmOperationCompleted;
        
        private System.Threading.SendOrPostCallback TransactionsDetailsForDayOperationCompleted;
        
        private System.Threading.SendOrPostCallback PINReturnRequestStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback PINReturnRequestOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAccountBalanceOperationCompleted;
        
        private System.Threading.SendOrPostCallback SubmitPaymentNotificationOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetBillPaymentBalanceOperationCompleted;
        
        private System.Threading.SendOrPostCallback GiftCardActivateOperationCompleted;
        
        private System.Threading.SendOrPostCallback GiftCardDeactivateOperationCompleted;
        
        private System.Threading.SendOrPostCallback GiftCardBalanceOperationCompleted;
        
        private System.Threading.SendOrPostCallback GiftCardQueryFeeOperationCompleted;
        
        private System.Threading.SendOrPostCallback StoredValueLoadOperationCompleted;
        
        private System.Threading.SendOrPostCallback StoredValueRefundOperationCompleted;
        
        private System.Threading.SendOrPostCallback StoredValueBalanceOperationCompleted;
        
        private System.Threading.SendOrPostCallback StoredValueActivateOperationCompleted;
        
        private System.Threading.SendOrPostCallback StoredValueDeactivateOperationCompleted;
        
        private System.Threading.SendOrPostCallback StoredValueQueryFeeOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckTransactionByInvoiceNoOperationCompleted;
        
        private System.Threading.SendOrPostCallback checkMerchantPaymentOperationCompleted;
        
        private System.Threading.SendOrPostCallback LookUpTransactionByInvocieNoOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetBProductListOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckProviderStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback sendNotificationOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTicketForTransactionOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetProductFeeOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetProductUFeeOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMerchantBalanceOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTerminalBalanceOperationCompleted;
        
        private System.Threading.SendOrPostCallback BillPaymentInfoMxOperationCompleted;
        
        private System.Threading.SendOrPostCallback BillPaymentSaleMxOperationCompleted;
        
        private System.Threading.SendOrPostCallback DoSimActivationGSM1OperationCompleted;
        
        private System.Threading.SendOrPostCallback DoSimActivationCDMA1OperationCompleted;
        
        private System.Threading.SendOrPostCallback ApplyPaymentISOLevelOperationCompleted;
        
        private System.Threading.SendOrPostCallback DMCActivationOperationCompleted;
        
        private System.Threading.SendOrPostCallback DMCDeviceCheckOperationCompleted;
        
        private System.Threading.SendOrPostCallback DMCPortInActivationOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPinProductsForActivationOperationCompleted;
        
        private System.Threading.SendOrPostCallback ApplyPaymentAgentLevelOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetQuippiFxRateOperationCompleted;
        
        private System.Threading.SendOrPostCallback QuippiCreatePINOperationCompleted;
        
        private System.Threading.SendOrPostCallback QuippiCancelPINOperationCompleted;
        
        private System.Threading.SendOrPostCallback QuippiAuthorizeOperationCompleted;
        
        private System.Threading.SendOrPostCallback LycaPortInDetailsOperationCompleted;
        
        private System.Threading.SendOrPostCallback LycaCheckPortInEligibilityOperationCompleted;
        
        private System.Threading.SendOrPostCallback LycaCancelPortInOperationCompleted;
        
        private System.Threading.SendOrPostCallback LycaModifyPortInOperationCompleted;
        
        private System.Threading.SendOrPostCallback validateLoginSecurityOperationCompleted;
        
        private System.Threading.SendOrPostCallback LocusActivateCDMAesnOperationCompleted;
        
        private System.Threading.SendOrPostCallback LocusActivateCDMAsimOperationCompleted;
        
        private System.Threading.SendOrPostCallback LocusActivateGSMAfcodeOperationCompleted;
        
        private System.Threading.SendOrPostCallback LocusActivateGSMsimOperationCompleted;
        
        private System.Threading.SendOrPostCallback LycaPortinPinOperationCompleted;
        
        private System.Threading.SendOrPostCallback LycaPortinRTROperationCompleted;
        
        private System.Threading.SendOrPostCallback LycaActivationPinOperationCompleted;
        
        private System.Threading.SendOrPostCallback LycaActivationRTROperationCompleted;
        
        private System.Threading.SendOrPostCallback BillPaymentUserFeeOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckClerkOperationCompleted;
        
        private System.Threading.SendOrPostCallback CommTestOperationCompleted;
        
        private System.Threading.SendOrPostCallback CardSaleOperationCompleted;
        
        private System.Threading.SendOrPostCallback CardBalanceOperationCompleted;
        
        private System.Threading.SendOrPostCallback CardRefundOperationCompleted;
        
        private System.Threading.SendOrPostCallback PinDistSaleOperationCompleted;
        
        private System.Threading.SendOrPostCallback postRequestOperationCompleted;
        
        private System.Threading.SendOrPostCallback TransRefundOperationCompleted;
        
        private System.Threading.SendOrPostCallback BillPaymentOperationCompleted;
        
        private System.Threading.SendOrPostCallback LoginOperationCompleted;
        
        private System.Threading.SendOrPostCallback LogoutOperationCompleted;
        
        private System.Threading.SendOrPostCallback Login2OperationCompleted;
        
        private System.Threading.SendOrPostCallback NOCOperationOperationCompleted;
        
        private System.Threading.SendOrPostCallback SaleAsyncOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckTBIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckTrxByIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback ApplyPaymentOperationCompleted;
        
        private System.Threading.SendOrPostCallback QuippiRedeemOperationCompleted;
        
        private System.Threading.SendOrPostCallback setTagNewCreditAfterTransactionOperationCompleted;
        
        private System.Threading.SendOrPostCallback getTagNewCreditAfterTransactionOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public webServicesService() {
            this.Url = global::ENKService.Properties.Settings.Default.ENKService_net_emida_ws_webServicesService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event LookUpBillPaymentMxByInvocieNoCompletedEventHandler LookUpBillPaymentMxByInvocieNoCompleted;
        
        /// <remarks/>
        public event LookUpSimActivationByInvoiceNo1CompletedEventHandler LookUpSimActivationByInvoiceNo1Completed;
        
        /// <remarks/>
        public event LookupQuippiTransactionByInvoiceNoCompletedEventHandler LookupQuippiTransactionByInvoiceNoCompleted;
        
        /// <remarks/>
        public event GetTransactionsCompletedEventHandler GetTransactionsCompleted;
        
        /// <remarks/>
        public event CheckTerminalCompletedEventHandler CheckTerminalCompleted;
        
        /// <remarks/>
        public event PinDistSale_XBorderCompletedEventHandler PinDistSale_XBorderCompleted;
        
        /// <remarks/>
        public event PinDistSale_XBorder_01CompletedEventHandler PinDistSale_XBorder_01Completed;
        
        /// <remarks/>
        public event PinDistSaleTicketCompletedEventHandler PinDistSaleTicketCompleted;
        
        /// <remarks/>
        public event PinDistSaleUSSDCompletedEventHandler PinDistSaleUSSDCompleted;
        
        /// <remarks/>
        public event PinDistRefundCompletedEventHandler PinDistRefundCompleted;
        
        /// <remarks/>
        public event GetProductsProvidersLimitsCompletedEventHandler GetProductsProvidersLimitsCompleted;
        
        /// <remarks/>
        public event GetProductListExtCompletedEventHandler GetProductListExtCompleted;
        
        /// <remarks/>
        public event GetProductListCompletedEventHandler GetProductListCompleted;
        
        /// <remarks/>
        public event GetCarrierListCompletedEventHandler GetCarrierListCompleted;
        
        /// <remarks/>
        public event GetCategoryListCompletedEventHandler GetCategoryListCompleted;
        
        /// <remarks/>
        public event GetTransTypeListCompletedEventHandler GetTransTypeListCompleted;
        
        /// <remarks/>
        public event TransactionConfirmCompletedEventHandler TransactionConfirmCompleted;
        
        /// <remarks/>
        public event TransactionsDetailsForDayCompletedEventHandler TransactionsDetailsForDayCompleted;
        
        /// <remarks/>
        public event PINReturnRequestStatusCompletedEventHandler PINReturnRequestStatusCompleted;
        
        /// <remarks/>
        public event PINReturnRequestCompletedEventHandler PINReturnRequestCompleted;
        
        /// <remarks/>
        public event GetAccountBalanceCompletedEventHandler GetAccountBalanceCompleted;
        
        /// <remarks/>
        public event SubmitPaymentNotificationCompletedEventHandler SubmitPaymentNotificationCompleted;
        
        /// <remarks/>
        public event GetBillPaymentBalanceCompletedEventHandler GetBillPaymentBalanceCompleted;
        
        /// <remarks/>
        public event GiftCardActivateCompletedEventHandler GiftCardActivateCompleted;
        
        /// <remarks/>
        public event GiftCardDeactivateCompletedEventHandler GiftCardDeactivateCompleted;
        
        /// <remarks/>
        public event GiftCardBalanceCompletedEventHandler GiftCardBalanceCompleted;
        
        /// <remarks/>
        public event GiftCardQueryFeeCompletedEventHandler GiftCardQueryFeeCompleted;
        
        /// <remarks/>
        public event StoredValueLoadCompletedEventHandler StoredValueLoadCompleted;
        
        /// <remarks/>
        public event StoredValueRefundCompletedEventHandler StoredValueRefundCompleted;
        
        /// <remarks/>
        public event StoredValueBalanceCompletedEventHandler StoredValueBalanceCompleted;
        
        /// <remarks/>
        public event StoredValueActivateCompletedEventHandler StoredValueActivateCompleted;
        
        /// <remarks/>
        public event StoredValueDeactivateCompletedEventHandler StoredValueDeactivateCompleted;
        
        /// <remarks/>
        public event StoredValueQueryFeeCompletedEventHandler StoredValueQueryFeeCompleted;
        
        /// <remarks/>
        public event CheckTransactionByInvoiceNoCompletedEventHandler CheckTransactionByInvoiceNoCompleted;
        
        /// <remarks/>
        public event checkMerchantPaymentCompletedEventHandler checkMerchantPaymentCompleted;
        
        /// <remarks/>
        public event LookUpTransactionByInvocieNoCompletedEventHandler LookUpTransactionByInvocieNoCompleted;
        
        /// <remarks/>
        public event GetBProductListCompletedEventHandler GetBProductListCompleted;
        
        /// <remarks/>
        public event CheckProviderStatusCompletedEventHandler CheckProviderStatusCompleted;
        
        /// <remarks/>
        public event sendNotificationCompletedEventHandler sendNotificationCompleted;
        
        /// <remarks/>
        public event GetTicketForTransactionCompletedEventHandler GetTicketForTransactionCompleted;
        
        /// <remarks/>
        public event GetProductFeeCompletedEventHandler GetProductFeeCompleted;
        
        /// <remarks/>
        public event GetProductUFeeCompletedEventHandler GetProductUFeeCompleted;
        
        /// <remarks/>
        public event GetMerchantBalanceCompletedEventHandler GetMerchantBalanceCompleted;
        
        /// <remarks/>
        public event GetTerminalBalanceCompletedEventHandler GetTerminalBalanceCompleted;
        
        /// <remarks/>
        public event BillPaymentInfoMxCompletedEventHandler BillPaymentInfoMxCompleted;
        
        /// <remarks/>
        public event BillPaymentSaleMxCompletedEventHandler BillPaymentSaleMxCompleted;
        
        /// <remarks/>
        public event DoSimActivationGSM1CompletedEventHandler DoSimActivationGSM1Completed;
        
        /// <remarks/>
        public event DoSimActivationCDMA1CompletedEventHandler DoSimActivationCDMA1Completed;
        
        /// <remarks/>
        public event ApplyPaymentISOLevelCompletedEventHandler ApplyPaymentISOLevelCompleted;
        
        /// <remarks/>
        public event DMCActivationCompletedEventHandler DMCActivationCompleted;
        
        /// <remarks/>
        public event DMCDeviceCheckCompletedEventHandler DMCDeviceCheckCompleted;
        
        /// <remarks/>
        public event DMCPortInActivationCompletedEventHandler DMCPortInActivationCompleted;
        
        /// <remarks/>
        public event GetPinProductsForActivationCompletedEventHandler GetPinProductsForActivationCompleted;
        
        /// <remarks/>
        public event ApplyPaymentAgentLevelCompletedEventHandler ApplyPaymentAgentLevelCompleted;
        
        /// <remarks/>
        public event GetQuippiFxRateCompletedEventHandler GetQuippiFxRateCompleted;
        
        /// <remarks/>
        public event QuippiCreatePINCompletedEventHandler QuippiCreatePINCompleted;
        
        /// <remarks/>
        public event QuippiCancelPINCompletedEventHandler QuippiCancelPINCompleted;
        
        /// <remarks/>
        public event QuippiAuthorizeCompletedEventHandler QuippiAuthorizeCompleted;
        
        /// <remarks/>
        public event LycaPortInDetailsCompletedEventHandler LycaPortInDetailsCompleted;
        
        /// <remarks/>
        public event LycaCheckPortInEligibilityCompletedEventHandler LycaCheckPortInEligibilityCompleted;
        
        /// <remarks/>
        public event LycaCancelPortInCompletedEventHandler LycaCancelPortInCompleted;
        
        /// <remarks/>
        public event LycaModifyPortInCompletedEventHandler LycaModifyPortInCompleted;
        
        /// <remarks/>
        public event validateLoginSecurityCompletedEventHandler validateLoginSecurityCompleted;
        
        /// <remarks/>
        public event LocusActivateCDMAesnCompletedEventHandler LocusActivateCDMAesnCompleted;
        
        /// <remarks/>
        public event LocusActivateCDMAsimCompletedEventHandler LocusActivateCDMAsimCompleted;
        
        /// <remarks/>
        public event LocusActivateGSMAfcodeCompletedEventHandler LocusActivateGSMAfcodeCompleted;
        
        /// <remarks/>
        public event LocusActivateGSMsimCompletedEventHandler LocusActivateGSMsimCompleted;
        
        /// <remarks/>
        public event LycaPortinPinCompletedEventHandler LycaPortinPinCompleted;
        
        /// <remarks/>
        public event LycaPortinRTRCompletedEventHandler LycaPortinRTRCompleted;
        
        /// <remarks/>
        public event LycaActivationPinCompletedEventHandler LycaActivationPinCompleted;
        
        /// <remarks/>
        public event LycaActivationRTRCompletedEventHandler LycaActivationRTRCompleted;
        
        /// <remarks/>
        public event BillPaymentUserFeeCompletedEventHandler BillPaymentUserFeeCompleted;
        
        /// <remarks/>
        public event CheckClerkCompletedEventHandler CheckClerkCompleted;
        
        /// <remarks/>
        public event CommTestCompletedEventHandler CommTestCompleted;
        
        /// <remarks/>
        public event CardSaleCompletedEventHandler CardSaleCompleted;
        
        /// <remarks/>
        public event CardBalanceCompletedEventHandler CardBalanceCompleted;
        
        /// <remarks/>
        public event CardRefundCompletedEventHandler CardRefundCompleted;
        
        /// <remarks/>
        public event PinDistSaleCompletedEventHandler PinDistSaleCompleted;
        
        /// <remarks/>
        public event postRequestCompletedEventHandler postRequestCompleted;
        
        /// <remarks/>
        public event TransRefundCompletedEventHandler TransRefundCompleted;
        
        /// <remarks/>
        public event BillPaymentCompletedEventHandler BillPaymentCompleted;
        
        /// <remarks/>
        public event LoginCompletedEventHandler LoginCompleted;
        
        /// <remarks/>
        public event LogoutCompletedEventHandler LogoutCompleted;
        
        /// <remarks/>
        public event Login2CompletedEventHandler Login2Completed;
        
        /// <remarks/>
        public event NOCOperationCompletedEventHandler NOCOperationCompleted;
        
        /// <remarks/>
        public event SaleAsyncCompletedEventHandler SaleAsyncCompleted;
        
        /// <remarks/>
        public event CheckTBIDCompletedEventHandler CheckTBIDCompleted;
        
        /// <remarks/>
        public event CheckTrxByIdCompletedEventHandler CheckTrxByIdCompleted;
        
        /// <remarks/>
        public event ApplyPaymentCompletedEventHandler ApplyPaymentCompleted;
        
        /// <remarks/>
        public event QuippiRedeemCompletedEventHandler QuippiRedeemCompleted;
        
        /// <remarks/>
        public event setTagNewCreditAfterTransactionCompletedEventHandler setTagNewCreditAfterTransactionCompleted;
        
        /// <remarks/>
        public event getTagNewCreditAfterTransactionCompletedEventHandler getTagNewCreditAfterTransactionCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="urn:debisys-soap-services", ResponseNamespace="urn:debisys-soap-services")]
        [return: System.Xml.Serialization.SoapElementAttribute("LookUpBillPaymentMxByInvocieNoReturn")]
        public string LookUpBillPaymentMxByInvocieNo(string version, string terminalId, string clerkId, string invoiceNo) {
            object[] results = this.Invoke("LookUpBillPaymentMxByInvocieNo", new object[] {
                        version,
                        terminalId,
                        clerkId,
                        invoiceNo});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void LookUpBillPaymentMxByInvocieNoAsync(string version, string terminalId, string clerkId, string invoiceNo) {
            this.LookUpBillPaymentMxByInvocieNoAsync(version, terminalId, clerkId, invoiceNo, null);
        }
        
        /// <remarks/>
        public void LookUpBillPaymentMxByInvocieNoAsync(string version, string terminalId, string clerkId, string invoiceNo, object userState) {
            if ((this.LookUpBillPaymentMxByInvocieNoOperationCompleted == null)) {
                this.LookUpBillPaymentMxByInvocieNoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLookUpBillPaymentMxByInvocieNoOperationCompleted);
            }
            this.InvokeAsync("LookUpBillPaymentMxByInvocieNo", new object[] {
                        version,
                        terminalId,
                        clerkId,
                        invoiceNo}, this.LookUpBillPaymentMxByInvocieNoOperationCompleted, userState);
        }
        
        private void OnLookUpBillPaymentMxByInvocieNoOperationCompleted(object arg) {
            if ((this.LookUpBillPaymentMxByInvocieNoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LookUpBillPaymentMxByInvocieNoCompleted(this, new LookUpBillPaymentMxByInvocieNoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="urn:debisys-soap-services", ResponseNamespace="urn:debisys-soap-services")]
        [return: System.Xml.Serialization.SoapElementAttribute("LookUpSimActivationByInvoiceNo1Return")]
        public string LookUpSimActivationByInvoiceNo1(string version, string terminalId, string clerkId, string invoiceNo) {
            object[] results = this.Invoke("LookUpSimActivationByInvoiceNo1", new object[] {
                        version,
                        terminalId,
                        clerkId,
                        invoiceNo});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void LookUpSimActivationByInvoiceNo1Async(string version, string terminalId, string clerkId, string invoiceNo) {
            this.LookUpSimActivationByInvoiceNo1Async(version, terminalId, clerkId, invoiceNo, null);
        }
        
        /// <remarks/>
        public void LookUpSimActivationByInvoiceNo1Async(string version, string terminalId, string clerkId, string invoiceNo, object userState) {
            if ((this.LookUpSimActivationByInvoiceNo1OperationCompleted == null)) {
                this.LookUpSimActivationByInvoiceNo1OperationCompleted = new System.Threading.SendOrPostCallback(this.OnLookUpSimActivationByInvoiceNo1OperationCompleted);
            }
            this.InvokeAsync("LookUpSimActivationByInvoiceNo1", new object[] {
                        version,
                        terminalId,
                        clerkId,
                        invoiceNo}, this.LookUpSimActivationByInvoiceNo1OperationCompleted, userState);
        }
        
        private void OnLookUpSimActivationByInvoiceNo1OperationCompleted(object arg) {
            if ((this.LookUpSimActivationByInvoiceNo1Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LookUpSimActivationByInvoiceNo1Completed(this, new LookUpSimActivationByInvoiceNo1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="urn:debisys-soap-services", ResponseNamespace="urn:debisys-soap-services")]
        [return: System.Xml.Serialization.SoapElementAttribute("LookupQuippiTransactionByInvoiceNoReturn")]
        public string LookupQuippiTransactionByInvoiceNo(string Version, string SiteID, string ClerkID, string ProductID, string Amount, string OriginalInvoiceNo) {
            object[] results = this.Invoke("LookupQuippiTransactionByInvoiceNo", new object[] {
                        Version,
                        SiteID,
                        ClerkID,
                        ProductID,
                        Amount,
                        OriginalInvoiceNo});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void LookupQuippiTransactionByInvoiceNoAsync(string Version, string SiteID, string ClerkID, string ProductID, string Amount, string OriginalInvoiceNo) {
            this.LookupQuippiTransactionByInvoiceNoAsync(Version, SiteID, ClerkID, ProductID, Amount, OriginalInvoiceNo, null);
        }
        
        /// <remarks/>
        public void LookupQuippiTransactionByInvoiceNoAsync(string Version, string SiteID, string ClerkID, string ProductID, string Amount, string OriginalInvoiceNo, object userState) {
            if ((this.LookupQuippiTransactionByInvoiceNoOperationCompleted == null)) {
                this.LookupQuippiTransactionByInvoiceNoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLookupQuippiTransactionByInvoiceNoOperationCompleted);
            }
            this.InvokeAsync("LookupQuippiTransactionByInvoiceNo", new object[] {
                        Version,
                        SiteID,
                        ClerkID,
                        ProductID,
                        Amount,
                        OriginalInvoiceNo}, this.LookupQuippiTransactionByInvoiceNoOperationCompleted, userState);
        }
        
        private void OnLookupQuippiTransactionByInvoiceNoOperationCompleted(object arg) {
            if ((this.LookupQuippiTransactionByInvoiceNoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LookupQuippiTransactionByInvoiceNoCompleted(this, new LookupQuippiTransactionByInvoiceNoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="urn:debisys-soap-services", ResponseNamespace="urn:debisys-soap-services")]
        [return: System.Xml.Serialization.SoapElementAttribute("GetTransactionsReturn")]
        public string GetTransactions(string version, string terminalId, string numberOfTransactions) {
            object[] results = this.Invoke("GetTransactions", new object[] {
                        version,
                        terminalId,
                        numberOfTransactions});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetTransactionsAsync(string version, string terminalId, string numberOfTransactions) {
            this.GetTransactionsAsync(version, terminalId, numberOfTransactions, null);
        }
        
        /// <remarks/>
        public void GetTransactionsAsync(string version, string terminalId, string numberOfTransactions, object userState) {
            if ((this.GetTransactionsOperationCompleted == null)) {
                this.GetTransactionsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTransactionsOperationCompleted);
            }
            this.InvokeAsync("GetTransactions", new object[] {
                        version,
                        terminalId,
                        numberOfTransactions}, this.GetTransactionsOperationCompleted, userState);
        }
        
        private void OnGetTransactionsOperationCompleted(object arg) {
            if ((this.GetTransactionsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTransactionsCompleted(this, new GetTransactionsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="urn:debisys-soap-services", ResponseNamespace="urn:debisys-soap-services")]
        [return: System.Xml.Serialization.SoapElementAttribute("CheckTerminalReturn")]
        public string CheckTerminal(string version, string terminalId) {
            object[] results = this.Invoke("CheckTerminal", new object[] {
                        version,
                        terminalId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CheckTerminalAsync(string version, string terminalId) {
            this.CheckTerminalAsync(version, terminalId, null);
        }
        
        /// <remarks/>
        public void CheckTerminalAsync(string version, string terminalId, object userState) {
            if ((this.CheckTerminalOperationCompleted == null)) {
                this.CheckTerminalOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckTerminalOperationCompleted);
            }
            this.InvokeAsync("CheckTerminal", new object[] {
                        version,
                        terminalId}, this.CheckTerminalOperationCompleted, userState);
        }
        
        private void OnCheckTerminalOperationCompleted(object arg) {
            if ((this.CheckTerminalCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckTerminalCompleted(this, new CheckTerminalCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="urn:debisys-soap-services", ResponseNamespace="urn:debisys-soap-services")]
        [return: System.Xml.Serialization.SoapElementAttribute("PinDistSale_XBorderReturn")]
        public string PinDistSale_XBorder(string version, string terminalId, string clerkId, string productId, string accountId, string amount, string originCountry, string destinationCountry, string invoiceNo, string languageOption) {
            object[] results = this.Invoke("PinDistSale_XBorder", new object[] {
                        version,
                        terminalId,
                        clerkId,
                        productId,
                        accountId,
                        amount,
                        originCountry,
                        destinationCountry,
                        invoiceNo,
                        languageOption});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void PinDistSale_XBorderAsync(string version, string terminalId, string clerkId, string productId, string accountId, string amount, string originCountry, string destinationCountry, string invoiceNo, string languageOption) {
            this.PinDistSale_XBorderAsync(version, terminalId, clerkId, productId, accountId, amount, originCountry, destinationCountry, invoiceNo, languageOption, null);
        }
        
        /// <remarks/>
        public void PinDistSale_XBorderAsync(string version, string terminalId, string clerkId, string productId, string accountId, string amount, string originCountry, string destinationCountry, string invoiceNo, string languageOption, object userState) {
            if ((this.PinDistSale_XBorderOperationCompleted == null)) {
                this.PinDistSale_XBorderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPinDistSale_XBorderOperationCompleted);
            }
            this.InvokeAsync("PinDistSale_XBorder", new object[] {
                        version,
                        terminalId,
                        clerkId,
                        productId,
                        accountId,
                        amount,
                        originCountry,
                        destinationCountry,
                        invoiceNo,
                        languageOption}, this.PinDistSale_XBorderOperationCompleted, userState);
        }
        
        private void OnPinDistSale_XBorderOperationCompleted(object arg) {
            if ((this.PinDistSale_XBorderCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PinDistSale_XBorderCompleted(this, new PinDistSale_XBorderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="urn:debisys-soap-services", ResponseNamespace="urn:debisys-soap-services")]
        [return: System.Xml.Serialization.SoapElementAttribute("PinDistSale_XBorder_01Return")]
        public string PinDistSale_XBorder_01(string version, string terminalId, string clerkId, string productId, string accountId, string amount, string originCountry, string destinationCountry, string invoiceNo, string languageOption, int transType, string ipAddress) {
            object[] results = this.Invoke("PinDistSale_XBorder_01", new object[] {
                        version,
                        terminalId,
                        clerkId,
                        productId,
                        accountId,
                        amount,
                        originCountry,
                        destinationCountry,
                        invoiceNo,
                        languageOption,
                        transType,
                        ipAddress});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void PinDistSale_XBorder_01Async(string version, string terminalId, string clerkId, string productId, string accountId, string amount, string originCountry, string destinationCountry, string invoiceNo, string languageOption, int transType, string ipAddress) {
            this.PinDistSale_XBorder_01Async(version, terminalId, clerkId, productId, accountId, amount, originCountry, destinationCountry, invoiceNo, languageOption, transType, ipAddress, null);
        }
        
        /// <remarks/>
        public void PinDistSale_XBorder_01Async(string version, string terminalId, string clerkId, string productId, string accountId, string amount, string originCountry, string destinationCountry, string invoiceNo, string languageOption, int transType, string ipAddress, object userState) {
            if ((this.PinDistSale_XBorder_01OperationCompleted == null)) {
                this.PinDistSale_XBorder_01OperationCompleted = new System.Threading.SendOrPostCallback(this.OnPinDistSale_XBorder_01OperationCompleted);
            }
            this.InvokeAsync("PinDistSale_XBorder_01", new object[] {
                        version,
                        terminalId,
                        clerkId,
                        productId,
                        accountId,
                        amount,
                        originCountry,
                        destinationCountry,
                        invoiceNo,
                        languageOption,
                        transType,
                        ipAddress}, this.PinDistSale_XBorder_01OperationCompleted, userState);
        }
        
        private void OnPinDistSale_XBorder_01OperationCompleted(object arg) {
            if ((this.PinDistSale_XBorder_01Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PinDistSale_XBorder_01Completed(this, new PinDistSale_XBorder_01CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="urn:debisys-soap-services", ResponseNamespace="urn:debisys-soap-services")]
        [return: System.Xml.Serialization.SoapElementAttribute("PinDistSaleTicketReturn")]
        public string PinDistSaleTicket(string version, string transactionId, string terminalId, string clerkId, string productId, string accountId, string amount, string invoiceNo, string languageOption) {
            object[] results = this.Invoke("PinDistSaleTicket", new object[] {
                        version,
                        transactionId,
                        terminalId,
                        clerkId,
                        productId,
                        accountId,
                        amount,
                        invoiceNo,
                        languageOption});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void PinDistSaleTicketAsync(string version, string transactionId, string terminalId, string clerkId, string productId, string accountId, string amount, string invoiceNo, string languageOption) {
            this.PinDistSaleTicketAsync(version, transactionId, terminalId, clerkId, productId, accountId, amount, invoiceNo, languageOption, null);
        }
        
        /// <remarks/>
        public void PinDistSaleTicketAsync(string version, string transactionId, string terminalId, string clerkId, string productId, string accountId, string amount, string invoiceNo, string languageOption, object userState) {
            if ((this.PinDistSaleTicketOperationCompleted == null)) {
                this.PinDistSaleTicketOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPinDistSaleTicketOperationCompleted);
            }
            this.InvokeAsync("PinDistSaleTicket", new object[] {
                        version,
                        transactionId,
                        terminalId,
                        clerkId,
                        productId,
                        accountId,
                        amount,
                        invoiceNo,
                        languageOption}, this.PinDistSaleTicketOperationCompleted, userState);
        }
        
        private void OnPinDistSaleTicketOperationCompleted(object arg) {
            if ((this.PinDistSaleTicketCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PinDistSaleTicketCompleted(this, new PinDistSaleTicketCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="urn:debisys-soap-services", ResponseNamespace="urn:debisys-soap-services")]
        [return: System.Xml.Serialization.SoapElementAttribute("PinDistSaleUSSDReturn")]
        public string PinDistSaleUSSD(string version, string phoneNumber, string clerkId, string productId, string accountId, string amount, string invoiceNo, string languageOption) {
            object[] results = this.Invoke("PinDistSaleUSSD", new object[] {
                        version,
                        phoneNumber,
                        clerkId,
                        productId,
                        accountId,
                        amount,
                        invoiceNo,
                        languageOption});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void PinDistSaleUSSDAsync(string version, string phoneNumber, string clerkId, string productId, string accountId, string amount, string invoiceNo, string languageOption) {
            this.PinDistSaleUSSDAsync(version, phoneNumber, clerkId, productId, accountId, amount, invoiceNo, languageOption, null);
        }
        
        /// <remarks/>
        public void PinDistSaleUSSDAsync(string version, string phoneNumber, string clerkId, string productId, string accountId, string amount, string invoiceNo, string languageOption, object userState) {
            if ((this.PinDistSaleUSSDOperationCompleted == null)) {
                this.PinDistSaleUSSDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPinDistSaleUSSDOperationCompleted);
            }
            this.InvokeAsync("PinDistSaleUSSD", new object[] {
                        version,
                        phoneNumber,
                        clerkId,
                        productId,
                        accountId,
                        amount,
                        invoiceNo,
                        languageOption}, this.PinDistSaleUSSDOperationCompleted, userState);
        }
        
        private void OnPinDistSaleUSSDOperationCompleted(object arg) {
            if ((this.PinDistSaleUSSDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PinDistSaleUSSDCompleted(this, new PinDistSaleUSSDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="urn:debisys-soap-services", ResponseNamespace="urn:debisys-soap-services")]
        [return: System.Xml.Serialization.SoapElementAttribute("PinDistRefundReturn")]
        public string PinDistRefund(string version, string terminalId, string clerkId, string productId, string accountId, string amount, string invoiceNo, string languageOption) {
            object[] results = this.Invoke("PinDistRefund", new object[] {
                        version,
                        terminalId,
                        clerkId,
                        productId,
                        accountId,
                        amount,
                        invoiceNo,
                        languageOption});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void PinDistRefundAsync(string version, string terminalId, string clerkId, string productId, string accountId, string amount, string invoiceNo, string languageOption) {
            this.PinDistRefundAsync(version, terminalId, clerkId, productId, accountId, amount, invoiceNo, languageOption, null);
        }
        
        /// <remarks/>
        public void PinDistRefundAsync(string version, string terminalId, string clerkId, string productId, string accountId, string amount, string invoiceNo, string languageOption, object userState) {
            if ((this.PinDistRefundOperationCompleted == null)) {
                this.PinDistRefundOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPinDistRefundOperationCompleted);
            }
            this.InvokeAsync("PinDistRefund", new object[] {
                        version,
                        terminalId,
                        clerkId,
                        productId,
                        accountId,
                        amount,
                        invoiceNo,
                        languageOption}, this.PinDistRefundOperationCompleted, userState);
        }
        
        private void OnPinDistRefundOperationCompleted(object arg) {
            if ((this.PinDistRefundCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PinDistRefundCompleted(this, new PinDistRefundCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="urn:debisys-soap-services", ResponseNamespace="urn:debisys-soap-services")]
        [return: System.Xml.Serialization.SoapElementAttribute("GetProductsProvidersLimitsReturn")]
        public string GetProductsProvidersLimits(string version, string terminalId, string transTypeId, string carrierId, string categoryId, string productId) {
            object[] results = this.Invoke("GetProductsProvidersLimits", new object[] {
                        version,
                        terminalId,
                        transTypeId,
                        carrierId,
                        categoryId,
                        productId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetProductsProvidersLimitsAsync(string version, string terminalId, string transTypeId, string carrierId, string categoryId, string productId) {
            this.GetProductsProvidersLimitsAsync(version, terminalId, transTypeId, carrierId, categoryId, productId, null);
        }
        
        /// <remarks/>
        public void GetProductsProvidersLimitsAsync(string version, string terminalId, string transTypeId, string carrierId, string categoryId, string productId, object userState) {
            if ((this.GetProductsProvidersLimitsOperationCompleted == null)) {
                this.GetProductsProvidersLimitsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetProductsProvidersLimitsOperationCompleted);
            }
            this.InvokeAsync("GetProductsProvidersLimits", new object[] {
                        version,
                        terminalId,
                        transTypeId,
                        carrierId,
                        categoryId,
                        productId}, this.GetProductsProvidersLimitsOperationCompleted, userState);
        }
        
        private void OnGetProductsProvidersLimitsOperationCompleted(object arg) {
            if ((this.GetProductsProvidersLimitsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetProductsProvidersLimitsCompleted(this, new GetProductsProvidersLimitsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="urn:debisys-soap-services", ResponseNamespace="urn:debisys-soap-services")]
        [return: System.Xml.Serialization.SoapElementAttribute("GetProductListExtReturn")]
        public string GetProductListExt(string version, string terminalId, string transTypeId, string carrierId, string categoryId, string productId) {
            object[] results = this.Invoke("GetProductListExt", new object[] {
                        version,
                        terminalId,
                        transTypeId,
                        carrierId,
                        categoryId,
                        productId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetProductListExtAsync(string version, string terminalId, string transTypeId, string carrierId, string categoryId, string productId) {
            this.GetProductListExtAsync(version, terminalId, transTypeId, carrierId, categoryId, productId, null);
        }
        
        /// <remarks/>
        public void GetProductListExtAsync(string version, string terminalId, string transTypeId, string carrierId, string categoryId, string productId, object userState) {
            if ((this.GetProductListExtOperationCompleted == null)) {
                this.GetProductListExtOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetProductListExtOperationCompleted);
            }
            this.InvokeAsync("GetProductListExt", new object[] {
                        version,
                        terminalId,
                        transTypeId,
                        carrierId,
                        categoryId,
                        productId}, this.GetProductListExtOperationCompleted, userState);
        }
        
        private void OnGetProductListExtOperationCompleted(object arg) {
            if ((this.GetProductListExtCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetProductListExtCompleted(this, new GetProductListExtCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="urn:debisys-soap-services", ResponseNamespace="urn:debisys-soap-services")]
        [return: System.Xml.Serialization.SoapElementAttribute("GetProductListReturn")]
        public string GetProductList(string version, string terminalId, string transTypeId, string carrierId, string categoryId, string productId) {
            object[] results = this.Invoke("GetProductList", new object[] {
                        version,
                        terminalId,
                        transTypeId,
                        carrierId,
                        categoryId,
                        productId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetProductListAsync(string version, string terminalId, string transTypeId, string carrierId, string categoryId, string productId) {
            this.GetProductListAsync(version, terminalId, transTypeId, carrierId, categoryId, productId, null);
        }
        
        /// <remarks/>
        public void GetProductListAsync(string version, string terminalId, string transTypeId, string carrierId, string categoryId, string productId, object userState) {
            if ((this.GetProductListOperationCompleted == null)) {
                this.GetProductListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetProductListOperationCompleted);
            }
            this.InvokeAsync("GetProductList", new object[] {
                        version,
                        terminalId,
                        transTypeId,
                        carrierId,
                        categoryId,
                        productId}, this.GetProductListOperationCompleted, userState);
        }
        
        private void OnGetProductListOperationCompleted(object arg) {
            if ((this.GetProductListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetProductListCompleted(this, new GetProductListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="urn:debisys-soap-services", ResponseNamespace="urn:debisys-soap-services")]
        [return: System.Xml.Serialization.SoapElementAttribute("GetCarrierListReturn")]
        public string GetCarrierList(string version, string terminalId, string transTypeId, string carrierId, string categoryId, string productId) {
            object[] results = this.Invoke("GetCarrierList", new object[] {
                        version,
                        terminalId,
                        transTypeId,
                        carrierId,
                        categoryId,
                        productId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetCarrierListAsync(string version, string terminalId, string transTypeId, string carrierId, string categoryId, string productId) {
            this.GetCarrierListAsync(version, terminalId, transTypeId, carrierId, categoryId, productId, null);
        }
        
        /// <remarks/>
        public void GetCarrierListAsync(string version, string terminalId, string transTypeId, string carrierId, string categoryId, string productId, object userState) {
            if ((this.GetCarrierListOperationCompleted == null)) {
                this.GetCarrierListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCarrierListOperationCompleted);
            }
            this.InvokeAsync("GetCarrierList", new object[] {
                        version,
                        terminalId,
                        transTypeId,
                        carrierId,
                        categoryId,
                        productId}, this.GetCarrierListOperationCompleted, userState);
        }
        
        private void OnGetCarrierListOperationCompleted(object arg) {
            if ((this.GetCarrierListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCarrierListCompleted(this, new GetCarrierListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="urn:debisys-soap-services", ResponseNamespace="urn:debisys-soap-services")]
        [return: System.Xml.Serialization.SoapElementAttribute("GetCategoryListReturn")]
        public string GetCategoryList(string version, string terminalId, string transTypeId, string carrierId, string categoryId, string productId) {
            object[] results = this.Invoke("GetCategoryList", new object[] {
                        version,
                        terminalId,
                        transTypeId,
                        carrierId,
                        categoryId,
                        productId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetCategoryListAsync(string version, string terminalId, string transTypeId, string carrierId, string categoryId, string productId) {
            this.GetCategoryListAsync(version, terminalId, transTypeId, carrierId, categoryId, productId, null);
        }
        
        /// <remarks/>
        public void GetCategoryListAsync(string version, string terminalId, string transTypeId, string carrierId, string categoryId, string productId, object userState) {
            if ((this.GetCategoryListOperationCompleted == null)) {
                this.GetCategoryListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCategoryListOperationCompleted);
            }
            this.InvokeAsync("GetCategoryList", new object[] {
                        version,
                        terminalId,
                        transTypeId,
                        carrierId,
                        categoryId,
                        productId}, this.GetCategoryListOperationCompleted, userState);
        }
        
        private void OnGetCategoryListOperationCompleted(object arg) {
            if ((this.GetCategoryListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCategoryListCompleted(this, new GetCategoryListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="urn:debisys-soap-services", ResponseNamespace="urn:debisys-soap-services")]
        [return: System.Xml.Serialization.SoapElementAttribute("GetTransTypeListReturn")]
        public string GetTransTypeList(string version, string terminalId, string transTypeId, string carrierId, string categoryId, string productId) {
            object[] results = this.Invoke("GetTransTypeList", new object[] {
                        version,
                        terminalId,
                        transTypeId,
                        carrierId,
                        categoryId,
                        productId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetTransTypeListAsync(string version, string terminalId, string transTypeId, string carrierId, string categoryId, string productId) {
            this.GetTransTypeListAsync(version, terminalId, transTypeId, carrierId, categoryId, productId, null);
        }
        
        /// <remarks/>
        public void GetTransTypeListAsync(string version, string terminalId, string transTypeId, string carrierId, string categoryId, string productId, object userState) {
            if ((this.GetTransTypeListOperationCompleted == null)) {
                this.GetTransTypeListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTransTypeListOperationCompleted);
            }
            this.InvokeAsync("GetTransTypeList", new object[] {
                        version,
                        terminalId,
                        transTypeId,
                        carrierId,
                        categoryId,
                        productId}, this.GetTransTypeListOperationCompleted, userState);
        }
        
        private void OnGetTransTypeListOperationCompleted(object arg) {
            if ((this.GetTransTypeListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTransTypeListCompleted(this, new GetTransTypeListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="urn:debisys-soap-services", ResponseNamespace="urn:debisys-soap-services")]
        [return: System.Xml.Serialization.SoapElementAttribute("TransactionConfirmReturn")]
        public string TransactionConfirm(string version, string terminalId, string transactionId) {
            object[] results = this.Invoke("TransactionConfirm", new object[] {
                        version,
                        terminalId,
                        transactionId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void TransactionConfirmAsync(string version, string terminalId, string transactionId) {
            this.TransactionConfirmAsync(version, terminalId, transactionId, null);
        }
        
        /// <remarks/>
        public void TransactionConfirmAsync(string version, string terminalId, string transactionId, object userState) {
            if ((this.TransactionConfirmOperationCompleted == null)) {
                this.TransactionConfirmOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTransactionConfirmOperationCompleted);
            }
            this.InvokeAsync("TransactionConfirm", new object[] {
                        version,
                        terminalId,
                        transactionId}, this.TransactionConfirmOperationCompleted, userState);
        }
        
        private void OnTransactionConfirmOperationCompleted(object arg) {
            if ((this.TransactionConfirmCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TransactionConfirmCompleted(this, new TransactionConfirmCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="urn:debisys-soap-services", ResponseNamespace="urn:debisys-soap-services")]
        [return: System.Xml.Serialization.SoapElementAttribute("TransactionsDetailsForDayReturn")]
        public string TransactionsDetailsForDay(string version, string terminalId, string clerkId, string dayDate, string languageOption) {
            object[] results = this.Invoke("TransactionsDetailsForDay", new object[] {
                        version,
                        terminalId,
                        clerkId,
                        dayDate,
                        languageOption});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void TransactionsDetailsForDayAsync(string version, string terminalId, string clerkId, string dayDate, string languageOption) {
            this.TransactionsDetailsForDayAsync(version, terminalId, clerkId, dayDate, languageOption, null);
        }
        
        /// <remarks/>
        public void TransactionsDetailsForDayAsync(string version, string terminalId, string clerkId, string dayDate, string languageOption, object userState) {
            if ((this.TransactionsDetailsForDayOperationCompleted == null)) {
                this.TransactionsDetailsForDayOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTransactionsDetailsForDayOperationCompleted);
            }
            this.InvokeAsync("TransactionsDetailsForDay", new object[] {
                        version,
                        terminalId,
                        clerkId,
                        dayDate,
                        languageOption}, this.TransactionsDetailsForDayOperationCompleted, userState);
        }
        
        private void OnTransactionsDetailsForDayOperationCompleted(object arg) {
            if ((this.TransactionsDetailsForDayCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TransactionsDetailsForDayCompleted(this, new TransactionsDetailsForDayCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="urn:debisys-soap-services", ResponseNamespace="urn:debisys-soap-services")]
        [return: System.Xml.Serialization.SoapElementAttribute("PINReturnRequestStatusReturn")]
        public string PINReturnRequestStatus(string version, string terminalId, string clerkId, string caseId, string languageOption) {
            object[] results = this.Invoke("PINReturnRequestStatus", new object[] {
                        version,
                        terminalId,
                        clerkId,
                        caseId,
                        languageOption});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void PINReturnRequestStatusAsync(string version, string terminalId, string clerkId, string caseId, string languageOption) {
            this.PINReturnRequestStatusAsync(version, terminalId, clerkId, caseId, languageOption, null);
        }
        
        /// <remarks/>
        public void PINReturnRequestStatusAsync(string version, string terminalId, string clerkId, string caseId, string languageOption, object userState) {
            if ((this.PINReturnRequestStatusOperationCompleted == null)) {
                this.PINReturnRequestStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPINReturnRequestStatusOperationCompleted);
            }
            this.InvokeAsync("PINReturnRequestStatus", new object[] {
                        version,
                        terminalId,
                        clerkId,
                        caseId,
                        languageOption}, this.PINReturnRequestStatusOperationCompleted, userState);
        }
        
        private void OnPINReturnRequestStatusOperationCompleted(object arg) {
            if ((this.PINReturnRequestStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PINReturnRequestStatusCompleted(this, new PINReturnRequestStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="urn:debisys-soap-services", ResponseNamespace="urn:debisys-soap-services")]
        [return: System.Xml.Serialization.SoapElementAttribute("PINReturnRequestReturn")]
        public string PINReturnRequest(string version, string terminalId, string clerkId, string productId, string accountId, string amount, string invoiceNo, string languageOption) {
            object[] results = this.Invoke("PINReturnRequest", new object[] {
                        version,
                        terminalId,
                        clerkId,
                        productId,
                        accountId,
                        amount,
                        invoiceNo,
                        languageOption});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void PINReturnRequestAsync(string version, string terminalId, string clerkId, string productId, string accountId, string amount, string invoiceNo, string languageOption) {
            this.PINReturnRequestAsync(version, terminalId, clerkId, productId, accountId, amount, invoiceNo, languageOption, null);
        }
        
        /// <remarks/>
        public void PINReturnRequestAsync(string version, string terminalId, string clerkId, string productId, string accountId, string amount, string invoiceNo, string languageOption, object userState) {
            if ((this.PINReturnRequestOperationCompleted == null)) {
                this.PINReturnRequestOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPINReturnRequestOperationCompleted);
            }
            this.InvokeAsync("PINReturnRequest", new object[] {
                        version,
                        terminalId,
                        clerkId,
                        productId,
                        accountId,
                        amount,
                        invoiceNo,
                        languageOption}, this.PINReturnRequestOperationCompleted, userState);
        }
        
        private void OnPINReturnRequestOperationCompleted(object arg) {
            if ((this.PINReturnRequestCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PINReturnRequestCompleted(this, new PINReturnRequestCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="urn:debisys-soap-services", ResponseNamespace="urn:debisys-soap-services")]
        [return: System.Xml.Serialization.SoapElementAttribute("GetAccountBalanceReturn")]
        public string GetAccountBalance(string version, string terminalId, string merchantId) {
            object[] results = this.Invoke("GetAccountBalance", new object[] {
                        version,
                        terminalId,
                        merchantId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetAccountBalanceAsync(string version, string terminalId, string merchantId) {
            this.GetAccountBalanceAsync(version, terminalId, merchantId, null);
        }
        
        /// <remarks/>
        public void GetAccountBalanceAsync(string version, string terminalId, string merchantId, object userState) {
            if ((this.GetAccountBalanceOperationCompleted == null)) {
                this.GetAccountBalanceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAccountBalanceOperationCompleted);
            }
            this.InvokeAsync("GetAccountBalance", new object[] {
                        version,
                        terminalId,
                        merchantId}, this.GetAccountBalanceOperationCompleted, userState);
        }
        
        private void OnGetAccountBalanceOperationCompleted(object arg) {
            if ((this.GetAccountBalanceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAccountBalanceCompleted(this, new GetAccountBalanceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="urn:debisys-soap-services", ResponseNamespace="urn:debisys-soap-services")]
        [return: System.Xml.Serialization.SoapElementAttribute("SubmitPaymentNotificationReturn")]
        public string SubmitPaymentNotification(string version, string terminalId, string amount, string clerkPassword, string documentNumber, string documentDate, string bankCode) {
            object[] results = this.Invoke("SubmitPaymentNotification", new object[] {
                        version,
                        terminalId,
                        amount,
                        clerkPassword,
                        documentNumber,
                        documentDate,
                        bankCode});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SubmitPaymentNotificationAsync(string version, string terminalId, string amount, string clerkPassword, string documentNumber, string documentDate, string bankCode) {
            this.SubmitPaymentNotificationAsync(version, terminalId, amount, clerkPassword, documentNumber, documentDate, bankCode, null);
        }
        
        /// <remarks/>
        public void SubmitPaymentNotificationAsync(string version, string terminalId, string amount, string clerkPassword, string documentNumber, string documentDate, string bankCode, object userState) {
            if ((this.SubmitPaymentNotificationOperationCompleted == null)) {
                this.SubmitPaymentNotificationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSubmitPaymentNotificationOperationCompleted);
            }
            this.InvokeAsync("SubmitPaymentNotification", new object[] {
                        version,
                        terminalId,
                        amount,
                        clerkPassword,
                        documentNumber,
                        documentDate,
                        bankCode}, this.SubmitPaymentNotificationOperationCompleted, userState);
        }
        
        private void OnSubmitPaymentNotificationOperationCompleted(object arg) {
            if ((this.SubmitPaymentNotificationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SubmitPaymentNotificationCompleted(this, new SubmitPaymentNotificationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="urn:debisys-soap-services", ResponseNamespace="urn:debisys-soap-services")]
        [return: System.Xml.Serialization.SoapElementAttribute("GetBillPaymentBalanceReturn")]
        public string GetBillPaymentBalance(string version, string terminalId, string clerkId, string productId, string accountId, string invoiceNo, string languageOption) {
            object[] results = this.Invoke("GetBillPaymentBalance", new object[] {
                        version,
                        terminalId,
                        clerkId,
                        productId,
                        accountId,
                        invoiceNo,
                        languageOption});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetBillPaymentBalanceAsync(string version, string terminalId, string clerkId, string productId, string accountId, string invoiceNo, string languageOption) {
            this.GetBillPaymentBalanceAsync(version, terminalId, clerkId, productId, accountId, invoiceNo, languageOption, null);
        }
        
        /// <remarks/>
        public void GetBillPaymentBalanceAsync(string version, string terminalId, string clerkId, string productId, string accountId, string invoiceNo, string languageOption, object userState) {
            if ((this.GetBillPaymentBalanceOperationCompleted == null)) {
                this.GetBillPaymentBalanceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetBillPaymentBalanceOperationCompleted);
            }
            this.InvokeAsync("GetBillPaymentBalance", new object[] {
                        version,
                        terminalId,
                        clerkId,
                        productId,
                        accountId,
                        invoiceNo,
                        languageOption}, this.GetBillPaymentBalanceOperationCompleted, userState);
        }
        
        private void OnGetBillPaymentBalanceOperationCompleted(object arg) {
            if ((this.GetBillPaymentBalanceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetBillPaymentBalanceCompleted(this, new GetBillPaymentBalanceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="urn:debisys-soap-services", ResponseNamespace="urn:debisys-soap-services")]
        [return: System.Xml.Serialization.SoapElementAttribute("GiftCardActivateReturn")]
        public string GiftCardActivate(string version, string terminalId, string clerkId, string productId, string serialNumber, string invoiceNo, string languageOption) {
            object[] results = this.Invoke("GiftCardActivate", new object[] {
                        version,
                        terminalId,
                        clerkId,
                        productId,
                        serialNumber,
                        invoiceNo,
                        languageOption});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GiftCardActivateAsync(string version, string terminalId, string clerkId, string productId, string serialNumber, string invoiceNo, string languageOption) {
            this.GiftCardActivateAsync(version, terminalId, clerkId, productId, serialNumber, invoiceNo, languageOption, null);
        }
        
        /// <remarks/>
        public void GiftCardActivateAsync(string version, string terminalId, string clerkId, string productId, string serialNumber, string invoiceNo, string languageOption, object userState) {
            if ((this.GiftCardActivateOperationCompleted == null)) {
                this.GiftCardActivateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGiftCardActivateOperationCompleted);
            }
            this.InvokeAsync("GiftCardActivate", new object[] {
                        version,
                        terminalId,
                        clerkId,
                        productId,
                        serialNumber,
                        invoiceNo,
                        languageOption}, this.GiftCardActivateOperationCompleted, userState);
        }
        
        private void OnGiftCardActivateOperationCompleted(object arg) {
            if ((this.GiftCardActivateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GiftCardActivateCompleted(this, new GiftCardActivateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="urn:debisys-soap-services", ResponseNamespace="urn:debisys-soap-services")]
        [return: System.Xml.Serialization.SoapElementAttribute("GiftCardDeactivateReturn")]
        public string GiftCardDeactivate(string version, string terminalId, string clerkId, string productId, string transactionId, string invoiceNo, string languageOption) {
            object[] results = this.Invoke("GiftCardDeactivate", new object[] {
                        version,
                        terminalId,
                        clerkId,
                        productId,
                        transactionId,
                        invoiceNo,
                        languageOption});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GiftCardDeactivateAsync(string version, string terminalId, string clerkId, string productId, string transactionId, string invoiceNo, string languageOption) {
            this.GiftCardDeactivateAsync(version, terminalId, clerkId, productId, transactionId, invoiceNo, languageOption, null);
        }
        
        /// <remarks/>
        public void GiftCardDeactivateAsync(string version, string terminalId, string clerkId, string productId, string transactionId, string invoiceNo, string languageOption, object userState) {
            if ((this.GiftCardDeactivateOperationCompleted == null)) {
                this.GiftCardDeactivateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGiftCardDeactivateOperationCompleted);
            }
            this.InvokeAsync("GiftCardDeactivate", new object[] {
                        version,
                        terminalId,
                        clerkId,
                        productId,
                        transactionId,
                        invoiceNo,
                        languageOption}, this.GiftCardDeactivateOperationCompleted, userState);
        }
        
        private void OnGiftCardDeactivateOperationCompleted(object arg) {
            if ((this.GiftCardDeactivateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GiftCardDeactivateCompleted(this, new GiftCardDeactivateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="urn:debisys-soap-services", ResponseNamespace="urn:debisys-soap-services")]
        [return: System.Xml.Serialization.SoapElementAttribute("GiftCardBalanceReturn")]
        public string GiftCardBalance(string version, string terminalId, string clerkId, string productId, string cardNumber, string invoiceNo, string languageOption) {
            object[] results = this.Invoke("GiftCardBalance", new object[] {
                        version,
                        terminalId,
                        clerkId,
                        productId,
                        cardNumber,
                        invoiceNo,
                        languageOption});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GiftCardBalanceAsync(string version, string terminalId, string clerkId, string productId, string cardNumber, string invoiceNo, string languageOption) {
            this.GiftCardBalanceAsync(version, terminalId, clerkId, productId, cardNumber, invoiceNo, languageOption, null);
        }
        
        /// <remarks/>
        public void GiftCardBalanceAsync(string version, string terminalId, string clerkId, string productId, string cardNumber, string invoiceNo, string languageOption, object userState) {
            if ((this.GiftCardBalanceOperationCompleted == null)) {
                this.GiftCardBalanceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGiftCardBalanceOperationCompleted);
            }
            this.InvokeAsync("GiftCardBalance", new object[] {
                        version,
                        terminalId,
                        clerkId,
                        productId,
                        cardNumber,
                        invoiceNo,
                        languageOption}, this.GiftCardBalanceOperationCompleted, userState);
        }
        
        private void OnGiftCardBalanceOperationCompleted(object arg) {
            if ((this.GiftCardBalanceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GiftCardBalanceCompleted(this, new GiftCardBalanceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="urn:debisys-soap-services", ResponseNamespace="urn:debisys-soap-services")]
        [return: System.Xml.Serialization.SoapElementAttribute("GiftCardQueryFeeReturn")]
        public string GiftCardQueryFee(string version, string terminalId, string clerkId, string productId, string invoiceNo, string languageOption) {
            object[] results = this.Invoke("GiftCardQueryFee", new object[] {
                        version,
                        terminalId,
                        clerkId,
                        productId,
                        invoiceNo,
                        languageOption});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GiftCardQueryFeeAsync(string version, string terminalId, string clerkId, string productId, string invoiceNo, string languageOption) {
            this.GiftCardQueryFeeAsync(version, terminalId, clerkId, productId, invoiceNo, languageOption, null);
        }
        
        /// <remarks/>
        public void GiftCardQueryFeeAsync(string version, string terminalId, string clerkId, string productId, string invoiceNo, string languageOption, object userState) {
            if ((this.GiftCardQueryFeeOperationCompleted == null)) {
                this.GiftCardQueryFeeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGiftCardQueryFeeOperationCompleted);
            }
            this.InvokeAsync("GiftCardQueryFee", new object[] {
                        version,
                        terminalId,
                        clerkId,
                        productId,
                        invoiceNo,
                        languageOption}, this.GiftCardQueryFeeOperationCompleted, userState);
        }
        
        private void OnGiftCardQueryFeeOperationCompleted(object arg) {
            if ((this.GiftCardQueryFeeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GiftCardQueryFeeCompleted(this, new GiftCardQueryFeeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="urn:debisys-soap-services", ResponseNamespace="urn:debisys-soap-services")]
        [return: System.Xml.Serialization.SoapElementAttribute("StoredValueLoadReturn")]
        public string StoredValueLoad(string version, string terminalId, string clerkId, string productId, string cardNumber, string amount, string invoiceNo, string languageOption) {
            object[] results = this.Invoke("StoredValueLoad", new object[] {
                        version,
                        terminalId,
                        clerkId,
                        productId,
                        cardNumber,
                        amount,
                        invoiceNo,
                        languageOption});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void StoredValueLoadAsync(string version, string terminalId, string clerkId, string productId, string cardNumber, string amount, string invoiceNo, string languageOption) {
            this.StoredValueLoadAsync(version, terminalId, clerkId, productId, cardNumber, amount, invoiceNo, languageOption, null);
        }
        
        /// <remarks/>
        public void StoredValueLoadAsync(string version, string terminalId, string clerkId, string productId, string cardNumber, string amount, string invoiceNo, string languageOption, object userState) {
            if ((this.StoredValueLoadOperationCompleted == null)) {
                this.StoredValueLoadOperationCompleted = new System.Threading.SendOrPostCallback(this.OnStoredValueLoadOperationCompleted);
            }
            this.InvokeAsync("StoredValueLoad", new object[] {
                        version,
                        terminalId,
                        clerkId,
                        productId,
                        cardNumber,
                        amount,
                        invoiceNo,
                        languageOption}, this.StoredValueLoadOperationCompleted, userState);
        }
        
        private void OnStoredValueLoadOperationCompleted(object arg) {
            if ((this.StoredValueLoadCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.StoredValueLoadCompleted(this, new StoredValueLoadCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="urn:debisys-soap-services", ResponseNamespace="urn:debisys-soap-services")]
        [return: System.Xml.Serialization.SoapElementAttribute("StoredValueRefundReturn")]
        public string StoredValueRefund(string version, string terminalId, string clerkId, string productId, string transactionId, string invoiceNo, string languageOption) {
            object[] results = this.Invoke("StoredValueRefund", new object[] {
                        version,
                        terminalId,
                        clerkId,
                        productId,
                        transactionId,
                        invoiceNo,
                        languageOption});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void StoredValueRefundAsync(string version, string terminalId, string clerkId, string productId, string transactionId, string invoiceNo, string languageOption) {
            this.StoredValueRefundAsync(version, terminalId, clerkId, productId, transactionId, invoiceNo, languageOption, null);
        }
        
        /// <remarks/>
        public void StoredValueRefundAsync(string version, string terminalId, string clerkId, string productId, string transactionId, string invoiceNo, string languageOption, object userState) {
            if ((this.StoredValueRefundOperationCompleted == null)) {
                this.StoredValueRefundOperationCompleted = new System.Threading.SendOrPostCallback(this.OnStoredValueRefundOperationCompleted);
            }
            this.InvokeAsync("StoredValueRefund", new object[] {
                        version,
                        terminalId,
                        clerkId,
                        productId,
                        transactionId,
                        invoiceNo,
                        languageOption}, this.StoredValueRefundOperationCompleted, userState);
        }
        
        private void OnStoredValueRefundOperationCompleted(object arg) {
            if ((this.StoredValueRefundCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.StoredValueRefundCompleted(this, new StoredValueRefundCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="urn:debisys-soap-services", ResponseNamespace="urn:debisys-soap-services")]
        [return: System.Xml.Serialization.SoapElementAttribute("StoredValueBalanceReturn")]
        public string StoredValueBalance(string version, string terminalId, string clerkId, string productId, string cardNumber, string invoiceNo, string languageOption) {
            object[] results = this.Invoke("StoredValueBalance", new object[] {
                        version,
                        terminalId,
                        clerkId,
                        productId,
                        cardNumber,
                        invoiceNo,
                        languageOption});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void StoredValueBalanceAsync(string version, string terminalId, string clerkId, string productId, string cardNumber, string invoiceNo, string languageOption) {
            this.StoredValueBalanceAsync(version, terminalId, clerkId, productId, cardNumber, invoiceNo, languageOption, null);
        }
        
        /// <remarks/>
        public void StoredValueBalanceAsync(string version, string terminalId, string clerkId, string productId, string cardNumber, string invoiceNo, string languageOption, object userState) {
            if ((this.StoredValueBalanceOperationCompleted == null)) {
                this.StoredValueBalanceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnStoredValueBalanceOperationCompleted);
            }
            this.InvokeAsync("StoredValueBalance", new object[] {
                        version,
                        terminalId,
                        clerkId,
                        productId,
                        cardNumber,
                        invoiceNo,
                        languageOption}, this.StoredValueBalanceOperationCompleted, userState);
        }
        
        private void OnStoredValueBalanceOperationCompleted(object arg) {
            if ((this.StoredValueBalanceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.StoredValueBalanceCompleted(this, new StoredValueBalanceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="urn:debisys-soap-services", ResponseNamespace="urn:debisys-soap-services")]
        [return: System.Xml.Serialization.SoapElementAttribute("StoredValueActivateReturn")]
        public string StoredValueActivate(string version, string terminalId, string clerkId, string productId, string serialNumber, string amount, string invoiceNo, string languageOption) {
            object[] results = this.Invoke("StoredValueActivate", new object[] {
                        version,
                        terminalId,
                        clerkId,
                        productId,
                        serialNumber,
                        amount,
                        invoiceNo,
                        languageOption});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void StoredValueActivateAsync(string version, string terminalId, string clerkId, string productId, string serialNumber, string amount, string invoiceNo, string languageOption) {
            this.StoredValueActivateAsync(version, terminalId, clerkId, productId, serialNumber, amount, invoiceNo, languageOption, null);
        }
        
        /// <remarks/>
        public void StoredValueActivateAsync(string version, string terminalId, string clerkId, string productId, string serialNumber, string amount, string invoiceNo, string languageOption, object userState) {
            if ((this.StoredValueActivateOperationCompleted == null)) {
                this.StoredValueActivateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnStoredValueActivateOperationCompleted);
            }
            this.InvokeAsync("StoredValueActivate", new object[] {
                        version,
                        terminalId,
                        clerkId,
                        productId,
                        serialNumber,
                        amount,
                        invoiceNo,
                        languageOption}, this.StoredValueActivateOperationCompleted, userState);
        }
        
        private void OnStoredValueActivateOperationCompleted(object arg) {
            if ((this.StoredValueActivateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.StoredValueActivateCompleted(this, new StoredValueActivateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="urn:debisys-soap-services", ResponseNamespace="urn:debisys-soap-services")]
        [return: System.Xml.Serialization.SoapElementAttribute("StoredValueDeactivateReturn")]
        public string StoredValueDeactivate(string version, string terminalId, string clerkId, string productId, string transactionId, string invoiceNo, string languageOption) {
            object[] results = this.Invoke("StoredValueDeactivate", new object[] {
                        version,
                        terminalId,
                        clerkId,
                        productId,
                        transactionId,
                        invoiceNo,
                        languageOption});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void StoredValueDeactivateAsync(string version, string terminalId, string clerkId, string productId, string transactionId, string invoiceNo, string languageOption) {
            this.StoredValueDeactivateAsync(version, terminalId, clerkId, productId, transactionId, invoiceNo, languageOption, null);
        }
        
        /// <remarks/>
        public void StoredValueDeactivateAsync(string version, string terminalId, string clerkId, string productId, string transactionId, string invoiceNo, string languageOption, object userState) {
            if ((this.StoredValueDeactivateOperationCompleted == null)) {
                this.StoredValueDeactivateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnStoredValueDeactivateOperationCompleted);
            }
            this.InvokeAsync("StoredValueDeactivate", new object[] {
                        version,
                        terminalId,
                        clerkId,
                        productId,
                        transactionId,
                        invoiceNo,
                        languageOption}, this.StoredValueDeactivateOperationCompleted, userState);
        }
        
        private void OnStoredValueDeactivateOperationCompleted(object arg) {
            if ((this.StoredValueDeactivateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.StoredValueDeactivateCompleted(this, new StoredValueDeactivateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="urn:debisys-soap-services", ResponseNamespace="urn:debisys-soap-services")]
        [return: System.Xml.Serialization.SoapElementAttribute("StoredValueQueryFeeReturn")]
        public string StoredValueQueryFee(string version, string terminalId, string clerkId, string productId, string operation, string amount, string invoiceNo, string languageOption) {
            object[] results = this.Invoke("StoredValueQueryFee", new object[] {
                        version,
                        terminalId,
                        clerkId,
                        productId,
                        operation,
                        amount,
                        invoiceNo,
                        languageOption});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void StoredValueQueryFeeAsync(string version, string terminalId, string clerkId, string productId, string operation, string amount, string invoiceNo, string languageOption) {
            this.StoredValueQueryFeeAsync(version, terminalId, clerkId, productId, operation, amount, invoiceNo, languageOption, null);
        }
        
        /// <remarks/>
        public void StoredValueQueryFeeAsync(string version, string terminalId, string clerkId, string productId, string operation, string amount, string invoiceNo, string languageOption, object userState) {
            if ((this.StoredValueQueryFeeOperationCompleted == null)) {
                this.StoredValueQueryFeeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnStoredValueQueryFeeOperationCompleted);
            }
            this.InvokeAsync("StoredValueQueryFee", new object[] {
                        version,
                        terminalId,
                        clerkId,
                        productId,
                        operation,
                        amount,
                        invoiceNo,
                        languageOption}, this.StoredValueQueryFeeOperationCompleted, userState);
        }
        
        private void OnStoredValueQueryFeeOperationCompleted(object arg) {
            if ((this.StoredValueQueryFeeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.StoredValueQueryFeeCompleted(this, new StoredValueQueryFeeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="urn:debisys-soap-services", ResponseNamespace="urn:debisys-soap-services")]
        [return: System.Xml.Serialization.SoapElementAttribute("CheckTransactionByInvoiceNoReturn")]
        public string CheckTransactionByInvoiceNo(string version, string terminalId, string clerkId, string invoiceNo) {
            object[] results = this.Invoke("CheckTransactionByInvoiceNo", new object[] {
                        version,
                        terminalId,
                        clerkId,
                        invoiceNo});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CheckTransactionByInvoiceNoAsync(string version, string terminalId, string clerkId, string invoiceNo) {
            this.CheckTransactionByInvoiceNoAsync(version, terminalId, clerkId, invoiceNo, null);
        }
        
        /// <remarks/>
        public void CheckTransactionByInvoiceNoAsync(string version, string terminalId, string clerkId, string invoiceNo, object userState) {
            if ((this.CheckTransactionByInvoiceNoOperationCompleted == null)) {
                this.CheckTransactionByInvoiceNoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckTransactionByInvoiceNoOperationCompleted);
            }
            this.InvokeAsync("CheckTransactionByInvoiceNo", new object[] {
                        version,
                        terminalId,
                        clerkId,
                        invoiceNo}, this.CheckTransactionByInvoiceNoOperationCompleted, userState);
        }
        
        private void OnCheckTransactionByInvoiceNoOperationCompleted(object arg) {
            if ((this.CheckTransactionByInvoiceNoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckTransactionByInvoiceNoCompleted(this, new CheckTransactionByInvoiceNoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="urn:debisys-soap-services", ResponseNamespace="urn:debisys-soap-services")]
        [return: System.Xml.Serialization.SoapElementAttribute("checkMerchantPaymentReturn")]
        public string checkMerchantPayment(string version, string merchantID, string amount, string refNumber, string userName, string password) {
            object[] results = this.Invoke("checkMerchantPayment", new object[] {
                        version,
                        merchantID,
                        amount,
                        refNumber,
                        userName,
                        password});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void checkMerchantPaymentAsync(string version, string merchantID, string amount, string refNumber, string userName, string password) {
            this.checkMerchantPaymentAsync(version, merchantID, amount, refNumber, userName, password, null);
        }
        
        /// <remarks/>
        public void checkMerchantPaymentAsync(string version, string merchantID, string amount, string refNumber, string userName, string password, object userState) {
            if ((this.checkMerchantPaymentOperationCompleted == null)) {
                this.checkMerchantPaymentOperationCompleted = new System.Threading.SendOrPostCallback(this.OncheckMerchantPaymentOperationCompleted);
            }
            this.InvokeAsync("checkMerchantPayment", new object[] {
                        version,
                        merchantID,
                        amount,
                        refNumber,
                        userName,
                        password}, this.checkMerchantPaymentOperationCompleted, userState);
        }
        
        private void OncheckMerchantPaymentOperationCompleted(object arg) {
            if ((this.checkMerchantPaymentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.checkMerchantPaymentCompleted(this, new checkMerchantPaymentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="urn:debisys-soap-services", ResponseNamespace="urn:debisys-soap-services")]
        [return: System.Xml.Serialization.SoapElementAttribute("LookUpTransactionByInvocieNoReturn")]
        public string LookUpTransactionByInvocieNo(string version, string terminalId, string clerkId, string invoiceNo) {
            object[] results = this.Invoke("LookUpTransactionByInvocieNo", new object[] {
                        version,
                        terminalId,
                        clerkId,
                        invoiceNo});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void LookUpTransactionByInvocieNoAsync(string version, string terminalId, string clerkId, string invoiceNo) {
            this.LookUpTransactionByInvocieNoAsync(version, terminalId, clerkId, invoiceNo, null);
        }
        
        /// <remarks/>
        public void LookUpTransactionByInvocieNoAsync(string version, string terminalId, string clerkId, string invoiceNo, object userState) {
            if ((this.LookUpTransactionByInvocieNoOperationCompleted == null)) {
                this.LookUpTransactionByInvocieNoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLookUpTransactionByInvocieNoOperationCompleted);
            }
            this.InvokeAsync("LookUpTransactionByInvocieNo", new object[] {
                        version,
                        terminalId,
                        clerkId,
                        invoiceNo}, this.LookUpTransactionByInvocieNoOperationCompleted, userState);
        }
        
        private void OnLookUpTransactionByInvocieNoOperationCompleted(object arg) {
            if ((this.LookUpTransactionByInvocieNoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LookUpTransactionByInvocieNoCompleted(this, new LookUpTransactionByInvocieNoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="urn:debisys-soap-services", ResponseNamespace="urn:debisys-soap-services")]
        [return: System.Xml.Serialization.SoapElementAttribute("GetBProductListReturn")]
        public string GetBProductList(string version, string terminalId) {
            object[] results = this.Invoke("GetBProductList", new object[] {
                        version,
                        terminalId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetBProductListAsync(string version, string terminalId) {
            this.GetBProductListAsync(version, terminalId, null);
        }
        
        /// <remarks/>
        public void GetBProductListAsync(string version, string terminalId, object userState) {
            if ((this.GetBProductListOperationCompleted == null)) {
                this.GetBProductListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetBProductListOperationCompleted);
            }
            this.InvokeAsync("GetBProductList", new object[] {
                        version,
                        terminalId}, this.GetBProductListOperationCompleted, userState);
        }
        
        private void OnGetBProductListOperationCompleted(object arg) {
            if ((this.GetBProductListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetBProductListCompleted(this, new GetBProductListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="urn:debisys-soap-services", ResponseNamespace="urn:debisys-soap-services")]
        [return: System.Xml.Serialization.SoapElementAttribute("CheckProviderStatusReturn")]
        public string CheckProviderStatus(string version, string terminalId, string productId) {
            object[] results = this.Invoke("CheckProviderStatus", new object[] {
                        version,
                        terminalId,
                        productId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CheckProviderStatusAsync(string version, string terminalId, string productId) {
            this.CheckProviderStatusAsync(version, terminalId, productId, null);
        }
        
        /// <remarks/>
        public void CheckProviderStatusAsync(string version, string terminalId, string productId, object userState) {
            if ((this.CheckProviderStatusOperationCompleted == null)) {
                this.CheckProviderStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckProviderStatusOperationCompleted);
            }
            this.InvokeAsync("CheckProviderStatus", new object[] {
                        version,
                        terminalId,
                        productId}, this.CheckProviderStatusOperationCompleted, userState);
        }
        
        private void OnCheckProviderStatusOperationCompleted(object arg) {
            if ((this.CheckProviderStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckProviderStatusCompleted(this, new CheckProviderStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="urn:debisys-soap-services", ResponseNamespace="urn:debisys-soap-services")]
        [return: System.Xml.Serialization.SoapElementAttribute("sendNotificationReturn")]
        public string sendNotification(string version, string emails, string messages, string subject) {
            object[] results = this.Invoke("sendNotification", new object[] {
                        version,
                        emails,
                        messages,
                        subject});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void sendNotificationAsync(string version, string emails, string messages, string subject) {
            this.sendNotificationAsync(version, emails, messages, subject, null);
        }
        
        /// <remarks/>
        public void sendNotificationAsync(string version, string emails, string messages, string subject, object userState) {
            if ((this.sendNotificationOperationCompleted == null)) {
                this.sendNotificationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsendNotificationOperationCompleted);
            }
            this.InvokeAsync("sendNotification", new object[] {
                        version,
                        emails,
                        messages,
                        subject}, this.sendNotificationOperationCompleted, userState);
        }
        
        private void OnsendNotificationOperationCompleted(object arg) {
            if ((this.sendNotificationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.sendNotificationCompleted(this, new sendNotificationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="urn:debisys-soap-services", ResponseNamespace="urn:debisys-soap-services")]
        [return: System.Xml.Serialization.SoapElementAttribute("GetTicketForTransactionReturn")]
        public string GetTicketForTransaction(string version, string terminalId, string clerkId, string productId, string amount, string language) {
            object[] results = this.Invoke("GetTicketForTransaction", new object[] {
                        version,
                        terminalId,
                        clerkId,
                        productId,
                        amount,
                        language});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetTicketForTransactionAsync(string version, string terminalId, string clerkId, string productId, string amount, string language) {
            this.GetTicketForTransactionAsync(version, terminalId, clerkId, productId, amount, language, null);
        }
        
        /// <remarks/>
        public void GetTicketForTransactionAsync(string version, string terminalId, string clerkId, string productId, string amount, string language, object userState) {
            if ((this.GetTicketForTransactionOperationCompleted == null)) {
                this.GetTicketForTransactionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTicketForTransactionOperationCompleted);
            }
            this.InvokeAsync("GetTicketForTransaction", new object[] {
                        version,
                        terminalId,
                        clerkId,
                        productId,
                        amount,
                        language}, this.GetTicketForTransactionOperationCompleted, userState);
        }
        
        private void OnGetTicketForTransactionOperationCompleted(object arg) {
            if ((this.GetTicketForTransactionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTicketForTransactionCompleted(this, new GetTicketForTransactionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="urn:debisys-soap-services", ResponseNamespace="urn:debisys-soap-services")]
        [return: System.Xml.Serialization.SoapElementAttribute("GetProductFeeReturn")]
        public string GetProductFee(string version, string productId, string amount) {
            object[] results = this.Invoke("GetProductFee", new object[] {
                        version,
                        productId,
                        amount});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetProductFeeAsync(string version, string productId, string amount) {
            this.GetProductFeeAsync(version, productId, amount, null);
        }
        
        /// <remarks/>
        public void GetProductFeeAsync(string version, string productId, string amount, object userState) {
            if ((this.GetProductFeeOperationCompleted == null)) {
                this.GetProductFeeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetProductFeeOperationCompleted);
            }
            this.InvokeAsync("GetProductFee", new object[] {
                        version,
                        productId,
                        amount}, this.GetProductFeeOperationCompleted, userState);
        }
        
        private void OnGetProductFeeOperationCompleted(object arg) {
            if ((this.GetProductFeeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetProductFeeCompleted(this, new GetProductFeeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="urn:debisys-soap-services", ResponseNamespace="urn:debisys-soap-services")]
        [return: System.Xml.Serialization.SoapElementAttribute("GetProductUFeeReturn")]
        public string GetProductUFee(string version, string productId) {
            object[] results = this.Invoke("GetProductUFee", new object[] {
                        version,
                        productId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetProductUFeeAsync(string version, string productId) {
            this.GetProductUFeeAsync(version, productId, null);
        }
        
        /// <remarks/>
        public void GetProductUFeeAsync(string version, string productId, object userState) {
            if ((this.GetProductUFeeOperationCompleted == null)) {
                this.GetProductUFeeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetProductUFeeOperationCompleted);
            }
            this.InvokeAsync("GetProductUFee", new object[] {
                        version,
                        productId}, this.GetProductUFeeOperationCompleted, userState);
        }
        
        private void OnGetProductUFeeOperationCompleted(object arg) {
            if ((this.GetProductUFeeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetProductUFeeCompleted(this, new GetProductUFeeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="urn:debisys-soap-services", ResponseNamespace="urn:debisys-soap-services")]
        [return: System.Xml.Serialization.SoapElementAttribute("GetMerchantBalanceReturn")]
        public string GetMerchantBalance(string version, string merchantID, string userName, string password) {
            object[] results = this.Invoke("GetMerchantBalance", new object[] {
                        version,
                        merchantID,
                        userName,
                        password});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetMerchantBalanceAsync(string version, string merchantID, string userName, string password) {
            this.GetMerchantBalanceAsync(version, merchantID, userName, password, null);
        }
        
        /// <remarks/>
        public void GetMerchantBalanceAsync(string version, string merchantID, string userName, string password, object userState) {
            if ((this.GetMerchantBalanceOperationCompleted == null)) {
                this.GetMerchantBalanceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMerchantBalanceOperationCompleted);
            }
            this.InvokeAsync("GetMerchantBalance", new object[] {
                        version,
                        merchantID,
                        userName,
                        password}, this.GetMerchantBalanceOperationCompleted, userState);
        }
        
        private void OnGetMerchantBalanceOperationCompleted(object arg) {
            if ((this.GetMerchantBalanceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMerchantBalanceCompleted(this, new GetMerchantBalanceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="urn:debisys-soap-services", ResponseNamespace="urn:debisys-soap-services")]
        [return: System.Xml.Serialization.SoapElementAttribute("GetTerminalBalanceReturn")]
        public string GetTerminalBalance(string version, string terminalId, string userName, string password) {
            object[] results = this.Invoke("GetTerminalBalance", new object[] {
                        version,
                        terminalId,
                        userName,
                        password});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetTerminalBalanceAsync(string version, string terminalId, string userName, string password) {
            this.GetTerminalBalanceAsync(version, terminalId, userName, password, null);
        }
        
        /// <remarks/>
        public void GetTerminalBalanceAsync(string version, string terminalId, string userName, string password, object userState) {
            if ((this.GetTerminalBalanceOperationCompleted == null)) {
                this.GetTerminalBalanceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTerminalBalanceOperationCompleted);
            }
            this.InvokeAsync("GetTerminalBalance", new object[] {
                        version,
                        terminalId,
                        userName,
                        password}, this.GetTerminalBalanceOperationCompleted, userState);
        }
        
        private void OnGetTerminalBalanceOperationCompleted(object arg) {
            if ((this.GetTerminalBalanceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTerminalBalanceCompleted(this, new GetTerminalBalanceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="urn:debisys-soap-services", ResponseNamespace="urn:debisys-soap-services")]
        [return: System.Xml.Serialization.SoapElementAttribute("BillPaymentInfoMxReturn")]
        public string BillPaymentInfoMx(string version, string terminalId, string clerkId, string productId, string accountId, string invoiceNo, string languageOption) {
            object[] results = this.Invoke("BillPaymentInfoMx", new object[] {
                        version,
                        terminalId,
                        clerkId,
                        productId,
                        accountId,
                        invoiceNo,
                        languageOption});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void BillPaymentInfoMxAsync(string version, string terminalId, string clerkId, string productId, string accountId, string invoiceNo, string languageOption) {
            this.BillPaymentInfoMxAsync(version, terminalId, clerkId, productId, accountId, invoiceNo, languageOption, null);
        }
        
        /// <remarks/>
        public void BillPaymentInfoMxAsync(string version, string terminalId, string clerkId, string productId, string accountId, string invoiceNo, string languageOption, object userState) {
            if ((this.BillPaymentInfoMxOperationCompleted == null)) {
                this.BillPaymentInfoMxOperationCompleted = new System.Threading.SendOrPostCallback(this.OnBillPaymentInfoMxOperationCompleted);
            }
            this.InvokeAsync("BillPaymentInfoMx", new object[] {
                        version,
                        terminalId,
                        clerkId,
                        productId,
                        accountId,
                        invoiceNo,
                        languageOption}, this.BillPaymentInfoMxOperationCompleted, userState);
        }
        
        private void OnBillPaymentInfoMxOperationCompleted(object arg) {
            if ((this.BillPaymentInfoMxCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.BillPaymentInfoMxCompleted(this, new BillPaymentInfoMxCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="urn:debisys-soap-services", ResponseNamespace="urn:debisys-soap-services")]
        [return: System.Xml.Serialization.SoapElementAttribute("BillPaymentSaleMxReturn")]
        public string BillPaymentSaleMx(string version, string terminalId, string clerkId, string productId, string invoiceNo, string languageOption, string fields) {
            object[] results = this.Invoke("BillPaymentSaleMx", new object[] {
                        version,
                        terminalId,
                        clerkId,
                        productId,
                        invoiceNo,
                        languageOption,
                        fields});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void BillPaymentSaleMxAsync(string version, string terminalId, string clerkId, string productId, string invoiceNo, string languageOption, string fields) {
            this.BillPaymentSaleMxAsync(version, terminalId, clerkId, productId, invoiceNo, languageOption, fields, null);
        }
        
        /// <remarks/>
        public void BillPaymentSaleMxAsync(string version, string terminalId, string clerkId, string productId, string invoiceNo, string languageOption, string fields, object userState) {
            if ((this.BillPaymentSaleMxOperationCompleted == null)) {
                this.BillPaymentSaleMxOperationCompleted = new System.Threading.SendOrPostCallback(this.OnBillPaymentSaleMxOperationCompleted);
            }
            this.InvokeAsync("BillPaymentSaleMx", new object[] {
                        version,
                        terminalId,
                        clerkId,
                        productId,
                        invoiceNo,
                        languageOption,
                        fields}, this.BillPaymentSaleMxOperationCompleted, userState);
        }
        
        private void OnBillPaymentSaleMxOperationCompleted(object arg) {
            if ((this.BillPaymentSaleMxCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.BillPaymentSaleMxCompleted(this, new BillPaymentSaleMxCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="urn:debisys-soap-services", ResponseNamespace="urn:debisys-soap-services")]
        [return: System.Xml.Serialization.SoapElementAttribute("DoSimActivationGSM1Return")]
        public string DoSimActivationGSM1(string version, string terminalId, string clerkId, string producIdSim, string amountSim, string productIdPin, string amountPin, string esn, string sim, string zipCode, string netWorkType, string invoiceNo, string language) {
            object[] results = this.Invoke("DoSimActivationGSM1", new object[] {
                        version,
                        terminalId,
                        clerkId,
                        producIdSim,
                        amountSim,
                        productIdPin,
                        amountPin,
                        esn,
                        sim,
                        zipCode,
                        netWorkType,
                        invoiceNo,
                        language});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void DoSimActivationGSM1Async(string version, string terminalId, string clerkId, string producIdSim, string amountSim, string productIdPin, string amountPin, string esn, string sim, string zipCode, string netWorkType, string invoiceNo, string language) {
            this.DoSimActivationGSM1Async(version, terminalId, clerkId, producIdSim, amountSim, productIdPin, amountPin, esn, sim, zipCode, netWorkType, invoiceNo, language, null);
        }
        
        /// <remarks/>
        public void DoSimActivationGSM1Async(string version, string terminalId, string clerkId, string producIdSim, string amountSim, string productIdPin, string amountPin, string esn, string sim, string zipCode, string netWorkType, string invoiceNo, string language, object userState) {
            if ((this.DoSimActivationGSM1OperationCompleted == null)) {
                this.DoSimActivationGSM1OperationCompleted = new System.Threading.SendOrPostCallback(this.OnDoSimActivationGSM1OperationCompleted);
            }
            this.InvokeAsync("DoSimActivationGSM1", new object[] {
                        version,
                        terminalId,
                        clerkId,
                        producIdSim,
                        amountSim,
                        productIdPin,
                        amountPin,
                        esn,
                        sim,
                        zipCode,
                        netWorkType,
                        invoiceNo,
                        language}, this.DoSimActivationGSM1OperationCompleted, userState);
        }
        
        private void OnDoSimActivationGSM1OperationCompleted(object arg) {
            if ((this.DoSimActivationGSM1Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DoSimActivationGSM1Completed(this, new DoSimActivationGSM1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="urn:debisys-soap-services", ResponseNamespace="urn:debisys-soap-services")]
        [return: System.Xml.Serialization.SoapElementAttribute("DoSimActivationCDMA1Return")]
        public string DoSimActivationCDMA1(string version, string terminalId, string clerkId, string producIdSim, string amountSim, string productIdPin, string amountPin, string esn, string zipCode, string netWorkType, string invoiceNo, string language) {
            object[] results = this.Invoke("DoSimActivationCDMA1", new object[] {
                        version,
                        terminalId,
                        clerkId,
                        producIdSim,
                        amountSim,
                        productIdPin,
                        amountPin,
                        esn,
                        zipCode,
                        netWorkType,
                        invoiceNo,
                        language});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void DoSimActivationCDMA1Async(string version, string terminalId, string clerkId, string producIdSim, string amountSim, string productIdPin, string amountPin, string esn, string zipCode, string netWorkType, string invoiceNo, string language) {
            this.DoSimActivationCDMA1Async(version, terminalId, clerkId, producIdSim, amountSim, productIdPin, amountPin, esn, zipCode, netWorkType, invoiceNo, language, null);
        }
        
        /// <remarks/>
        public void DoSimActivationCDMA1Async(string version, string terminalId, string clerkId, string producIdSim, string amountSim, string productIdPin, string amountPin, string esn, string zipCode, string netWorkType, string invoiceNo, string language, object userState) {
            if ((this.DoSimActivationCDMA1OperationCompleted == null)) {
                this.DoSimActivationCDMA1OperationCompleted = new System.Threading.SendOrPostCallback(this.OnDoSimActivationCDMA1OperationCompleted);
            }
            this.InvokeAsync("DoSimActivationCDMA1", new object[] {
                        version,
                        terminalId,
                        clerkId,
                        producIdSim,
                        amountSim,
                        productIdPin,
                        amountPin,
                        esn,
                        zipCode,
                        netWorkType,
                        invoiceNo,
                        language}, this.DoSimActivationCDMA1OperationCompleted, userState);
        }
        
        private void OnDoSimActivationCDMA1OperationCompleted(object arg) {
            if ((this.DoSimActivationCDMA1Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DoSimActivationCDMA1Completed(this, new DoSimActivationCDMA1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="urn:debisys-soap-services", ResponseNamespace="urn:debisys-soap-services")]
        [return: System.Xml.Serialization.SoapElementAttribute("ApplyPaymentISOLevelReturn")]
        public string ApplyPaymentISOLevel(string version, string merchantID, string amount, string description, string refNumber, string userName, string password) {
            object[] results = this.Invoke("ApplyPaymentISOLevel", new object[] {
                        version,
                        merchantID,
                        amount,
                        description,
                        refNumber,
                        userName,
                        password});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ApplyPaymentISOLevelAsync(string version, string merchantID, string amount, string description, string refNumber, string userName, string password) {
            this.ApplyPaymentISOLevelAsync(version, merchantID, amount, description, refNumber, userName, password, null);
        }
        
        /// <remarks/>
        public void ApplyPaymentISOLevelAsync(string version, string merchantID, string amount, string description, string refNumber, string userName, string password, object userState) {
            if ((this.ApplyPaymentISOLevelOperationCompleted == null)) {
                this.ApplyPaymentISOLevelOperationCompleted = new System.Threading.SendOrPostCallback(this.OnApplyPaymentISOLevelOperationCompleted);
            }
            this.InvokeAsync("ApplyPaymentISOLevel", new object[] {
                        version,
                        merchantID,
                        amount,
                        description,
                        refNumber,
                        userName,
                        password}, this.ApplyPaymentISOLevelOperationCompleted, userState);
        }
        
        private void OnApplyPaymentISOLevelOperationCompleted(object arg) {
            if ((this.ApplyPaymentISOLevelCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ApplyPaymentISOLevelCompleted(this, new ApplyPaymentISOLevelCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="urn:debisys-soap-services", ResponseNamespace="urn:debisys-soap-services")]
        [return: System.Xml.Serialization.SoapElementAttribute("DMCActivationReturn")]
        public string DMCActivation(
                    string version, 
                    string terminalId, 
                    string clerkId, 
                    string producIdSim, 
                    string productIdPin, 
                    string address1, 
                    string address2, 
                    string city, 
                    string state, 
                    string zipCode, 
                    string contactNumber, 
                    string corpId, 
                    string dateOfBirth, 
                    string email, 
                    string firstName, 
                    string lastName, 
                    string password, 
                    string securityQuestionId, 
                    string securityQuestionAnswer, 
                    string serviceZipCode, 
                    string passcode, 
                    string sn, 
                    string iccid, 
                    string invoiceNo, 
                    string languageOption, 
                    string carrierId) {
            object[] results = this.Invoke("DMCActivation", new object[] {
                        version,
                        terminalId,
                        clerkId,
                        producIdSim,
                        productIdPin,
                        address1,
                        address2,
                        city,
                        state,
                        zipCode,
                        contactNumber,
                        corpId,
                        dateOfBirth,
                        email,
                        firstName,
                        lastName,
                        password,
                        securityQuestionId,
                        securityQuestionAnswer,
                        serviceZipCode,
                        passcode,
                        sn,
                        iccid,
                        invoiceNo,
                        languageOption,
                        carrierId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void DMCActivationAsync(
                    string version, 
                    string terminalId, 
                    string clerkId, 
                    string producIdSim, 
                    string productIdPin, 
                    string address1, 
                    string address2, 
                    string city, 
                    string state, 
                    string zipCode, 
                    string contactNumber, 
                    string corpId, 
                    string dateOfBirth, 
                    string email, 
                    string firstName, 
                    string lastName, 
                    string password, 
                    string securityQuestionId, 
                    string securityQuestionAnswer, 
                    string serviceZipCode, 
                    string passcode, 
                    string sn, 
                    string iccid, 
                    string invoiceNo, 
                    string languageOption, 
                    string carrierId) {
            this.DMCActivationAsync(version, terminalId, clerkId, producIdSim, productIdPin, address1, address2, city, state, zipCode, contactNumber, corpId, dateOfBirth, email, firstName, lastName, password, securityQuestionId, securityQuestionAnswer, serviceZipCode, passcode, sn, iccid, invoiceNo, languageOption, carrierId, null);
        }
        
        /// <remarks/>
        public void DMCActivationAsync(
                    string version, 
                    string terminalId, 
                    string clerkId, 
                    string producIdSim, 
                    string productIdPin, 
                    string address1, 
                    string address2, 
                    string city, 
                    string state, 
                    string zipCode, 
                    string contactNumber, 
                    string corpId, 
                    string dateOfBirth, 
                    string email, 
                    string firstName, 
                    string lastName, 
                    string password, 
                    string securityQuestionId, 
                    string securityQuestionAnswer, 
                    string serviceZipCode, 
                    string passcode, 
                    string sn, 
                    string iccid, 
                    string invoiceNo, 
                    string languageOption, 
                    string carrierId, 
                    object userState) {
            if ((this.DMCActivationOperationCompleted == null)) {
                this.DMCActivationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDMCActivationOperationCompleted);
            }
            this.InvokeAsync("DMCActivation", new object[] {
                        version,
                        terminalId,
                        clerkId,
                        producIdSim,
                        productIdPin,
                        address1,
                        address2,
                        city,
                        state,
                        zipCode,
                        contactNumber,
                        corpId,
                        dateOfBirth,
                        email,
                        firstName,
                        lastName,
                        password,
                        securityQuestionId,
                        securityQuestionAnswer,
                        serviceZipCode,
                        passcode,
                        sn,
                        iccid,
                        invoiceNo,
                        languageOption,
                        carrierId}, this.DMCActivationOperationCompleted, userState);
        }
        
        private void OnDMCActivationOperationCompleted(object arg) {
            if ((this.DMCActivationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DMCActivationCompleted(this, new DMCActivationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="urn:debisys-soap-services", ResponseNamespace="urn:debisys-soap-services")]
        [return: System.Xml.Serialization.SoapElementAttribute("DMCDeviceCheckReturn")]
        public string DMCDeviceCheck(string version, string terminalId, string clerkId, string productId, string esn, string carrierId, string invoiceNo, string languageOption) {
            object[] results = this.Invoke("DMCDeviceCheck", new object[] {
                        version,
                        terminalId,
                        clerkId,
                        productId,
                        esn,
                        carrierId,
                        invoiceNo,
                        languageOption});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void DMCDeviceCheckAsync(string version, string terminalId, string clerkId, string productId, string esn, string carrierId, string invoiceNo, string languageOption) {
            this.DMCDeviceCheckAsync(version, terminalId, clerkId, productId, esn, carrierId, invoiceNo, languageOption, null);
        }
        
        /// <remarks/>
        public void DMCDeviceCheckAsync(string version, string terminalId, string clerkId, string productId, string esn, string carrierId, string invoiceNo, string languageOption, object userState) {
            if ((this.DMCDeviceCheckOperationCompleted == null)) {
                this.DMCDeviceCheckOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDMCDeviceCheckOperationCompleted);
            }
            this.InvokeAsync("DMCDeviceCheck", new object[] {
                        version,
                        terminalId,
                        clerkId,
                        productId,
                        esn,
                        carrierId,
                        invoiceNo,
                        languageOption}, this.DMCDeviceCheckOperationCompleted, userState);
        }
        
        private void OnDMCDeviceCheckOperationCompleted(object arg) {
            if ((this.DMCDeviceCheckCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DMCDeviceCheckCompleted(this, new DMCDeviceCheckCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="urn:debisys-soap-services", ResponseNamespace="urn:debisys-soap-services")]
        [return: System.Xml.Serialization.SoapElementAttribute("DMCPortInActivationReturn")]
        public string DMCPortInActivation(
                    string version, 
                    string terminalId, 
                    string clerkId, 
                    string producIdSim, 
                    string productIdPin, 
                    string address1, 
                    string address2, 
                    string city, 
                    string state, 
                    string zipCode, 
                    string contactNumber, 
                    string corpId, 
                    string dateOfBirth, 
                    string email, 
                    string firstName, 
                    string lastName, 
                    string password, 
                    string securityQuestionId, 
                    string securityQuestionAnswer, 
                    string serviceZipCode, 
                    string esn, 
                    string mdn, 
                    string passCode, 
                    string sn, 
                    string iccid, 
                    string portAccountNo, 
                    string portBusinessName, 
                    string portCity, 
                    string portFirstName, 
                    string portLastName, 
                    string portMdn, 
                    string portPasswordPin, 
                    string portState, 
                    string portStreetName, 
                    string portStreetNo, 
                    string portZip, 
                    string invoiceNo, 
                    string languageOption, 
                    string carrierId) {
            object[] results = this.Invoke("DMCPortInActivation", new object[] {
                        version,
                        terminalId,
                        clerkId,
                        producIdSim,
                        productIdPin,
                        address1,
                        address2,
                        city,
                        state,
                        zipCode,
                        contactNumber,
                        corpId,
                        dateOfBirth,
                        email,
                        firstName,
                        lastName,
                        password,
                        securityQuestionId,
                        securityQuestionAnswer,
                        serviceZipCode,
                        esn,
                        mdn,
                        passCode,
                        sn,
                        iccid,
                        portAccountNo,
                        portBusinessName,
                        portCity,
                        portFirstName,
                        portLastName,
                        portMdn,
                        portPasswordPin,
                        portState,
                        portStreetName,
                        portStreetNo,
                        portZip,
                        invoiceNo,
                        languageOption,
                        carrierId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void DMCPortInActivationAsync(
                    string version, 
                    string terminalId, 
                    string clerkId, 
                    string producIdSim, 
                    string productIdPin, 
                    string address1, 
                    string address2, 
                    string city, 
                    string state, 
                    string zipCode, 
                    string contactNumber, 
                    string corpId, 
                    string dateOfBirth, 
                    string email, 
                    string firstName, 
                    string lastName, 
                    string password, 
                    string securityQuestionId, 
                    string securityQuestionAnswer, 
                    string serviceZipCode, 
                    string esn, 
                    string mdn, 
                    string passCode, 
                    string sn, 
                    string iccid, 
                    string portAccountNo, 
                    string portBusinessName, 
                    string portCity, 
                    string portFirstName, 
                    string portLastName, 
                    string portMdn, 
                    string portPasswordPin, 
                    string portState, 
                    string portStreetName, 
                    string portStreetNo, 
                    string portZip, 
                    string invoiceNo, 
                    string languageOption, 
                    string carrierId) {
            this.DMCPortInActivationAsync(version, terminalId, clerkId, producIdSim, productIdPin, address1, address2, city, state, zipCode, contactNumber, corpId, dateOfBirth, email, firstName, lastName, password, securityQuestionId, securityQuestionAnswer, serviceZipCode, esn, mdn, passCode, sn, iccid, portAccountNo, portBusinessName, portCity, portFirstName, portLastName, portMdn, portPasswordPin, portState, portStreetName, portStreetNo, portZip, invoiceNo, languageOption, carrierId, null);
        }
        
        /// <remarks/>
        public void DMCPortInActivationAsync(
                    string version, 
                    string terminalId, 
                    string clerkId, 
                    string producIdSim, 
                    string productIdPin, 
                    string address1, 
                    string address2, 
                    string city, 
                    string state, 
                    string zipCode, 
                    string contactNumber, 
                    string corpId, 
                    string dateOfBirth, 
                    string email, 
                    string firstName, 
                    string lastName, 
                    string password, 
                    string securityQuestionId, 
                    string securityQuestionAnswer, 
                    string serviceZipCode, 
                    string esn, 
                    string mdn, 
                    string passCode, 
                    string sn, 
                    string iccid, 
                    string portAccountNo, 
                    string portBusinessName, 
                    string portCity, 
                    string portFirstName, 
                    string portLastName, 
                    string portMdn, 
                    string portPasswordPin, 
                    string portState, 
                    string portStreetName, 
                    string portStreetNo, 
                    string portZip, 
                    string invoiceNo, 
                    string languageOption, 
                    string carrierId, 
                    object userState) {
            if ((this.DMCPortInActivationOperationCompleted == null)) {
                this.DMCPortInActivationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDMCPortInActivationOperationCompleted);
            }
            this.InvokeAsync("DMCPortInActivation", new object[] {
                        version,
                        terminalId,
                        clerkId,
                        producIdSim,
                        productIdPin,
                        address1,
                        address2,
                        city,
                        state,
                        zipCode,
                        contactNumber,
                        corpId,
                        dateOfBirth,
                        email,
                        firstName,
                        lastName,
                        password,
                        securityQuestionId,
                        securityQuestionAnswer,
                        serviceZipCode,
                        esn,
                        mdn,
                        passCode,
                        sn,
                        iccid,
                        portAccountNo,
                        portBusinessName,
                        portCity,
                        portFirstName,
                        portLastName,
                        portMdn,
                        portPasswordPin,
                        portState,
                        portStreetName,
                        portStreetNo,
                        portZip,
                        invoiceNo,
                        languageOption,
                        carrierId}, this.DMCPortInActivationOperationCompleted, userState);
        }
        
        private void OnDMCPortInActivationOperationCompleted(object arg) {
            if ((this.DMCPortInActivationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DMCPortInActivationCompleted(this, new DMCPortInActivationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="urn:debisys-soap-services", ResponseNamespace="urn:debisys-soap-services")]
        [return: System.Xml.Serialization.SoapElementAttribute("GetPinProductsForActivationReturn")]
        public string GetPinProductsForActivation(string version, string terminalId, string clerkId, string activationProductId, string invoiceNo, string languageOption) {
            object[] results = this.Invoke("GetPinProductsForActivation", new object[] {
                        version,
                        terminalId,
                        clerkId,
                        activationProductId,
                        invoiceNo,
                        languageOption});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetPinProductsForActivationAsync(string version, string terminalId, string clerkId, string activationProductId, string invoiceNo, string languageOption) {
            this.GetPinProductsForActivationAsync(version, terminalId, clerkId, activationProductId, invoiceNo, languageOption, null);
        }
        
        /// <remarks/>
        public void GetPinProductsForActivationAsync(string version, string terminalId, string clerkId, string activationProductId, string invoiceNo, string languageOption, object userState) {
            if ((this.GetPinProductsForActivationOperationCompleted == null)) {
                this.GetPinProductsForActivationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPinProductsForActivationOperationCompleted);
            }
            this.InvokeAsync("GetPinProductsForActivation", new object[] {
                        version,
                        terminalId,
                        clerkId,
                        activationProductId,
                        invoiceNo,
                        languageOption}, this.GetPinProductsForActivationOperationCompleted, userState);
        }
        
        private void OnGetPinProductsForActivationOperationCompleted(object arg) {
            if ((this.GetPinProductsForActivationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPinProductsForActivationCompleted(this, new GetPinProductsForActivationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="urn:debisys-soap-services", ResponseNamespace="urn:debisys-soap-services")]
        [return: System.Xml.Serialization.SoapElementAttribute("ApplyPaymentAgentLevelReturn")]
        public string ApplyPaymentAgentLevel(string version, string merchantID, string amount, string description, string refNumber, string userName, string password) {
            object[] results = this.Invoke("ApplyPaymentAgentLevel", new object[] {
                        version,
                        merchantID,
                        amount,
                        description,
                        refNumber,
                        userName,
                        password});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ApplyPaymentAgentLevelAsync(string version, string merchantID, string amount, string description, string refNumber, string userName, string password) {
            this.ApplyPaymentAgentLevelAsync(version, merchantID, amount, description, refNumber, userName, password, null);
        }
        
        /// <remarks/>
        public void ApplyPaymentAgentLevelAsync(string version, string merchantID, string amount, string description, string refNumber, string userName, string password, object userState) {
            if ((this.ApplyPaymentAgentLevelOperationCompleted == null)) {
                this.ApplyPaymentAgentLevelOperationCompleted = new System.Threading.SendOrPostCallback(this.OnApplyPaymentAgentLevelOperationCompleted);
            }
            this.InvokeAsync("ApplyPaymentAgentLevel", new object[] {
                        version,
                        merchantID,
                        amount,
                        description,
                        refNumber,
                        userName,
                        password}, this.ApplyPaymentAgentLevelOperationCompleted, userState);
        }
        
        private void OnApplyPaymentAgentLevelOperationCompleted(object arg) {
            if ((this.ApplyPaymentAgentLevelCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ApplyPaymentAgentLevelCompleted(this, new ApplyPaymentAgentLevelCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="urn:debisys-soap-services", ResponseNamespace="urn:debisys-soap-services")]
        [return: System.Xml.Serialization.SoapElementAttribute("GetQuippiFxRateReturn")]
        public string GetQuippiFxRate(string Version, string SiteID, string ClerkID, string ProductID, string Amount, string InvoiceNo) {
            object[] results = this.Invoke("GetQuippiFxRate", new object[] {
                        Version,
                        SiteID,
                        ClerkID,
                        ProductID,
                        Amount,
                        InvoiceNo});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetQuippiFxRateAsync(string Version, string SiteID, string ClerkID, string ProductID, string Amount, string InvoiceNo) {
            this.GetQuippiFxRateAsync(Version, SiteID, ClerkID, ProductID, Amount, InvoiceNo, null);
        }
        
        /// <remarks/>
        public void GetQuippiFxRateAsync(string Version, string SiteID, string ClerkID, string ProductID, string Amount, string InvoiceNo, object userState) {
            if ((this.GetQuippiFxRateOperationCompleted == null)) {
                this.GetQuippiFxRateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetQuippiFxRateOperationCompleted);
            }
            this.InvokeAsync("GetQuippiFxRate", new object[] {
                        Version,
                        SiteID,
                        ClerkID,
                        ProductID,
                        Amount,
                        InvoiceNo}, this.GetQuippiFxRateOperationCompleted, userState);
        }
        
        private void OnGetQuippiFxRateOperationCompleted(object arg) {
            if ((this.GetQuippiFxRateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetQuippiFxRateCompleted(this, new GetQuippiFxRateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="urn:debisys-soap-services", ResponseNamespace="urn:debisys-soap-services")]
        [return: System.Xml.Serialization.SoapElementAttribute("QuippiCreatePINReturn")]
        public string QuippiCreatePIN(string Version, string SiteID, string ClerkID, string ProductID, string Amount, string SenderMobile, string SendeFirstName, string SenderLastName, string RecipientFirstName, string RecipientLastName, string ExternalFx, string InvoiceNo, string LanguageOption) {
            object[] results = this.Invoke("QuippiCreatePIN", new object[] {
                        Version,
                        SiteID,
                        ClerkID,
                        ProductID,
                        Amount,
                        SenderMobile,
                        SendeFirstName,
                        SenderLastName,
                        RecipientFirstName,
                        RecipientLastName,
                        ExternalFx,
                        InvoiceNo,
                        LanguageOption});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void QuippiCreatePINAsync(string Version, string SiteID, string ClerkID, string ProductID, string Amount, string SenderMobile, string SendeFirstName, string SenderLastName, string RecipientFirstName, string RecipientLastName, string ExternalFx, string InvoiceNo, string LanguageOption) {
            this.QuippiCreatePINAsync(Version, SiteID, ClerkID, ProductID, Amount, SenderMobile, SendeFirstName, SenderLastName, RecipientFirstName, RecipientLastName, ExternalFx, InvoiceNo, LanguageOption, null);
        }
        
        /// <remarks/>
        public void QuippiCreatePINAsync(string Version, string SiteID, string ClerkID, string ProductID, string Amount, string SenderMobile, string SendeFirstName, string SenderLastName, string RecipientFirstName, string RecipientLastName, string ExternalFx, string InvoiceNo, string LanguageOption, object userState) {
            if ((this.QuippiCreatePINOperationCompleted == null)) {
                this.QuippiCreatePINOperationCompleted = new System.Threading.SendOrPostCallback(this.OnQuippiCreatePINOperationCompleted);
            }
            this.InvokeAsync("QuippiCreatePIN", new object[] {
                        Version,
                        SiteID,
                        ClerkID,
                        ProductID,
                        Amount,
                        SenderMobile,
                        SendeFirstName,
                        SenderLastName,
                        RecipientFirstName,
                        RecipientLastName,
                        ExternalFx,
                        InvoiceNo,
                        LanguageOption}, this.QuippiCreatePINOperationCompleted, userState);
        }
        
        private void OnQuippiCreatePINOperationCompleted(object arg) {
            if ((this.QuippiCreatePINCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.QuippiCreatePINCompleted(this, new QuippiCreatePINCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="urn:debisys-soap-services", ResponseNamespace="urn:debisys-soap-services")]
        [return: System.Xml.Serialization.SoapElementAttribute("QuippiCancelPINReturn")]
        public string QuippiCancelPIN(string Version, string SiteID, string ClerkID, string ProductID, string Amount, string PIN, string PAN, string TransactionID, string InvoiceNo, string LanguageOption) {
            object[] results = this.Invoke("QuippiCancelPIN", new object[] {
                        Version,
                        SiteID,
                        ClerkID,
                        ProductID,
                        Amount,
                        PIN,
                        PAN,
                        TransactionID,
                        InvoiceNo,
                        LanguageOption});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void QuippiCancelPINAsync(string Version, string SiteID, string ClerkID, string ProductID, string Amount, string PIN, string PAN, string TransactionID, string InvoiceNo, string LanguageOption) {
            this.QuippiCancelPINAsync(Version, SiteID, ClerkID, ProductID, Amount, PIN, PAN, TransactionID, InvoiceNo, LanguageOption, null);
        }
        
        /// <remarks/>
        public void QuippiCancelPINAsync(string Version, string SiteID, string ClerkID, string ProductID, string Amount, string PIN, string PAN, string TransactionID, string InvoiceNo, string LanguageOption, object userState) {
            if ((this.QuippiCancelPINOperationCompleted == null)) {
                this.QuippiCancelPINOperationCompleted = new System.Threading.SendOrPostCallback(this.OnQuippiCancelPINOperationCompleted);
            }
            this.InvokeAsync("QuippiCancelPIN", new object[] {
                        Version,
                        SiteID,
                        ClerkID,
                        ProductID,
                        Amount,
                        PIN,
                        PAN,
                        TransactionID,
                        InvoiceNo,
                        LanguageOption}, this.QuippiCancelPINOperationCompleted, userState);
        }
        
        private void OnQuippiCancelPINOperationCompleted(object arg) {
            if ((this.QuippiCancelPINCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.QuippiCancelPINCompleted(this, new QuippiCancelPINCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="urn:debisys-soap-services", ResponseNamespace="urn:debisys-soap-services")]
        [return: System.Xml.Serialization.SoapElementAttribute("QuippiAuthorizeReturn")]
        public string QuippiAuthorize(string Version, string SiteID, string ClerkID, string PIN, string InvoiceNo) {
            object[] results = this.Invoke("QuippiAuthorize", new object[] {
                        Version,
                        SiteID,
                        ClerkID,
                        PIN,
                        InvoiceNo});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void QuippiAuthorizeAsync(string Version, string SiteID, string ClerkID, string PIN, string InvoiceNo) {
            this.QuippiAuthorizeAsync(Version, SiteID, ClerkID, PIN, InvoiceNo, null);
        }
        
        /// <remarks/>
        public void QuippiAuthorizeAsync(string Version, string SiteID, string ClerkID, string PIN, string InvoiceNo, object userState) {
            if ((this.QuippiAuthorizeOperationCompleted == null)) {
                this.QuippiAuthorizeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnQuippiAuthorizeOperationCompleted);
            }
            this.InvokeAsync("QuippiAuthorize", new object[] {
                        Version,
                        SiteID,
                        ClerkID,
                        PIN,
                        InvoiceNo}, this.QuippiAuthorizeOperationCompleted, userState);
        }
        
        private void OnQuippiAuthorizeOperationCompleted(object arg) {
            if ((this.QuippiAuthorizeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.QuippiAuthorizeCompleted(this, new QuippiAuthorizeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="urn:debisys-soap-services", ResponseNamespace="urn:debisys-soap-services")]
        [return: System.Xml.Serialization.SoapElementAttribute("LycaPortInDetailsReturn")]
        public string LycaPortInDetails(string version, string siteId, string clerkID, string productId, string languageOption, string referenceType, string referenceNumber) {
            object[] results = this.Invoke("LycaPortInDetails", new object[] {
                        version,
                        siteId,
                        clerkID,
                        productId,
                        languageOption,
                        referenceType,
                        referenceNumber});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void LycaPortInDetailsAsync(string version, string siteId, string clerkID, string productId, string languageOption, string referenceType, string referenceNumber) {
            this.LycaPortInDetailsAsync(version, siteId, clerkID, productId, languageOption, referenceType, referenceNumber, null);
        }
        
        /// <remarks/>
        public void LycaPortInDetailsAsync(string version, string siteId, string clerkID, string productId, string languageOption, string referenceType, string referenceNumber, object userState) {
            if ((this.LycaPortInDetailsOperationCompleted == null)) {
                this.LycaPortInDetailsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLycaPortInDetailsOperationCompleted);
            }
            this.InvokeAsync("LycaPortInDetails", new object[] {
                        version,
                        siteId,
                        clerkID,
                        productId,
                        languageOption,
                        referenceType,
                        referenceNumber}, this.LycaPortInDetailsOperationCompleted, userState);
        }
        
        private void OnLycaPortInDetailsOperationCompleted(object arg) {
            if ((this.LycaPortInDetailsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LycaPortInDetailsCompleted(this, new LycaPortInDetailsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="urn:debisys-soap-services", ResponseNamespace="urn:debisys-soap-services")]
        [return: System.Xml.Serialization.SoapElementAttribute("LycaCheckPortInEligibilityReturn")]
        public string LycaCheckPortInEligibility(string version, string siteId, string clerkID, string productId, string languageOption, string portinPhoneNumber, string portinSIMNumber) {
            object[] results = this.Invoke("LycaCheckPortInEligibility", new object[] {
                        version,
                        siteId,
                        clerkID,
                        productId,
                        languageOption,
                        portinPhoneNumber,
                        portinSIMNumber});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void LycaCheckPortInEligibilityAsync(string version, string siteId, string clerkID, string productId, string languageOption, string portinPhoneNumber, string portinSIMNumber) {
            this.LycaCheckPortInEligibilityAsync(version, siteId, clerkID, productId, languageOption, portinPhoneNumber, portinSIMNumber, null);
        }
        
        /// <remarks/>
        public void LycaCheckPortInEligibilityAsync(string version, string siteId, string clerkID, string productId, string languageOption, string portinPhoneNumber, string portinSIMNumber, object userState) {
            if ((this.LycaCheckPortInEligibilityOperationCompleted == null)) {
                this.LycaCheckPortInEligibilityOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLycaCheckPortInEligibilityOperationCompleted);
            }
            this.InvokeAsync("LycaCheckPortInEligibility", new object[] {
                        version,
                        siteId,
                        clerkID,
                        productId,
                        languageOption,
                        portinPhoneNumber,
                        portinSIMNumber}, this.LycaCheckPortInEligibilityOperationCompleted, userState);
        }
        
        private void OnLycaCheckPortInEligibilityOperationCompleted(object arg) {
            if ((this.LycaCheckPortInEligibilityCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LycaCheckPortInEligibilityCompleted(this, new LycaCheckPortInEligibilityCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="urn:debisys-soap-services", ResponseNamespace="urn:debisys-soap-services")]
        [return: System.Xml.Serialization.SoapElementAttribute("LycaCancelPortInReturn")]
        public string LycaCancelPortIn(string version, string siteId, string clerkID, string productId, string amount, string languageOption, string referenceNumber, string portinNumber, string emidaTransactionId) {
            object[] results = this.Invoke("LycaCancelPortIn", new object[] {
                        version,
                        siteId,
                        clerkID,
                        productId,
                        amount,
                        languageOption,
                        referenceNumber,
                        portinNumber,
                        emidaTransactionId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void LycaCancelPortInAsync(string version, string siteId, string clerkID, string productId, string amount, string languageOption, string referenceNumber, string portinNumber, string emidaTransactionId) {
            this.LycaCancelPortInAsync(version, siteId, clerkID, productId, amount, languageOption, referenceNumber, portinNumber, emidaTransactionId, null);
        }
        
        /// <remarks/>
        public void LycaCancelPortInAsync(string version, string siteId, string clerkID, string productId, string amount, string languageOption, string referenceNumber, string portinNumber, string emidaTransactionId, object userState) {
            if ((this.LycaCancelPortInOperationCompleted == null)) {
                this.LycaCancelPortInOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLycaCancelPortInOperationCompleted);
            }
            this.InvokeAsync("LycaCancelPortIn", new object[] {
                        version,
                        siteId,
                        clerkID,
                        productId,
                        amount,
                        languageOption,
                        referenceNumber,
                        portinNumber,
                        emidaTransactionId}, this.LycaCancelPortInOperationCompleted, userState);
        }
        
        private void OnLycaCancelPortInOperationCompleted(object arg) {
            if ((this.LycaCancelPortInCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LycaCancelPortInCompleted(this, new LycaCancelPortInCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="urn:debisys-soap-services", ResponseNamespace="urn:debisys-soap-services")]
        [return: System.Xml.Serialization.SoapElementAttribute("LycaModifyPortInReturn")]
        public string LycaModifyPortIn(string version, string siteId, string clerkID, string productId, string languageOption, string referenceNumber, string portInNumber, string portInSIMNumber, string portInAccountNumber, string portInPasswordPin, string portInZipCode) {
            object[] results = this.Invoke("LycaModifyPortIn", new object[] {
                        version,
                        siteId,
                        clerkID,
                        productId,
                        languageOption,
                        referenceNumber,
                        portInNumber,
                        portInSIMNumber,
                        portInAccountNumber,
                        portInPasswordPin,
                        portInZipCode});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void LycaModifyPortInAsync(string version, string siteId, string clerkID, string productId, string languageOption, string referenceNumber, string portInNumber, string portInSIMNumber, string portInAccountNumber, string portInPasswordPin, string portInZipCode) {
            this.LycaModifyPortInAsync(version, siteId, clerkID, productId, languageOption, referenceNumber, portInNumber, portInSIMNumber, portInAccountNumber, portInPasswordPin, portInZipCode, null);
        }
        
        /// <remarks/>
        public void LycaModifyPortInAsync(string version, string siteId, string clerkID, string productId, string languageOption, string referenceNumber, string portInNumber, string portInSIMNumber, string portInAccountNumber, string portInPasswordPin, string portInZipCode, object userState) {
            if ((this.LycaModifyPortInOperationCompleted == null)) {
                this.LycaModifyPortInOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLycaModifyPortInOperationCompleted);
            }
            this.InvokeAsync("LycaModifyPortIn", new object[] {
                        version,
                        siteId,
                        clerkID,
                        productId,
                        languageOption,
                        referenceNumber,
                        portInNumber,
                        portInSIMNumber,
                        portInAccountNumber,
                        portInPasswordPin,
                        portInZipCode}, this.LycaModifyPortInOperationCompleted, userState);
        }
        
        private void OnLycaModifyPortInOperationCompleted(object arg) {
            if ((this.LycaModifyPortInCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LycaModifyPortInCompleted(this, new LycaModifyPortInCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="urn:debisys-soap-services", ResponseNamespace="urn:debisys-soap-services")]
        [return: System.Xml.Serialization.SoapElementAttribute("validateLoginSecurityReturn")]
        public string validateLoginSecurity(string rootTag, string terminalId, string version, string ipAddress, string clerkID, string strResponse) {
            object[] results = this.Invoke("validateLoginSecurity", new object[] {
                        rootTag,
                        terminalId,
                        version,
                        ipAddress,
                        clerkID,
                        strResponse});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void validateLoginSecurityAsync(string rootTag, string terminalId, string version, string ipAddress, string clerkID, string strResponse) {
            this.validateLoginSecurityAsync(rootTag, terminalId, version, ipAddress, clerkID, strResponse, null);
        }
        
        /// <remarks/>
        public void validateLoginSecurityAsync(string rootTag, string terminalId, string version, string ipAddress, string clerkID, string strResponse, object userState) {
            if ((this.validateLoginSecurityOperationCompleted == null)) {
                this.validateLoginSecurityOperationCompleted = new System.Threading.SendOrPostCallback(this.OnvalidateLoginSecurityOperationCompleted);
            }
            this.InvokeAsync("validateLoginSecurity", new object[] {
                        rootTag,
                        terminalId,
                        version,
                        ipAddress,
                        clerkID,
                        strResponse}, this.validateLoginSecurityOperationCompleted, userState);
        }
        
        private void OnvalidateLoginSecurityOperationCompleted(object arg) {
            if ((this.validateLoginSecurityCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.validateLoginSecurityCompleted(this, new validateLoginSecurityCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="urn:debisys-soap-services", ResponseNamespace="urn:debisys-soap-services")]
        [return: System.Xml.Serialization.SoapElementAttribute("LocusActivateCDMAesnReturn")]
        public string LocusActivateCDMAesn(string siteId, string pinProductId, string clerkId, string activationProductId, string languageId, string invoiceNo, string version, string esn, string npa, string city, string zip) {
            object[] results = this.Invoke("LocusActivateCDMAesn", new object[] {
                        siteId,
                        pinProductId,
                        clerkId,
                        activationProductId,
                        languageId,
                        invoiceNo,
                        version,
                        esn,
                        npa,
                        city,
                        zip});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void LocusActivateCDMAesnAsync(string siteId, string pinProductId, string clerkId, string activationProductId, string languageId, string invoiceNo, string version, string esn, string npa, string city, string zip) {
            this.LocusActivateCDMAesnAsync(siteId, pinProductId, clerkId, activationProductId, languageId, invoiceNo, version, esn, npa, city, zip, null);
        }
        
        /// <remarks/>
        public void LocusActivateCDMAesnAsync(string siteId, string pinProductId, string clerkId, string activationProductId, string languageId, string invoiceNo, string version, string esn, string npa, string city, string zip, object userState) {
            if ((this.LocusActivateCDMAesnOperationCompleted == null)) {
                this.LocusActivateCDMAesnOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLocusActivateCDMAesnOperationCompleted);
            }
            this.InvokeAsync("LocusActivateCDMAesn", new object[] {
                        siteId,
                        pinProductId,
                        clerkId,
                        activationProductId,
                        languageId,
                        invoiceNo,
                        version,
                        esn,
                        npa,
                        city,
                        zip}, this.LocusActivateCDMAesnOperationCompleted, userState);
        }
        
        private void OnLocusActivateCDMAesnOperationCompleted(object arg) {
            if ((this.LocusActivateCDMAesnCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LocusActivateCDMAesnCompleted(this, new LocusActivateCDMAesnCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="urn:debisys-soap-services", ResponseNamespace="urn:debisys-soap-services")]
        [return: System.Xml.Serialization.SoapElementAttribute("LocusActivateCDMAsimReturn")]
        public string LocusActivateCDMAsim(string siteId, string pinProductId, string clerkId, string activationProductId, string languageId, string invoiceNo, string version, string esn, string npa, string sim, string city, string zip) {
            object[] results = this.Invoke("LocusActivateCDMAsim", new object[] {
                        siteId,
                        pinProductId,
                        clerkId,
                        activationProductId,
                        languageId,
                        invoiceNo,
                        version,
                        esn,
                        npa,
                        sim,
                        city,
                        zip});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void LocusActivateCDMAsimAsync(string siteId, string pinProductId, string clerkId, string activationProductId, string languageId, string invoiceNo, string version, string esn, string npa, string sim, string city, string zip) {
            this.LocusActivateCDMAsimAsync(siteId, pinProductId, clerkId, activationProductId, languageId, invoiceNo, version, esn, npa, sim, city, zip, null);
        }
        
        /// <remarks/>
        public void LocusActivateCDMAsimAsync(string siteId, string pinProductId, string clerkId, string activationProductId, string languageId, string invoiceNo, string version, string esn, string npa, string sim, string city, string zip, object userState) {
            if ((this.LocusActivateCDMAsimOperationCompleted == null)) {
                this.LocusActivateCDMAsimOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLocusActivateCDMAsimOperationCompleted);
            }
            this.InvokeAsync("LocusActivateCDMAsim", new object[] {
                        siteId,
                        pinProductId,
                        clerkId,
                        activationProductId,
                        languageId,
                        invoiceNo,
                        version,
                        esn,
                        npa,
                        sim,
                        city,
                        zip}, this.LocusActivateCDMAsimOperationCompleted, userState);
        }
        
        private void OnLocusActivateCDMAsimOperationCompleted(object arg) {
            if ((this.LocusActivateCDMAsimCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LocusActivateCDMAsimCompleted(this, new LocusActivateCDMAsimCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="urn:debisys-soap-services", ResponseNamespace="urn:debisys-soap-services")]
        [return: System.Xml.Serialization.SoapElementAttribute("LocusActivateGSMAfcodeReturn")]
        public string LocusActivateGSMAfcode(string siteId, string pinProductId, string clerkId, string activationProductId, string languageId, string invoiceNo, string version, string afcode, string npa, string city, string zip) {
            object[] results = this.Invoke("LocusActivateGSMAfcode", new object[] {
                        siteId,
                        pinProductId,
                        clerkId,
                        activationProductId,
                        languageId,
                        invoiceNo,
                        version,
                        afcode,
                        npa,
                        city,
                        zip});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void LocusActivateGSMAfcodeAsync(string siteId, string pinProductId, string clerkId, string activationProductId, string languageId, string invoiceNo, string version, string afcode, string npa, string city, string zip) {
            this.LocusActivateGSMAfcodeAsync(siteId, pinProductId, clerkId, activationProductId, languageId, invoiceNo, version, afcode, npa, city, zip, null);
        }
        
        /// <remarks/>
        public void LocusActivateGSMAfcodeAsync(string siteId, string pinProductId, string clerkId, string activationProductId, string languageId, string invoiceNo, string version, string afcode, string npa, string city, string zip, object userState) {
            if ((this.LocusActivateGSMAfcodeOperationCompleted == null)) {
                this.LocusActivateGSMAfcodeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLocusActivateGSMAfcodeOperationCompleted);
            }
            this.InvokeAsync("LocusActivateGSMAfcode", new object[] {
                        siteId,
                        pinProductId,
                        clerkId,
                        activationProductId,
                        languageId,
                        invoiceNo,
                        version,
                        afcode,
                        npa,
                        city,
                        zip}, this.LocusActivateGSMAfcodeOperationCompleted, userState);
        }
        
        private void OnLocusActivateGSMAfcodeOperationCompleted(object arg) {
            if ((this.LocusActivateGSMAfcodeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LocusActivateGSMAfcodeCompleted(this, new LocusActivateGSMAfcodeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="urn:debisys-soap-services", ResponseNamespace="urn:debisys-soap-services")]
        [return: System.Xml.Serialization.SoapElementAttribute("LocusActivateGSMsimReturn")]
        public string LocusActivateGSMsim(string siteId, string pinProductId, string clerkId, string activationProductId, string languageId, string invoiceNo, string version, string npa, string sim, string city, string zip) {
            object[] results = this.Invoke("LocusActivateGSMsim", new object[] {
                        siteId,
                        pinProductId,
                        clerkId,
                        activationProductId,
                        languageId,
                        invoiceNo,
                        version,
                        npa,
                        sim,
                        city,
                        zip});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void LocusActivateGSMsimAsync(string siteId, string pinProductId, string clerkId, string activationProductId, string languageId, string invoiceNo, string version, string npa, string sim, string city, string zip) {
            this.LocusActivateGSMsimAsync(siteId, pinProductId, clerkId, activationProductId, languageId, invoiceNo, version, npa, sim, city, zip, null);
        }
        
        /// <remarks/>
        public void LocusActivateGSMsimAsync(string siteId, string pinProductId, string clerkId, string activationProductId, string languageId, string invoiceNo, string version, string npa, string sim, string city, string zip, object userState) {
            if ((this.LocusActivateGSMsimOperationCompleted == null)) {
                this.LocusActivateGSMsimOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLocusActivateGSMsimOperationCompleted);
            }
            this.InvokeAsync("LocusActivateGSMsim", new object[] {
                        siteId,
                        pinProductId,
                        clerkId,
                        activationProductId,
                        languageId,
                        invoiceNo,
                        version,
                        npa,
                        sim,
                        city,
                        zip}, this.LocusActivateGSMsimOperationCompleted, userState);
        }
        
        private void OnLocusActivateGSMsimOperationCompleted(object arg) {
            if ((this.LocusActivateGSMsimCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LocusActivateGSMsimCompleted(this, new LocusActivateGSMsimCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="urn:debisys-soap-services", ResponseNamespace="urn:debisys-soap-services")]
        [return: System.Xml.Serialization.SoapElementAttribute("LycaPortinPinReturn")]
        public string LycaPortinPin(string version, string terminalId, string clerkId, string productId, string sim, string msisdn, string accountNumber, string password, string zipCode, string languageOption, string contactEmail, string plan, string amount, string invoice, string language) {
            object[] results = this.Invoke("LycaPortinPin", new object[] {
                        version,
                        terminalId,
                        clerkId,
                        productId,
                        sim,
                        msisdn,
                        accountNumber,
                        password,
                        zipCode,
                        languageOption,
                        contactEmail,
                        plan,
                        amount,
                        invoice,
                        language});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void LycaPortinPinAsync(string version, string terminalId, string clerkId, string productId, string sim, string msisdn, string accountNumber, string password, string zipCode, string languageOption, string contactEmail, string plan, string amount, string invoice, string language) {
            this.LycaPortinPinAsync(version, terminalId, clerkId, productId, sim, msisdn, accountNumber, password, zipCode, languageOption, contactEmail, plan, amount, invoice, language, null);
        }
        
        /// <remarks/>
        public void LycaPortinPinAsync(
                    string version, 
                    string terminalId, 
                    string clerkId, 
                    string productId, 
                    string sim, 
                    string msisdn, 
                    string accountNumber, 
                    string password, 
                    string zipCode, 
                    string languageOption, 
                    string contactEmail, 
                    string plan, 
                    string amount, 
                    string invoice, 
                    string language, 
                    object userState) {
            if ((this.LycaPortinPinOperationCompleted == null)) {
                this.LycaPortinPinOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLycaPortinPinOperationCompleted);
            }
            this.InvokeAsync("LycaPortinPin", new object[] {
                        version,
                        terminalId,
                        clerkId,
                        productId,
                        sim,
                        msisdn,
                        accountNumber,
                        password,
                        zipCode,
                        languageOption,
                        contactEmail,
                        plan,
                        amount,
                        invoice,
                        language}, this.LycaPortinPinOperationCompleted, userState);
        }
        
        private void OnLycaPortinPinOperationCompleted(object arg) {
            if ((this.LycaPortinPinCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LycaPortinPinCompleted(this, new LycaPortinPinCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="urn:debisys-soap-services", ResponseNamespace="urn:debisys-soap-services")]
        [return: System.Xml.Serialization.SoapElementAttribute("LycaPortinRTRReturn")]
        public string LycaPortinRTR(string version, string terminalId, string clerkId, string productId, string sim, string msisdn, string accountNumber, string password, string zipCode, string languageOption, string contactEmail, string amount, string invoice, string language) {
            object[] results = this.Invoke("LycaPortinRTR", new object[] {
                        version,
                        terminalId,
                        clerkId,
                        productId,
                        sim,
                        msisdn,
                        accountNumber,
                        password,
                        zipCode,
                        languageOption,
                        contactEmail,
                        amount,
                        invoice,
                        language});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void LycaPortinRTRAsync(string version, string terminalId, string clerkId, string productId, string sim, string msisdn, string accountNumber, string password, string zipCode, string languageOption, string contactEmail, string amount, string invoice, string language) {
            this.LycaPortinRTRAsync(version, terminalId, clerkId, productId, sim, msisdn, accountNumber, password, zipCode, languageOption, contactEmail, amount, invoice, language, null);
        }
        
        /// <remarks/>
        public void LycaPortinRTRAsync(string version, string terminalId, string clerkId, string productId, string sim, string msisdn, string accountNumber, string password, string zipCode, string languageOption, string contactEmail, string amount, string invoice, string language, object userState) {
            if ((this.LycaPortinRTROperationCompleted == null)) {
                this.LycaPortinRTROperationCompleted = new System.Threading.SendOrPostCallback(this.OnLycaPortinRTROperationCompleted);
            }
            this.InvokeAsync("LycaPortinRTR", new object[] {
                        version,
                        terminalId,
                        clerkId,
                        productId,
                        sim,
                        msisdn,
                        accountNumber,
                        password,
                        zipCode,
                        languageOption,
                        contactEmail,
                        amount,
                        invoice,
                        language}, this.LycaPortinRTROperationCompleted, userState);
        }
        
        private void OnLycaPortinRTROperationCompleted(object arg) {
            if ((this.LycaPortinRTRCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LycaPortinRTRCompleted(this, new LycaPortinRTRCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="urn:debisys-soap-services", ResponseNamespace="urn:debisys-soap-services")]
        [return: System.Xml.Serialization.SoapElementAttribute("LycaActivationPinReturn")]
        public string LycaActivationPin(string version, string terminalId, string clerkId, string productId, string sim, string zipCode, string languageOption, string contactEmail, string plan, string amount, string invoice, string language) {
            object[] results = this.Invoke("LycaActivationPin", new object[] {
                        version,
                        terminalId,
                        clerkId,
                        productId,
                        sim,
                        zipCode,
                        languageOption,
                        contactEmail,
                        plan,
                        amount,
                        invoice,
                        language});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void LycaActivationPinAsync(string version, string terminalId, string clerkId, string productId, string sim, string zipCode, string languageOption, string contactEmail, string plan, string amount, string invoice, string language) {
            this.LycaActivationPinAsync(version, terminalId, clerkId, productId, sim, zipCode, languageOption, contactEmail, plan, amount, invoice, language, null);
        }
        
        /// <remarks/>
        public void LycaActivationPinAsync(string version, string terminalId, string clerkId, string productId, string sim, string zipCode, string languageOption, string contactEmail, string plan, string amount, string invoice, string language, object userState) {
            if ((this.LycaActivationPinOperationCompleted == null)) {
                this.LycaActivationPinOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLycaActivationPinOperationCompleted);
            }
            this.InvokeAsync("LycaActivationPin", new object[] {
                        version,
                        terminalId,
                        clerkId,
                        productId,
                        sim,
                        zipCode,
                        languageOption,
                        contactEmail,
                        plan,
                        amount,
                        invoice,
                        language}, this.LycaActivationPinOperationCompleted, userState);
        }
        
        private void OnLycaActivationPinOperationCompleted(object arg) {
            if ((this.LycaActivationPinCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LycaActivationPinCompleted(this, new LycaActivationPinCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="urn:debisys-soap-services", ResponseNamespace="urn:debisys-soap-services")]
        [return: System.Xml.Serialization.SoapElementAttribute("LycaActivationRTRReturn")]
        public string LycaActivationRTR(string version, string terminalId, string clerkId, string productId, string sim, string zipCode, string languageOption, string contactEmail, string amount, string invoice, string language) {
            object[] results = this.Invoke("LycaActivationRTR", new object[] {
                        version,
                        terminalId,
                        clerkId,
                        productId,
                        sim,
                        zipCode,
                        languageOption,
                        contactEmail,
                        amount,
                        invoice,
                        language});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void LycaActivationRTRAsync(string version, string terminalId, string clerkId, string productId, string sim, string zipCode, string languageOption, string contactEmail, string amount, string invoice, string language) {
            this.LycaActivationRTRAsync(version, terminalId, clerkId, productId, sim, zipCode, languageOption, contactEmail, amount, invoice, language, null);
        }
        
        /// <remarks/>
        public void LycaActivationRTRAsync(string version, string terminalId, string clerkId, string productId, string sim, string zipCode, string languageOption, string contactEmail, string amount, string invoice, string language, object userState) {
            if ((this.LycaActivationRTROperationCompleted == null)) {
                this.LycaActivationRTROperationCompleted = new System.Threading.SendOrPostCallback(this.OnLycaActivationRTROperationCompleted);
            }
            this.InvokeAsync("LycaActivationRTR", new object[] {
                        version,
                        terminalId,
                        clerkId,
                        productId,
                        sim,
                        zipCode,
                        languageOption,
                        contactEmail,
                        amount,
                        invoice,
                        language}, this.LycaActivationRTROperationCompleted, userState);
        }
        
        private void OnLycaActivationRTROperationCompleted(object arg) {
            if ((this.LycaActivationRTRCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LycaActivationRTRCompleted(this, new LycaActivationRTRCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="urn:debisys-soap-services", ResponseNamespace="urn:debisys-soap-services")]
        [return: System.Xml.Serialization.SoapElementAttribute("BillPaymentUserFeeReturn")]
        public string BillPaymentUserFee(string version, string terminalId, string clerkId, string productId, string amount, string account, string invoiceNo, string language) {
            object[] results = this.Invoke("BillPaymentUserFee", new object[] {
                        version,
                        terminalId,
                        clerkId,
                        productId,
                        amount,
                        account,
                        invoiceNo,
                        language});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void BillPaymentUserFeeAsync(string version, string terminalId, string clerkId, string productId, string amount, string account, string invoiceNo, string language) {
            this.BillPaymentUserFeeAsync(version, terminalId, clerkId, productId, amount, account, invoiceNo, language, null);
        }
        
        /// <remarks/>
        public void BillPaymentUserFeeAsync(string version, string terminalId, string clerkId, string productId, string amount, string account, string invoiceNo, string language, object userState) {
            if ((this.BillPaymentUserFeeOperationCompleted == null)) {
                this.BillPaymentUserFeeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnBillPaymentUserFeeOperationCompleted);
            }
            this.InvokeAsync("BillPaymentUserFee", new object[] {
                        version,
                        terminalId,
                        clerkId,
                        productId,
                        amount,
                        account,
                        invoiceNo,
                        language}, this.BillPaymentUserFeeOperationCompleted, userState);
        }
        
        private void OnBillPaymentUserFeeOperationCompleted(object arg) {
            if ((this.BillPaymentUserFeeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.BillPaymentUserFeeCompleted(this, new BillPaymentUserFeeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="urn:debisys-soap-services", ResponseNamespace="urn:debisys-soap-services")]
        [return: System.Xml.Serialization.SoapElementAttribute("CheckClerkReturn")]
        public string CheckClerk(string version, string terminalId, string clerkId) {
            object[] results = this.Invoke("CheckClerk", new object[] {
                        version,
                        terminalId,
                        clerkId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CheckClerkAsync(string version, string terminalId, string clerkId) {
            this.CheckClerkAsync(version, terminalId, clerkId, null);
        }
        
        /// <remarks/>
        public void CheckClerkAsync(string version, string terminalId, string clerkId, object userState) {
            if ((this.CheckClerkOperationCompleted == null)) {
                this.CheckClerkOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckClerkOperationCompleted);
            }
            this.InvokeAsync("CheckClerk", new object[] {
                        version,
                        terminalId,
                        clerkId}, this.CheckClerkOperationCompleted, userState);
        }
        
        private void OnCheckClerkOperationCompleted(object arg) {
            if ((this.CheckClerkCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckClerkCompleted(this, new CheckClerkCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="urn:debisys-soap-services", ResponseNamespace="urn:debisys-soap-services")]
        [return: System.Xml.Serialization.SoapElementAttribute("CommTestReturn")]
        public string CommTest() {
            object[] results = this.Invoke("CommTest", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CommTestAsync() {
            this.CommTestAsync(null);
        }
        
        /// <remarks/>
        public void CommTestAsync(object userState) {
            if ((this.CommTestOperationCompleted == null)) {
                this.CommTestOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCommTestOperationCompleted);
            }
            this.InvokeAsync("CommTest", new object[0], this.CommTestOperationCompleted, userState);
        }
        
        private void OnCommTestOperationCompleted(object arg) {
            if ((this.CommTestCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CommTestCompleted(this, new CommTestCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="urn:debisys-soap-services", ResponseNamespace="urn:debisys-soap-services")]
        [return: System.Xml.Serialization.SoapElementAttribute("CardSaleReturn")]
        public string CardSale(string version, string terminalId, string clerkId, string productId, string accountId, string amount, string invoiceNo, string languageOption) {
            object[] results = this.Invoke("CardSale", new object[] {
                        version,
                        terminalId,
                        clerkId,
                        productId,
                        accountId,
                        amount,
                        invoiceNo,
                        languageOption});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CardSaleAsync(string version, string terminalId, string clerkId, string productId, string accountId, string amount, string invoiceNo, string languageOption) {
            this.CardSaleAsync(version, terminalId, clerkId, productId, accountId, amount, invoiceNo, languageOption, null);
        }
        
        /// <remarks/>
        public void CardSaleAsync(string version, string terminalId, string clerkId, string productId, string accountId, string amount, string invoiceNo, string languageOption, object userState) {
            if ((this.CardSaleOperationCompleted == null)) {
                this.CardSaleOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCardSaleOperationCompleted);
            }
            this.InvokeAsync("CardSale", new object[] {
                        version,
                        terminalId,
                        clerkId,
                        productId,
                        accountId,
                        amount,
                        invoiceNo,
                        languageOption}, this.CardSaleOperationCompleted, userState);
        }
        
        private void OnCardSaleOperationCompleted(object arg) {
            if ((this.CardSaleCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CardSaleCompleted(this, new CardSaleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="urn:debisys-soap-services", ResponseNamespace="urn:debisys-soap-services")]
        [return: System.Xml.Serialization.SoapElementAttribute("CardBalanceReturn")]
        public string CardBalance(string version, string terminalId, string clerkId, string productId, string accountId, string amount, string invoiceNo, string languageOption) {
            object[] results = this.Invoke("CardBalance", new object[] {
                        version,
                        terminalId,
                        clerkId,
                        productId,
                        accountId,
                        amount,
                        invoiceNo,
                        languageOption});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CardBalanceAsync(string version, string terminalId, string clerkId, string productId, string accountId, string amount, string invoiceNo, string languageOption) {
            this.CardBalanceAsync(version, terminalId, clerkId, productId, accountId, amount, invoiceNo, languageOption, null);
        }
        
        /// <remarks/>
        public void CardBalanceAsync(string version, string terminalId, string clerkId, string productId, string accountId, string amount, string invoiceNo, string languageOption, object userState) {
            if ((this.CardBalanceOperationCompleted == null)) {
                this.CardBalanceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCardBalanceOperationCompleted);
            }
            this.InvokeAsync("CardBalance", new object[] {
                        version,
                        terminalId,
                        clerkId,
                        productId,
                        accountId,
                        amount,
                        invoiceNo,
                        languageOption}, this.CardBalanceOperationCompleted, userState);
        }
        
        private void OnCardBalanceOperationCompleted(object arg) {
            if ((this.CardBalanceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CardBalanceCompleted(this, new CardBalanceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="urn:debisys-soap-services", ResponseNamespace="urn:debisys-soap-services")]
        [return: System.Xml.Serialization.SoapElementAttribute("CardRefundReturn")]
        public string CardRefund(string version, string terminalId, string clerkId, string productId, string accountId, string amount, string invoiceNo, string languageOption) {
            object[] results = this.Invoke("CardRefund", new object[] {
                        version,
                        terminalId,
                        clerkId,
                        productId,
                        accountId,
                        amount,
                        invoiceNo,
                        languageOption});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CardRefundAsync(string version, string terminalId, string clerkId, string productId, string accountId, string amount, string invoiceNo, string languageOption) {
            this.CardRefundAsync(version, terminalId, clerkId, productId, accountId, amount, invoiceNo, languageOption, null);
        }
        
        /// <remarks/>
        public void CardRefundAsync(string version, string terminalId, string clerkId, string productId, string accountId, string amount, string invoiceNo, string languageOption, object userState) {
            if ((this.CardRefundOperationCompleted == null)) {
                this.CardRefundOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCardRefundOperationCompleted);
            }
            this.InvokeAsync("CardRefund", new object[] {
                        version,
                        terminalId,
                        clerkId,
                        productId,
                        accountId,
                        amount,
                        invoiceNo,
                        languageOption}, this.CardRefundOperationCompleted, userState);
        }
        
        private void OnCardRefundOperationCompleted(object arg) {
            if ((this.CardRefundCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CardRefundCompleted(this, new CardRefundCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="urn:debisys-soap-services", ResponseNamespace="urn:debisys-soap-services")]
        [return: System.Xml.Serialization.SoapElementAttribute("PinDistSaleReturn")]
        public string PinDistSale(string version, string terminalId, string clerkId, string productId, string accountId, string amount, string invoiceNo, string languageOption) {
            object[] results = this.Invoke("PinDistSale", new object[] {
                        version,
                        terminalId,
                        clerkId,
                        productId,
                        accountId,
                        amount,
                        invoiceNo,
                        languageOption});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void PinDistSaleAsync(string version, string terminalId, string clerkId, string productId, string accountId, string amount, string invoiceNo, string languageOption) {
            this.PinDistSaleAsync(version, terminalId, clerkId, productId, accountId, amount, invoiceNo, languageOption, null);
        }
        
        /// <remarks/>
        public void PinDistSaleAsync(string version, string terminalId, string clerkId, string productId, string accountId, string amount, string invoiceNo, string languageOption, object userState) {
            if ((this.PinDistSaleOperationCompleted == null)) {
                this.PinDistSaleOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPinDistSaleOperationCompleted);
            }
            this.InvokeAsync("PinDistSale", new object[] {
                        version,
                        terminalId,
                        clerkId,
                        productId,
                        accountId,
                        amount,
                        invoiceNo,
                        languageOption}, this.PinDistSaleOperationCompleted, userState);
        }
        
        private void OnPinDistSaleOperationCompleted(object arg) {
            if ((this.PinDistSaleCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PinDistSaleCompleted(this, new PinDistSaleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="urn:debisys-soap-services", ResponseNamespace="urn:debisys-soap-services")]
        [return: System.Xml.Serialization.SoapElementAttribute("postRequestReturn")]
        public string postRequest(string request) {
            object[] results = this.Invoke("postRequest", new object[] {
                        request});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void postRequestAsync(string request) {
            this.postRequestAsync(request, null);
        }
        
        /// <remarks/>
        public void postRequestAsync(string request, object userState) {
            if ((this.postRequestOperationCompleted == null)) {
                this.postRequestOperationCompleted = new System.Threading.SendOrPostCallback(this.OnpostRequestOperationCompleted);
            }
            this.InvokeAsync("postRequest", new object[] {
                        request}, this.postRequestOperationCompleted, userState);
        }
        
        private void OnpostRequestOperationCompleted(object arg) {
            if ((this.postRequestCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.postRequestCompleted(this, new postRequestCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="urn:debisys-soap-services", ResponseNamespace="urn:debisys-soap-services")]
        [return: System.Xml.Serialization.SoapElementAttribute("TransRefundReturn")]
        public string TransRefund(string version, string terminalId, string clerkId, string productId, string accountId, string amount, string invoiceNo, string languageOption) {
            object[] results = this.Invoke("TransRefund", new object[] {
                        version,
                        terminalId,
                        clerkId,
                        productId,
                        accountId,
                        amount,
                        invoiceNo,
                        languageOption});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void TransRefundAsync(string version, string terminalId, string clerkId, string productId, string accountId, string amount, string invoiceNo, string languageOption) {
            this.TransRefundAsync(version, terminalId, clerkId, productId, accountId, amount, invoiceNo, languageOption, null);
        }
        
        /// <remarks/>
        public void TransRefundAsync(string version, string terminalId, string clerkId, string productId, string accountId, string amount, string invoiceNo, string languageOption, object userState) {
            if ((this.TransRefundOperationCompleted == null)) {
                this.TransRefundOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTransRefundOperationCompleted);
            }
            this.InvokeAsync("TransRefund", new object[] {
                        version,
                        terminalId,
                        clerkId,
                        productId,
                        accountId,
                        amount,
                        invoiceNo,
                        languageOption}, this.TransRefundOperationCompleted, userState);
        }
        
        private void OnTransRefundOperationCompleted(object arg) {
            if ((this.TransRefundCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TransRefundCompleted(this, new TransRefundCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="urn:debisys-soap-services", ResponseNamespace="urn:debisys-soap-services")]
        [return: System.Xml.Serialization.SoapElementAttribute("BillPaymentReturn")]
        public string BillPayment(string version, string terminalId, string clerkId, string productId, string accountId, string amount, string invoiceNo, string languageOption) {
            object[] results = this.Invoke("BillPayment", new object[] {
                        version,
                        terminalId,
                        clerkId,
                        productId,
                        accountId,
                        amount,
                        invoiceNo,
                        languageOption});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void BillPaymentAsync(string version, string terminalId, string clerkId, string productId, string accountId, string amount, string invoiceNo, string languageOption) {
            this.BillPaymentAsync(version, terminalId, clerkId, productId, accountId, amount, invoiceNo, languageOption, null);
        }
        
        /// <remarks/>
        public void BillPaymentAsync(string version, string terminalId, string clerkId, string productId, string accountId, string amount, string invoiceNo, string languageOption, object userState) {
            if ((this.BillPaymentOperationCompleted == null)) {
                this.BillPaymentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnBillPaymentOperationCompleted);
            }
            this.InvokeAsync("BillPayment", new object[] {
                        version,
                        terminalId,
                        clerkId,
                        productId,
                        accountId,
                        amount,
                        invoiceNo,
                        languageOption}, this.BillPaymentOperationCompleted, userState);
        }
        
        private void OnBillPaymentOperationCompleted(object arg) {
            if ((this.BillPaymentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.BillPaymentCompleted(this, new BillPaymentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="urn:debisys-soap-services", ResponseNamespace="urn:debisys-soap-services")]
        [return: System.Xml.Serialization.SoapElementAttribute("LoginReturn")]
        public string Login(string version, string userName, string password, string languageOption) {
            object[] results = this.Invoke("Login", new object[] {
                        version,
                        userName,
                        password,
                        languageOption});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void LoginAsync(string version, string userName, string password, string languageOption) {
            this.LoginAsync(version, userName, password, languageOption, null);
        }
        
        /// <remarks/>
        public void LoginAsync(string version, string userName, string password, string languageOption, object userState) {
            if ((this.LoginOperationCompleted == null)) {
                this.LoginOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLoginOperationCompleted);
            }
            this.InvokeAsync("Login", new object[] {
                        version,
                        userName,
                        password,
                        languageOption}, this.LoginOperationCompleted, userState);
        }
        
        private void OnLoginOperationCompleted(object arg) {
            if ((this.LoginCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LoginCompleted(this, new LoginCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="urn:debisys-soap-services", ResponseNamespace="urn:debisys-soap-services")]
        [return: System.Xml.Serialization.SoapElementAttribute("LogoutReturn")]
        public string Logout(string version, string userName, string password, string languageOption) {
            object[] results = this.Invoke("Logout", new object[] {
                        version,
                        userName,
                        password,
                        languageOption});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void LogoutAsync(string version, string userName, string password, string languageOption) {
            this.LogoutAsync(version, userName, password, languageOption, null);
        }
        
        /// <remarks/>
        public void LogoutAsync(string version, string userName, string password, string languageOption, object userState) {
            if ((this.LogoutOperationCompleted == null)) {
                this.LogoutOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLogoutOperationCompleted);
            }
            this.InvokeAsync("Logout", new object[] {
                        version,
                        userName,
                        password,
                        languageOption}, this.LogoutOperationCompleted, userState);
        }
        
        private void OnLogoutOperationCompleted(object arg) {
            if ((this.LogoutCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LogoutCompleted(this, new LogoutCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="urn:debisys-soap-services", ResponseNamespace="urn:debisys-soap-services")]
        [return: System.Xml.Serialization.SoapElementAttribute("Login2Return")]
        public string Login2(string version, string userName, string password, string languageOption) {
            object[] results = this.Invoke("Login2", new object[] {
                        version,
                        userName,
                        password,
                        languageOption});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void Login2Async(string version, string userName, string password, string languageOption) {
            this.Login2Async(version, userName, password, languageOption, null);
        }
        
        /// <remarks/>
        public void Login2Async(string version, string userName, string password, string languageOption, object userState) {
            if ((this.Login2OperationCompleted == null)) {
                this.Login2OperationCompleted = new System.Threading.SendOrPostCallback(this.OnLogin2OperationCompleted);
            }
            this.InvokeAsync("Login2", new object[] {
                        version,
                        userName,
                        password,
                        languageOption}, this.Login2OperationCompleted, userState);
        }
        
        private void OnLogin2OperationCompleted(object arg) {
            if ((this.Login2Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Login2Completed(this, new Login2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="urn:debisys-soap-services", ResponseNamespace="urn:debisys-soap-services")]
        [return: System.Xml.Serialization.SoapElementAttribute("NOCOperationReturn")]
        public string NOCOperation(string version, string addressWebService, string queryString) {
            object[] results = this.Invoke("NOCOperation", new object[] {
                        version,
                        addressWebService,
                        queryString});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void NOCOperationAsync(string version, string addressWebService, string queryString) {
            this.NOCOperationAsync(version, addressWebService, queryString, null);
        }
        
        /// <remarks/>
        public void NOCOperationAsync(string version, string addressWebService, string queryString, object userState) {
            if ((this.NOCOperationOperationCompleted == null)) {
                this.NOCOperationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnNOCOperationOperationCompleted);
            }
            this.InvokeAsync("NOCOperation", new object[] {
                        version,
                        addressWebService,
                        queryString}, this.NOCOperationOperationCompleted, userState);
        }
        
        private void OnNOCOperationOperationCompleted(object arg) {
            if ((this.NOCOperationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.NOCOperationCompleted(this, new NOCOperationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="urn:debisys-soap-services", ResponseNamespace="urn:debisys-soap-services")]
        [return: System.Xml.Serialization.SoapElementAttribute("SaleAsyncReturn")]
        public string SaleAsync(string version, string terminalId, string clerkId, string productId, string accountId, string amount, string invoiceNo, string language, string regCode) {
            object[] results = this.Invoke("SaleAsync", new object[] {
                        version,
                        terminalId,
                        clerkId,
                        productId,
                        accountId,
                        amount,
                        invoiceNo,
                        language,
                        regCode});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SaleAsyncAsync(string version, string terminalId, string clerkId, string productId, string accountId, string amount, string invoiceNo, string language, string regCode) {
            this.SaleAsyncAsync(version, terminalId, clerkId, productId, accountId, amount, invoiceNo, language, regCode, null);
        }
        
        /// <remarks/>
        public void SaleAsyncAsync(string version, string terminalId, string clerkId, string productId, string accountId, string amount, string invoiceNo, string language, string regCode, object userState) {
            if ((this.SaleAsyncOperationCompleted == null)) {
                this.SaleAsyncOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSaleAsyncOperationCompleted);
            }
            this.InvokeAsync("SaleAsync", new object[] {
                        version,
                        terminalId,
                        clerkId,
                        productId,
                        accountId,
                        amount,
                        invoiceNo,
                        language,
                        regCode}, this.SaleAsyncOperationCompleted, userState);
        }
        
        private void OnSaleAsyncOperationCompleted(object arg) {
            if ((this.SaleAsyncCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SaleAsyncCompleted(this, new SaleAsyncCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="urn:debisys-soap-services", ResponseNamespace="urn:debisys-soap-services")]
        [return: System.Xml.Serialization.SoapElementAttribute("CheckTBIDReturn")]
        public string CheckTBID(string version, string terminalId, string clerkId, string invoiceNo, string language) {
            object[] results = this.Invoke("CheckTBID", new object[] {
                        version,
                        terminalId,
                        clerkId,
                        invoiceNo,
                        language});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CheckTBIDAsync(string version, string terminalId, string clerkId, string invoiceNo, string language) {
            this.CheckTBIDAsync(version, terminalId, clerkId, invoiceNo, language, null);
        }
        
        /// <remarks/>
        public void CheckTBIDAsync(string version, string terminalId, string clerkId, string invoiceNo, string language, object userState) {
            if ((this.CheckTBIDOperationCompleted == null)) {
                this.CheckTBIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckTBIDOperationCompleted);
            }
            this.InvokeAsync("CheckTBID", new object[] {
                        version,
                        terminalId,
                        clerkId,
                        invoiceNo,
                        language}, this.CheckTBIDOperationCompleted, userState);
        }
        
        private void OnCheckTBIDOperationCompleted(object arg) {
            if ((this.CheckTBIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckTBIDCompleted(this, new CheckTBIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="urn:debisys-soap-services", ResponseNamespace="urn:debisys-soap-services")]
        [return: System.Xml.Serialization.SoapElementAttribute("CheckTrxByIdReturn")]
        public string CheckTrxById(string version, string terminalId, string clerkId, string trxId, string language) {
            object[] results = this.Invoke("CheckTrxById", new object[] {
                        version,
                        terminalId,
                        clerkId,
                        trxId,
                        language});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CheckTrxByIdAsync(string version, string terminalId, string clerkId, string trxId, string language) {
            this.CheckTrxByIdAsync(version, terminalId, clerkId, trxId, language, null);
        }
        
        /// <remarks/>
        public void CheckTrxByIdAsync(string version, string terminalId, string clerkId, string trxId, string language, object userState) {
            if ((this.CheckTrxByIdOperationCompleted == null)) {
                this.CheckTrxByIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckTrxByIdOperationCompleted);
            }
            this.InvokeAsync("CheckTrxById", new object[] {
                        version,
                        terminalId,
                        clerkId,
                        trxId,
                        language}, this.CheckTrxByIdOperationCompleted, userState);
        }
        
        private void OnCheckTrxByIdOperationCompleted(object arg) {
            if ((this.CheckTrxByIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckTrxByIdCompleted(this, new CheckTrxByIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="urn:debisys-soap-services", ResponseNamespace="urn:debisys-soap-services")]
        [return: System.Xml.Serialization.SoapElementAttribute("ApplyPaymentReturn")]
        public string ApplyPayment(string version, string merchantID, string amount, string description, string refNumber, string userName, string password) {
            object[] results = this.Invoke("ApplyPayment", new object[] {
                        version,
                        merchantID,
                        amount,
                        description,
                        refNumber,
                        userName,
                        password});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ApplyPaymentAsync(string version, string merchantID, string amount, string description, string refNumber, string userName, string password) {
            this.ApplyPaymentAsync(version, merchantID, amount, description, refNumber, userName, password, null);
        }
        
        /// <remarks/>
        public void ApplyPaymentAsync(string version, string merchantID, string amount, string description, string refNumber, string userName, string password, object userState) {
            if ((this.ApplyPaymentOperationCompleted == null)) {
                this.ApplyPaymentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnApplyPaymentOperationCompleted);
            }
            this.InvokeAsync("ApplyPayment", new object[] {
                        version,
                        merchantID,
                        amount,
                        description,
                        refNumber,
                        userName,
                        password}, this.ApplyPaymentOperationCompleted, userState);
        }
        
        private void OnApplyPaymentOperationCompleted(object arg) {
            if ((this.ApplyPaymentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ApplyPaymentCompleted(this, new ApplyPaymentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="urn:debisys-soap-services", ResponseNamespace="urn:debisys-soap-services")]
        [return: System.Xml.Serialization.SoapElementAttribute("QuippiRedeemReturn")]
        public string QuippiRedeem(string Version, string SiteID, string ClerkID, string PIN, string LocationID, string PosID, string PosOperatorID, string RecipientID, string InvoiceNo) {
            object[] results = this.Invoke("QuippiRedeem", new object[] {
                        Version,
                        SiteID,
                        ClerkID,
                        PIN,
                        LocationID,
                        PosID,
                        PosOperatorID,
                        RecipientID,
                        InvoiceNo});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void QuippiRedeemAsync(string Version, string SiteID, string ClerkID, string PIN, string LocationID, string PosID, string PosOperatorID, string RecipientID, string InvoiceNo) {
            this.QuippiRedeemAsync(Version, SiteID, ClerkID, PIN, LocationID, PosID, PosOperatorID, RecipientID, InvoiceNo, null);
        }
        
        /// <remarks/>
        public void QuippiRedeemAsync(string Version, string SiteID, string ClerkID, string PIN, string LocationID, string PosID, string PosOperatorID, string RecipientID, string InvoiceNo, object userState) {
            if ((this.QuippiRedeemOperationCompleted == null)) {
                this.QuippiRedeemOperationCompleted = new System.Threading.SendOrPostCallback(this.OnQuippiRedeemOperationCompleted);
            }
            this.InvokeAsync("QuippiRedeem", new object[] {
                        Version,
                        SiteID,
                        ClerkID,
                        PIN,
                        LocationID,
                        PosID,
                        PosOperatorID,
                        RecipientID,
                        InvoiceNo}, this.QuippiRedeemOperationCompleted, userState);
        }
        
        private void OnQuippiRedeemOperationCompleted(object arg) {
            if ((this.QuippiRedeemCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.QuippiRedeemCompleted(this, new QuippiRedeemCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="urn:debisys-soap-services", ResponseNamespace="urn:debisys-soap-services")]
        public void setTagNewCreditAfterTransaction(string tagNewCreditAfterTransaction) {
            this.Invoke("setTagNewCreditAfterTransaction", new object[] {
                        tagNewCreditAfterTransaction});
        }
        
        /// <remarks/>
        public void setTagNewCreditAfterTransactionAsync(string tagNewCreditAfterTransaction) {
            this.setTagNewCreditAfterTransactionAsync(tagNewCreditAfterTransaction, null);
        }
        
        /// <remarks/>
        public void setTagNewCreditAfterTransactionAsync(string tagNewCreditAfterTransaction, object userState) {
            if ((this.setTagNewCreditAfterTransactionOperationCompleted == null)) {
                this.setTagNewCreditAfterTransactionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsetTagNewCreditAfterTransactionOperationCompleted);
            }
            this.InvokeAsync("setTagNewCreditAfterTransaction", new object[] {
                        tagNewCreditAfterTransaction}, this.setTagNewCreditAfterTransactionOperationCompleted, userState);
        }
        
        private void OnsetTagNewCreditAfterTransactionOperationCompleted(object arg) {
            if ((this.setTagNewCreditAfterTransactionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.setTagNewCreditAfterTransactionCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="urn:debisys-soap-services", ResponseNamespace="urn:debisys-soap-services")]
        [return: System.Xml.Serialization.SoapElementAttribute("getTagNewCreditAfterTransactionReturn")]
        public string getTagNewCreditAfterTransaction() {
            object[] results = this.Invoke("getTagNewCreditAfterTransaction", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getTagNewCreditAfterTransactionAsync() {
            this.getTagNewCreditAfterTransactionAsync(null);
        }
        
        /// <remarks/>
        public void getTagNewCreditAfterTransactionAsync(object userState) {
            if ((this.getTagNewCreditAfterTransactionOperationCompleted == null)) {
                this.getTagNewCreditAfterTransactionOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetTagNewCreditAfterTransactionOperationCompleted);
            }
            this.InvokeAsync("getTagNewCreditAfterTransaction", new object[0], this.getTagNewCreditAfterTransactionOperationCompleted, userState);
        }
        
        private void OngetTagNewCreditAfterTransactionOperationCompleted(object arg) {
            if ((this.getTagNewCreditAfterTransactionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getTagNewCreditAfterTransactionCompleted(this, new getTagNewCreditAfterTransactionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void LookUpBillPaymentMxByInvocieNoCompletedEventHandler(object sender, LookUpBillPaymentMxByInvocieNoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LookUpBillPaymentMxByInvocieNoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LookUpBillPaymentMxByInvocieNoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void LookUpSimActivationByInvoiceNo1CompletedEventHandler(object sender, LookUpSimActivationByInvoiceNo1CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LookUpSimActivationByInvoiceNo1CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LookUpSimActivationByInvoiceNo1CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void LookupQuippiTransactionByInvoiceNoCompletedEventHandler(object sender, LookupQuippiTransactionByInvoiceNoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LookupQuippiTransactionByInvoiceNoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LookupQuippiTransactionByInvoiceNoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void GetTransactionsCompletedEventHandler(object sender, GetTransactionsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTransactionsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTransactionsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void CheckTerminalCompletedEventHandler(object sender, CheckTerminalCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckTerminalCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckTerminalCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void PinDistSale_XBorderCompletedEventHandler(object sender, PinDistSale_XBorderCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PinDistSale_XBorderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PinDistSale_XBorderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void PinDistSale_XBorder_01CompletedEventHandler(object sender, PinDistSale_XBorder_01CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PinDistSale_XBorder_01CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PinDistSale_XBorder_01CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void PinDistSaleTicketCompletedEventHandler(object sender, PinDistSaleTicketCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PinDistSaleTicketCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PinDistSaleTicketCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void PinDistSaleUSSDCompletedEventHandler(object sender, PinDistSaleUSSDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PinDistSaleUSSDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PinDistSaleUSSDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void PinDistRefundCompletedEventHandler(object sender, PinDistRefundCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PinDistRefundCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PinDistRefundCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void GetProductsProvidersLimitsCompletedEventHandler(object sender, GetProductsProvidersLimitsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetProductsProvidersLimitsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetProductsProvidersLimitsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void GetProductListExtCompletedEventHandler(object sender, GetProductListExtCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetProductListExtCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetProductListExtCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void GetProductListCompletedEventHandler(object sender, GetProductListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetProductListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetProductListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void GetCarrierListCompletedEventHandler(object sender, GetCarrierListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCarrierListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCarrierListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void GetCategoryListCompletedEventHandler(object sender, GetCategoryListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCategoryListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCategoryListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void GetTransTypeListCompletedEventHandler(object sender, GetTransTypeListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTransTypeListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTransTypeListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void TransactionConfirmCompletedEventHandler(object sender, TransactionConfirmCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TransactionConfirmCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TransactionConfirmCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void TransactionsDetailsForDayCompletedEventHandler(object sender, TransactionsDetailsForDayCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TransactionsDetailsForDayCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TransactionsDetailsForDayCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void PINReturnRequestStatusCompletedEventHandler(object sender, PINReturnRequestStatusCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PINReturnRequestStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PINReturnRequestStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void PINReturnRequestCompletedEventHandler(object sender, PINReturnRequestCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PINReturnRequestCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PINReturnRequestCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void GetAccountBalanceCompletedEventHandler(object sender, GetAccountBalanceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAccountBalanceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAccountBalanceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void SubmitPaymentNotificationCompletedEventHandler(object sender, SubmitPaymentNotificationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SubmitPaymentNotificationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SubmitPaymentNotificationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void GetBillPaymentBalanceCompletedEventHandler(object sender, GetBillPaymentBalanceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetBillPaymentBalanceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetBillPaymentBalanceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void GiftCardActivateCompletedEventHandler(object sender, GiftCardActivateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GiftCardActivateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GiftCardActivateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void GiftCardDeactivateCompletedEventHandler(object sender, GiftCardDeactivateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GiftCardDeactivateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GiftCardDeactivateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void GiftCardBalanceCompletedEventHandler(object sender, GiftCardBalanceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GiftCardBalanceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GiftCardBalanceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void GiftCardQueryFeeCompletedEventHandler(object sender, GiftCardQueryFeeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GiftCardQueryFeeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GiftCardQueryFeeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void StoredValueLoadCompletedEventHandler(object sender, StoredValueLoadCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class StoredValueLoadCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal StoredValueLoadCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void StoredValueRefundCompletedEventHandler(object sender, StoredValueRefundCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class StoredValueRefundCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal StoredValueRefundCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void StoredValueBalanceCompletedEventHandler(object sender, StoredValueBalanceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class StoredValueBalanceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal StoredValueBalanceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void StoredValueActivateCompletedEventHandler(object sender, StoredValueActivateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class StoredValueActivateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal StoredValueActivateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void StoredValueDeactivateCompletedEventHandler(object sender, StoredValueDeactivateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class StoredValueDeactivateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal StoredValueDeactivateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void StoredValueQueryFeeCompletedEventHandler(object sender, StoredValueQueryFeeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class StoredValueQueryFeeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal StoredValueQueryFeeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void CheckTransactionByInvoiceNoCompletedEventHandler(object sender, CheckTransactionByInvoiceNoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckTransactionByInvoiceNoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckTransactionByInvoiceNoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void checkMerchantPaymentCompletedEventHandler(object sender, checkMerchantPaymentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class checkMerchantPaymentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal checkMerchantPaymentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void LookUpTransactionByInvocieNoCompletedEventHandler(object sender, LookUpTransactionByInvocieNoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LookUpTransactionByInvocieNoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LookUpTransactionByInvocieNoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void GetBProductListCompletedEventHandler(object sender, GetBProductListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetBProductListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetBProductListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void CheckProviderStatusCompletedEventHandler(object sender, CheckProviderStatusCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckProviderStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckProviderStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void sendNotificationCompletedEventHandler(object sender, sendNotificationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class sendNotificationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal sendNotificationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void GetTicketForTransactionCompletedEventHandler(object sender, GetTicketForTransactionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTicketForTransactionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTicketForTransactionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void GetProductFeeCompletedEventHandler(object sender, GetProductFeeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetProductFeeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetProductFeeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void GetProductUFeeCompletedEventHandler(object sender, GetProductUFeeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetProductUFeeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetProductUFeeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void GetMerchantBalanceCompletedEventHandler(object sender, GetMerchantBalanceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMerchantBalanceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMerchantBalanceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void GetTerminalBalanceCompletedEventHandler(object sender, GetTerminalBalanceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTerminalBalanceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTerminalBalanceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void BillPaymentInfoMxCompletedEventHandler(object sender, BillPaymentInfoMxCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class BillPaymentInfoMxCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal BillPaymentInfoMxCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void BillPaymentSaleMxCompletedEventHandler(object sender, BillPaymentSaleMxCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class BillPaymentSaleMxCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal BillPaymentSaleMxCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void DoSimActivationGSM1CompletedEventHandler(object sender, DoSimActivationGSM1CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DoSimActivationGSM1CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DoSimActivationGSM1CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void DoSimActivationCDMA1CompletedEventHandler(object sender, DoSimActivationCDMA1CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DoSimActivationCDMA1CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DoSimActivationCDMA1CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void ApplyPaymentISOLevelCompletedEventHandler(object sender, ApplyPaymentISOLevelCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ApplyPaymentISOLevelCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ApplyPaymentISOLevelCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void DMCActivationCompletedEventHandler(object sender, DMCActivationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DMCActivationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DMCActivationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void DMCDeviceCheckCompletedEventHandler(object sender, DMCDeviceCheckCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DMCDeviceCheckCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DMCDeviceCheckCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void DMCPortInActivationCompletedEventHandler(object sender, DMCPortInActivationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DMCPortInActivationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DMCPortInActivationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void GetPinProductsForActivationCompletedEventHandler(object sender, GetPinProductsForActivationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPinProductsForActivationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPinProductsForActivationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void ApplyPaymentAgentLevelCompletedEventHandler(object sender, ApplyPaymentAgentLevelCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ApplyPaymentAgentLevelCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ApplyPaymentAgentLevelCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void GetQuippiFxRateCompletedEventHandler(object sender, GetQuippiFxRateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetQuippiFxRateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetQuippiFxRateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void QuippiCreatePINCompletedEventHandler(object sender, QuippiCreatePINCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class QuippiCreatePINCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal QuippiCreatePINCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void QuippiCancelPINCompletedEventHandler(object sender, QuippiCancelPINCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class QuippiCancelPINCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal QuippiCancelPINCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void QuippiAuthorizeCompletedEventHandler(object sender, QuippiAuthorizeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class QuippiAuthorizeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal QuippiAuthorizeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void LycaPortInDetailsCompletedEventHandler(object sender, LycaPortInDetailsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LycaPortInDetailsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LycaPortInDetailsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void LycaCheckPortInEligibilityCompletedEventHandler(object sender, LycaCheckPortInEligibilityCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LycaCheckPortInEligibilityCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LycaCheckPortInEligibilityCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void LycaCancelPortInCompletedEventHandler(object sender, LycaCancelPortInCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LycaCancelPortInCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LycaCancelPortInCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void LycaModifyPortInCompletedEventHandler(object sender, LycaModifyPortInCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LycaModifyPortInCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LycaModifyPortInCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void validateLoginSecurityCompletedEventHandler(object sender, validateLoginSecurityCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class validateLoginSecurityCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal validateLoginSecurityCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void LocusActivateCDMAesnCompletedEventHandler(object sender, LocusActivateCDMAesnCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LocusActivateCDMAesnCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LocusActivateCDMAesnCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void LocusActivateCDMAsimCompletedEventHandler(object sender, LocusActivateCDMAsimCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LocusActivateCDMAsimCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LocusActivateCDMAsimCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void LocusActivateGSMAfcodeCompletedEventHandler(object sender, LocusActivateGSMAfcodeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LocusActivateGSMAfcodeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LocusActivateGSMAfcodeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void LocusActivateGSMsimCompletedEventHandler(object sender, LocusActivateGSMsimCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LocusActivateGSMsimCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LocusActivateGSMsimCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void LycaPortinPinCompletedEventHandler(object sender, LycaPortinPinCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LycaPortinPinCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LycaPortinPinCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void LycaPortinRTRCompletedEventHandler(object sender, LycaPortinRTRCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LycaPortinRTRCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LycaPortinRTRCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void LycaActivationPinCompletedEventHandler(object sender, LycaActivationPinCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LycaActivationPinCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LycaActivationPinCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void LycaActivationRTRCompletedEventHandler(object sender, LycaActivationRTRCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LycaActivationRTRCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LycaActivationRTRCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void BillPaymentUserFeeCompletedEventHandler(object sender, BillPaymentUserFeeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class BillPaymentUserFeeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal BillPaymentUserFeeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void CheckClerkCompletedEventHandler(object sender, CheckClerkCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckClerkCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckClerkCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void CommTestCompletedEventHandler(object sender, CommTestCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CommTestCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CommTestCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void CardSaleCompletedEventHandler(object sender, CardSaleCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CardSaleCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CardSaleCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void CardBalanceCompletedEventHandler(object sender, CardBalanceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CardBalanceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CardBalanceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void CardRefundCompletedEventHandler(object sender, CardRefundCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CardRefundCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CardRefundCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void PinDistSaleCompletedEventHandler(object sender, PinDistSaleCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PinDistSaleCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PinDistSaleCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void postRequestCompletedEventHandler(object sender, postRequestCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class postRequestCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal postRequestCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void TransRefundCompletedEventHandler(object sender, TransRefundCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TransRefundCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TransRefundCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void BillPaymentCompletedEventHandler(object sender, BillPaymentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class BillPaymentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal BillPaymentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void LoginCompletedEventHandler(object sender, LoginCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LoginCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LoginCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void LogoutCompletedEventHandler(object sender, LogoutCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LogoutCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LogoutCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void Login2CompletedEventHandler(object sender, Login2CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Login2CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Login2CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void NOCOperationCompletedEventHandler(object sender, NOCOperationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class NOCOperationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal NOCOperationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void SaleAsyncCompletedEventHandler(object sender, SaleAsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SaleAsyncCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SaleAsyncCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void CheckTBIDCompletedEventHandler(object sender, CheckTBIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckTBIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckTBIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void CheckTrxByIdCompletedEventHandler(object sender, CheckTrxByIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckTrxByIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckTrxByIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void ApplyPaymentCompletedEventHandler(object sender, ApplyPaymentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ApplyPaymentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ApplyPaymentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void QuippiRedeemCompletedEventHandler(object sender, QuippiRedeemCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class QuippiRedeemCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal QuippiRedeemCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void setTagNewCreditAfterTransactionCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void getTagNewCreditAfterTransactionCompletedEventHandler(object sender, getTagNewCreditAfterTransactionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getTagNewCreditAfterTransactionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getTagNewCreditAfterTransactionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591